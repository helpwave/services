syntax = "proto3";

package services.property_svc.v1;

import "services/property_svc/v1/types.proto";
import "libs/common/v1/conflict.proto";

option go_package = "gen/services/property-svc/v1";

//
// CreateProperty
//

// Creates a new Property
message CreatePropertyRequest {
  SubjectType subject_type = 2; // What kind of subject does this property belong to @gotags: validate:"required"
  FieldType field_type = 3; // What kind of data can be attached using this Property? @gotags: validate:"required"

  string name = 4; // readable identifier for this property (should, but does not have to be unique) @gotags: validate:"required"
  optional string description = 5; // Optional field for more context

  // ID of set this Property should belong to
  optional string set_id = 6; // Not implemented yet

  // some field types can be or must be configured further
  oneof field_type_data {
    SelectData select_data = 9;
  }

  // the select field type requires an (initial) set of options (possible values)
  message SelectData {
    optional bool allow_freetext = 1; // allows admins to allow or prevent users of using select fields like free-text fields, this means unknown options will be added to the option set when entered.
    repeated SelectOption options = 2; // @gotags: validate:"dive"
    message SelectOption {
      string name = 1; // @gotags: validate:"required"
      optional string description = 2;
    }
  }
}

message CreatePropertyResponse {
  string property_id = 1; // uuid of the property
  string consistency = 2;
}

//
// GetProperty
//

message GetPropertyRequest {
  string id = 1; // @gotags: validate:"uuid4"

  // describes from which View (global, ward, ...) the property is accessed from
  // The attribute "always_include_for_current_context" depends on this ViewSource
  optional ViewSource view_source = 2;

  message ViewSource {
    oneof value {
      bool global = 1;
      string ward_id = 2; // @gotags: validate:"omitempty,omitnil,uuid4"
    }
  }
}

message GetPropertyResponse {
  string id = 1;
  SubjectType subject_type = 2;
  FieldType field_type = 3;

  string name = 4;
  optional string description = 5;

  bool is_archived = 6;

  // id of set this Property should belong to
  optional string set_id = 8;

  oneof field_type_data {
    SelectData select_data = 10;
  }

  message SelectData {
    optional bool allow_freetext = 1;
    repeated SelectOption options = 2;

    message SelectOption {
      string id = 1;
      string name = 2;
      optional string description = 3;
      bool is_custom = 4;
      string consistency = 5;
    }
  }

  optional bool always_include_for_view_source = 11; // This value is dependend on the ViewSource

  string consistency = 12;
}

//
// UpdateProperty
//

message UpdatePropertyRequest {
  string id = 1; // @gotags: validate:"uuid4"

  optional SubjectType subject_type = 2;

  optional string name = 4;
  optional string description = 5;

  optional bool is_archived = 6;

  // ID of set this Property should belong to
  optional string set_id = 8;

  oneof field_type_data {
    SelectData select_data = 10;
  }

  optional string consistency = 11; // no conflict detection, if not provided

  message SelectData {
    optional bool allow_freetext = 1;
    repeated string remove_options = 2; // @gotags: validate:"dive,uuid4"
    repeated SelectOption upsert_options = 3; // @gotags: validate:"dive"

    message SelectOption {
      string id = 1; // @gotags: validate:"omitempty,uuid4"
      optional string name = 2;
      optional string description = 3;
      optional bool is_custom = 4;
    }
  }
}

message UpdatePropertyResponse {
  optional libs.common.v1.Conflict conflict = 1;
  string consistency = 2;
}

//
// GetPropertiesBySubjectType
//

message GetPropertiesRequest {
  optional SubjectType subject_type = 1;
}

message GetPropertiesResponse {
  message Property {
    string id = 1;
    SubjectType subject_type = 2;
    FieldType field_type = 3;

    string name = 4;
    optional string description = 5;

    bool is_archived = 6;

    // id of set this Property should belong to
    optional string set_id = 8;

    oneof field_type_data {
      SelectData select_data = 10;
    }

    string consistency = 9;

    message SelectData {
      optional bool allow_freetext = 1;
      repeated SelectOption options = 2;

      message SelectOption {
        string id = 1;
        string name = 2;
        optional string description = 3;
        bool is_custom = 4;
      }
    }
  }

  repeated Property properties = 1;
}
//
// PropertyService
//

service PropertyService {
  rpc CreateProperty(CreatePropertyRequest) returns (CreatePropertyResponse) {}
  rpc GetProperty(GetPropertyRequest) returns (GetPropertyResponse) {}
  rpc UpdateProperty(UpdatePropertyRequest) returns (UpdatePropertyResponse) {}
  rpc GetProperties(GetPropertiesRequest) returns (GetPropertiesResponse) {}
}
