syntax = "proto3";

package services.user_svc.v1;

option go_package = "gen/services/user-svc/v1";

enum InvitationState {
  INVITATION_STATE_UNSPECIFIED = 0;
  INVITATION_STATE_PENDING = 1;
  INVITATION_STATE_ACCEPTED = 2;
  INVITATION_STATE_REJECTED = 3;
  INVITATION_STATE_REVOKED = 4;
}

//
// CreateOrganization
//

message CreateOrganizationRequest {
  string long_name = 1; // @gotags: validate:"required,gte=4,lte=64"
  string short_name = 2; // @gotags: validate:"omitempty,gte=2,lte=16"
  string contact_email = 3; // @gotags: validate:"required,email"
  optional bool is_personal = 4; // default: false
}

message CreateOrganizationResponse {
  string id = 1;
}

//
// GetOrganization
//

message GetOrganizationMember {
  string user_id = 1;
}

message GetOrganizationRequest {
  string id = 1; // @gotags: validate:"uuid4"
}

message GetOrganizationResponse {
  string id = 1;
  string long_name = 2;
  string short_name = 3;
  string contact_email = 4;
  optional string avatar_url = 5;
  bool is_personal = 6;
  repeated GetOrganizationMember members = 7;
}

//
// GetOrganizationsByUser
// TODO: Internal
//

message GetOrganizationsByUserRequest {
  string user_id = 1; // @gotags: validate:"uuid4"
}

message GetOrganizationsByUserResponse {
  repeated Organization organizations = 1;

  message Organization {
    string id = 1;
    string long_name = 2;
    string short_name = 3;
    string contact_email = 4;
    optional string avatar_url = 5;
    bool is_personal = 6;
    repeated Member members = 7;

    message Member {
      string user_id = 1;
      string email = 2;
      string nickname = 3;
      optional string avatar_url = 4;
    }
  }
}

//
// GetOrganizationsForUser
//

message GetOrganizationsForUserRequest {}

message GetOrganizationsForUserResponse {
  repeated Organization organizations = 1;

  message Organization {
    string id = 1;
    string long_name = 2;
    string short_name = 3;
    string contact_email = 4;
    optional string avatar_url = 5;
    bool is_personal = 6;
    repeated Member members = 7;

    message Member {
      string user_id = 1;
      string email = 2;
      string nickname = 3;
      optional string avatar_url = 4;
    }
  }
}

//
//  UpdateOrganization
//

message UpdateOrganizationRequest {
  string id = 1;  // @gotags: validate:"uuid4"
  optional string long_name = 2;
  optional string short_name = 3;
  optional string contact_email = 4;
  optional string avatar_url = 5;
  optional bool is_personal = 6;
}

message UpdateOrganizationResponse {}

//
//  DeleteOrganization
//

message DeleteOrganizationRequest {
  string id = 1;  // @gotags: validate:"uuid4"
}

message DeleteOrganizationResponse {}


//
//  GetMembersByOrganization
//

message GetMembersByOrganizationRequest {
  string id = 1;  // @gotags: validate:"uuid4"
}

message GetMembersByOrganizationResponse {
  repeated Member members = 1;

  message Member {
    string user_id = 1;
    string email = 2;
    string nickname = 3;
    optional string avatar_url = 4;
  }
}


//
// AddMember
//

message AddMemberRequest {
  string id = 1; // @gotags: validate:"uuid4"
  string user_id = 2; // @gotags: validate:"uuid4"
}

message AddMemberResponse {}

//
// RemoveMember
//

message RemoveMemberRequest {
  string id = 1; // @gotags: validate:"uuid4"
  string user_id = 2; // @gotags: validate:"uuid4"
}

message RemoveMemberResponse{}

//
// InviteMember
//

message InviteMemberRequest {
  string organization_id = 1; // @gotags: validate:"uuid4"
  string email = 2; // @gotags: validate:"required,email"
}

message InviteMemberResponse {
  string id = 1;
}

//
// GetInvitationsByOrganization
//

message GetInvitationsByOrganizationRequest {
  string organization_id = 1;  // @gotags: validate:"uuid4"
  optional InvitationState state = 2;
}

message GetInvitationsByOrganizationResponse {
  repeated Invitation invitations = 1;

  message Invitation {
    string id = 1;
    string email = 2;
    string organization_id = 3;
    InvitationState state = 4;
  }
}


//
// GetInvitationsByUser
//

message GetInvitationsByUserRequest {
  optional InvitationState state = 1;
}

message GetInvitationsByUserResponse {
  repeated Invitation invitations = 1;

  message Invitation {
    string id = 1;
    string email = 2;
    Organization organization = 3;
    InvitationState state = 4;

    message Organization {
      string id = 1;
      string long_name = 2;
      optional string avatar_url = 3;
    }
  }
}


//
// AcceptInvite
//
message AcceptInvitationRequest {
  string invitation_id = 1;  // @gotags: validate:"uuid4"
}

message AcceptInvitationResponse {}


//
// DeclineInvitation
//

message DeclineInvitationRequest {
  string invitation_id = 1;  // @gotags: validate:"uuid4"
}

message DeclineInvitationResponse {}


//
// RevokeInvitation
//

message RevokeInvitationRequest {
  string invitation_id = 1;  // @gotags: validate:"uuid4"
}

message RevokeInvitationResponse {}

//
// CreatePersonalOrganization
//

message CreatePersonalOrganizationRequest {}

message CreatePersonalOrganizationResponse {
  string id = 1;
}


//
//  OrganizationService
//

service OrganizationService {
  rpc CreateOrganization (CreateOrganizationRequest) returns (CreateOrganizationResponse) {}
  rpc GetOrganization (GetOrganizationRequest) returns (GetOrganizationResponse) {}
  rpc GetOrganizationsByUser (GetOrganizationsByUserRequest) returns (GetOrganizationsByUserResponse) {}
  rpc GetOrganizationsForUser (GetOrganizationsForUserRequest) returns (GetOrganizationsForUserResponse) {}
  rpc UpdateOrganization (UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {}
  rpc DeleteOrganization (DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {}
  rpc GetMembersByOrganization (GetMembersByOrganizationRequest) returns (GetMembersByOrganizationResponse) {}
  rpc AddMember (AddMemberRequest) returns (AddMemberResponse) {}
  rpc RemoveMember (RemoveMemberRequest) returns (RemoveMemberResponse) {}
  rpc InviteMember (InviteMemberRequest) returns (InviteMemberResponse) {}
  rpc GetInvitationsByOrganization(GetInvitationsByOrganizationRequest) returns (GetInvitationsByOrganizationResponse) {}
  rpc GetInvitationsByUser(GetInvitationsByUserRequest) returns (GetInvitationsByUserResponse) {}
  rpc AcceptInvitation (AcceptInvitationRequest) returns (AcceptInvitationResponse) {}
  rpc DeclineInvitation(DeclineInvitationRequest) returns (DeclineInvitationResponse) {}
  rpc RevokeInvitation(RevokeInvitationRequest) returns (RevokeInvitationResponse) {}
  // CreatePersonalOrganization creates or returns the personal organization of the user
  // Based on the "Accept-Language" metadata, the localized prefix "Personal organization ..." gets selected
  rpc CreatePersonalOrganization(CreatePersonalOrganizationRequest) returns (CreatePersonalOrganizationResponse) {
    option idempotency_level = IDEMPOTENT;
  }
}
