syntax = "proto3";

package proto.services.user_svc.v1;

option go_package = "gen/proto/services/user-svc";

//
// Create User
//

message CreateUserRequest {
	string email = 1; // @gotags: validate:"required,email"
	string nickname = 2; // @gotags: validate:"required"
	string full_name = 3; // @gotags: validate:"required"
	string password = 4; // @gotags: validate:"required"
}

message CreateUserResponse {
	string user_id = 1;
}

//
// Update User
//

message UpdateUserRequest {
	// if userId is missing the requesting user's id is used
	optional string user_id = 1; // @gotags: validate:"omitempty,uuid4"
	optional string full_name = 2;
	optional string nickname = 3;
	optional string email = 4; // @gotags: validate:"omitempty,email"
	optional string password = 5;
}

message UpdateUserResponse {}

//
// Create Organization
//

message CreateOrganizationRequest {
	string long_name = 1; // @gotags: validate:"required,gte=4,lte=64"
	string short_name = 2; // @gotags: validate:"omitempty,gte=2,lte=16"
	string contact_email = 3; // @gotags: validate:"required,email"
}

message CreateOrganizationResponse {
	string id = 1;
	string long_name = 2;
	string short_name = 3;
	string contact_email = 4;
	string avatar_url = 5;
	bool is_personal = 6;
}

//
// UserService
//

service UserService {
	rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {}
	rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {}
	
	rpc CreateOrganization (CreateOrganizationRequest) returns (CreateOrganizationResponse) {}
}
