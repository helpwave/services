syntax = "proto3";

package proto.services.task_svc.v1;

option go_package = "gen/proto/services/task-svc";

//
// CreatePatient
//

message CreatePatientRequest {
	string human_readable_identifier = 1; // @gotags: validate:"required"
}

message CreatePatientResponse {
	string id = 1;
}

//
// GetPatient
//

message GetPatientRequest {
	string id = 1; // @gotags: validate:"uuid4"
}

message GetPatientResponse {
	string id = 1; // @gotags: validate:"uuid4"
	string human_readable_identifier = 2; // @gotags: validate:"required"
}

//
// GetPatients
//

message GetPatientsPatient {
	string id = 1;
	string human_readable_identifier = 2;
}

message GetPatientsRequest {}

message GetPatientsResponse {
	repeated GetPatientsPatient patients = 1;
}

//
// GetPatientByBed
//

message GetPatientByBedRequest {
	string bed_id = 1; // @gotags: validate:"uuid4"
}

message GetPatientByBedResponse {
	string id = 1;
	string human_readable_identifier = 2;
}

//
// GetPatientsByWard
//

message GetPatientsByWardPatient {
	string id = 1;
	string human_readable_identifier = 2;
}

message GetPatientsByWardRequest {
	string ward_id = 1; // @gotags: validate:"uuid4"
}

message GetPatientsByWardResponse {
	repeated GetPatientsByWardPatient patients = 1;
}

//
// UpdatePatient
//

message UpdatePatientRequest {
	string id = 1; // @gotags: validate:"uuid4"
	optional string human_readable_identifier = 2;
}

message UpdatePatientResponse {}

//
// AssignBed
//

message AssignBedRequest {
	string id = 1; // @gotags: validate:"uuid4"
	string bed_id = 2; // @gotags: validate:"uuid4"
}

message AssignBedResponse {}

//
// UnassignBed
//

message UnassignBedRequest {
	string id = 1; // @gotags: validate:"uuid4"
}

message UnassignBedResponse {}

//
// PatientService
//

service PatientService {
	rpc CreatePatient(CreatePatientRequest) returns (CreatePatientResponse) {}
	rpc GetPatient(GetPatientRequest) returns (GetPatientResponse) {}
	rpc UpdatePatient(UpdatePatientRequest) returns (UpdatePatientResponse) {}
	rpc AssignBed(AssignBedRequest) returns (AssignBedResponse) {}
	rpc UnassignBed(UnassignBedRequest) returns (UnassignBedResponse) {}
}
