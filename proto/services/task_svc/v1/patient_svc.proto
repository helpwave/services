syntax = "proto3";

package services.task_svc.v1;

option go_package = "gen/services/task-svc/v1";

//
// CreatePatient
//

message CreatePatientRequest {
  string human_readable_identifier = 1; // @gotags: validate:"required"
  string notes = 2;
}

message CreatePatientResponse {
  string id = 1;
}

//
// GetPatient
//

message GetPatientRequest {
  string id = 1; // @gotags: validate:"uuid4"
}

message GetPatientResponse {
  string id = 1; // @gotags: validate:"uuid4"
  string human_readable_identifier = 2; // @gotags: validate:"required"
  string notes = 3;
  optional string bed_id = 4 [deprecated=true];
  optional string ward_id = 5 [deprecated=true];

  optional Room room = 7;
  optional Bed bed = 8;

  message Room {
    string id = 1;
    string name = 2;
    string ward_id = 3;
  }

  message Bed {
    string id = 1;
    string name = 2;
  }

}

//
// DeletePatient
//
message DeletePatientRequest {
  string id = 1; // @gotags: validate:"uuid4"
}

message DeletePatientResponse {
}

//
// GetPatientByBed
//

message GetPatientByBedRequest {
  string bed_id = 1; // @gotags: validate:"uuid4"
}

message GetPatientByBedResponse {
  string id = 1;
  string human_readable_identifier = 2;
  string notes = 3;
  optional string bed_id = 4;
}

//
// GetPatientsByWard
//

message GetPatientsByWardRequest {
  string ward_id = 1; // @gotags: validate:"uuid4"
}

message GetPatientsByWardResponse {
  repeated Patient patients = 1;

  message Patient {
    string id = 1;
    string human_readable_identifier = 2;
    string notes = 3;
    optional string bed_id = 4;
  }
}


//
// GetPatientAssignmentByWard
//

message GetPatientAssignmentByWardRequest {
  string ward_id = 1; // @gotags: validate:"uuid4"
}

message GetPatientAssignmentByWardResponse {
  repeated Room rooms = 1;

  message Room {
    string id = 1;
    string name = 2;
    repeated Bed beds = 3;

    message Bed {
      string id = 1;
      string name = 2;
      optional Patient patient = 3;

      message Patient {
        string id = 1;
        string name = 2;
      }
    }
  }
}

//
// GetRecentPatients
//

message GetRecentPatientsRequest {}

message GetRecentPatientsResponse {
  repeated PatientWithRoomAndBed recent_patients = 1;

  message Bed {
    string id = 1;
    string name = 2;
  }

  message  Room {
    string  id = 1;
    string  name = 2;
    string  ward_id = 3;
  }

  message PatientWithRoomAndBed {
    string id = 1;
    string human_readable_identifier = 2;
    Room room = 3;
    Bed bed = 4;
  }
}


//
// UpdatePatient
//

message UpdatePatientRequest {
  string id = 1; // @gotags: validate:"uuid4"
  optional string human_readable_identifier = 2;
  optional string notes = 3;
}

message UpdatePatientResponse {}

//
// AssignBed
//

message AssignBedRequest {
  string id = 1; // @gotags: validate:"uuid4"
  string bed_id = 2; // @gotags: validate:"uuid4"
}

message AssignBedResponse {}

//
// UnassignBed
//

message UnassignBedRequest {
  string id = 1; // @gotags: validate:"uuid4"
}

message UnassignBedResponse {}

//
// DischargePatient
//

message DischargePatientRequest {
  string id = 1; // @gotags: validate:"uuid4"
}

message DischargePatientResponse {}


//
// GetPatientDetails
//

message GetPatientDetailsRequest {
  string id = 1; // @gotags: validate:"uuid4"
}

message GetPatientDetailsResponse {
  string id = 1;
  string name = 2;
  string human_readable_identifier = 3;
  string notes = 4;
  repeated Task tasks = 5;
  optional string ward_id = 6 [deprecated=true];
  optional Room room = 7;
  optional Bed bed = 8;
  bool is_discharged = 9;

  message Room {
    string id = 1;
    string name = 2;
    string ward_id = 3;
  }

  message Bed {
    string id = 1;
    string name = 2;
  }

  message Task {
    string id = 1;
    string name = 2;
    string description = 3;
    TaskStatus status = 4;
    optional string assigned_user_id = 5;
    string patient_id = 6;
    bool public = 7;
    repeated SubTask subtasks = 8;

    message SubTask {
      string id = 1;
      string name = 2;
      bool done = 3;
    }
  }

  enum TaskStatus {
    TASK_STATUS_UNSPECIFIED = 0;
    TASK_STATUS_TODO = 1;
    TASK_STATUS_IN_PROGRESS = 2;
    TASK_STATUS_DONE = 3;
  }
}


//
// GetPatientList
//

message GetPatientListRequest {
  optional string ward_id = 1;
}

message GetPatientListResponse {
  repeated PatientWithRoomAndBed active = 1;
  repeated Patient unassigned_patients = 2;
  repeated Patient discharged_patients = 3;

  message Patient {
    string id = 1;
    string human_readable_identifier = 2;
    string notes = 3;
    repeated Task tasks = 4;
  }

  message Bed {
    string id = 1;
    string name = 2;
  }

  message  Room {
    string  id = 1;
    string  name = 2;
    string  ward_id = 3;
  }

  message PatientWithRoomAndBed {
    string id = 1;
    string human_readable_identifier = 2;
    Room room = 3;
    Bed bed = 4;
    string notes = 5;
    repeated Task tasks = 6;
  }

  message Task {
    string id = 1;
    string name = 2;
    string description = 3;
    TaskStatus status = 4;
    optional string assigned_user_id = 5;
    string patient_id = 6;
    bool public = 7;
    repeated SubTask subtasks = 8;

    message SubTask {
      string id = 1;
      string name = 2;
      bool done = 3;
    }
  }

  enum TaskStatus {
    TASK_STATUS_UNSPECIFIED = 0;
    TASK_STATUS_TODO = 1;
    TASK_STATUS_IN_PROGRESS = 2;
    TASK_STATUS_DONE = 3;
  }
}


//
// ReadmitPatient
//

message ReadmitPatientRequest {
  string patient_id = 1; // @gotags: validate:"uuid4"
}

message ReadmitPatientResponse {}

//
// PatientService
//

service PatientService {
  rpc CreatePatient(CreatePatientRequest) returns (CreatePatientResponse) {}
  rpc GetPatient(GetPatientRequest) returns (GetPatientResponse) {}
  rpc GetPatientByBed(GetPatientByBedRequest) returns (GetPatientByBedResponse) {}
  rpc GetPatientsByWard(GetPatientsByWardRequest) returns (GetPatientsByWardResponse) {}
  rpc GetPatientAssignmentByWard(GetPatientAssignmentByWardRequest) returns (GetPatientAssignmentByWardResponse) {}
  rpc GetRecentPatients(GetRecentPatientsRequest) returns (GetRecentPatientsResponse) {}
  rpc UpdatePatient(UpdatePatientRequest) returns (UpdatePatientResponse) {}
  rpc AssignBed(AssignBedRequest) returns (AssignBedResponse) {}
  rpc UnassignBed(UnassignBedRequest) returns (UnassignBedResponse) {}
  rpc DischargePatient(DischargePatientRequest) returns (DischargePatientResponse) {}
  rpc GetPatientDetails(GetPatientDetailsRequest) returns (GetPatientDetailsResponse) {}
  rpc GetPatientList(GetPatientListRequest) returns (GetPatientListResponse) {}
  rpc DeletePatient(DeletePatientRequest) returns (DeletePatientResponse) {}
  rpc ReadmitPatient(ReadmitPatientRequest) returns (ReadmitPatientResponse) {}
}
