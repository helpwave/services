syntax = "proto3";

package proto.services.task_svc.v1;

option go_package = "gen/proto/services/task-svc";

//
// CreateRoom
//

message CreateRoomRequest {
	string name = 1; // @gotags: validate:"required"
}

message CreateRoomResponse {
	string id = 1;
}

//
// GetRoom
//

message GetRoomRequest {
	string id = 1; // @gotags: validate:"uuid4"
}

message GetRoomResponse {
	string id = 1;
	string name = 2;
	repeated Bed beds = 3;
	string organization_id = 4;
	string ward_id = 5;

	message Bed {
		string id = 1;
	}
}

//
// GetRooms
//

// TODO: Scope by organization
message GetRoomsRequest {}

message GetRoomsResponse {
	repeated Room rooms = 1;

	message Room {
		string id = 1;
		string name = 2;
		repeated Bed beds = 3;
		string organization_id = 4;
		string ward_id = 5;

		message Bed {
			string id = 1;
		}
	}
}

//
// GetRoomsByWard
//

message GetRoomsByWardRequest {
	string ward_id = 1; // @gotags: validate:"uuid4"
}

message GetRoomsByWardResponse {
	repeated Room rooms = 1;

	message Room {
		string id = 1;
		string name = 2;
		repeated Bed beds = 3;
		string organization_id = 4;
		string ward_id = 5;

		message Bed {
			string id = 1;
		}
	}
}

//
// UpdateRoom
//

message UpdateRoomRequest {
	string id = 1; // @gotags: validate:"uuid4"
	optional string name = 2;
}

message UpdateRoomResponse {}

//
// DeleteRoom
//

message DeleteRoomRequest {
	string id = 1; // @gotags: validate:"uuid4"
}

message DeleteRoomResponse {}

//
// RoomService
//

service RoomService {
	rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse) {}
	rpc GetRoom(GetRoomRequest) returns (GetRoomResponse) {}
	rpc UpdateRoom(UpdateRoomRequest) returns (UpdateRoomResponse) {}
	rpc DeleteRoom(DeleteRoomRequest) returns (DeleteRoomResponse) {}
}
