syntax = "proto3";

package proto.services.tasks_svc.v1;

option go_package = "gen/proto/services/tasks-svc";

enum SubjectType {
  SUBJECT_TYPE_UNSPECIFIED = 0;
  SUBJECT_TYPE_PATIENT = 1;
}

enum FieldType {
  FIELD_TYPE_UNSPECIFIED = 0;
  FIELD_TYPE_TEXT = 1;
  FIELD_TYPE_NUMBER = 2;
  FIELD_TYPE_CHECKBOX = 3;
  FIELD_TYPE_DATE = 4;
  FIELD_TYPE_DATE_TIME = 5;
  FIELD_TYPE_SELECT = 6;
}

// TODO: View"Context" is too general of a name for this in my opinion
enum ViewContext {
  VIEW_CONTEXT_UNSPECIFIED = 0;
  VIEW_CONTEXT_GLOBAL = 1;
  // TODO TBD: VIEW_CONTEXT_ORGANIZATION = 2;
  VIEW_CONTEXT_WARD = 2;
}

/***************************************************/
/********* Work with the Properties Schema *********/
/***************************************************/

//
// CreatePropertySet
//

message CreatePropertySetRequest {
  string name = 1;

  repeated string properties = 3; // @gotags: validate:"dive,uuid4"
}

message CreatePropertySetResponse {
  string property_set_id = 1;
}

//
// UpdatePropertySet
//


message UpdatePropertySetRequest {
  string set_id = 1; // @gotags: validate:"uuid4"
  optional string name = 2; // TODO: add validation

  repeated string added_properties = 3; // @gotags: validate:"dive,uuid4"
  repeated string removed_properties = 4; // @gotags: validate:"dive,uuid4"
}

message UpdatePropertySetResponse {}

//
// UpdatePropertySet
//


message DeletePropertySetRequest {
  string set_id = 1; // @gotags: validate:"uuid4"
}

message DeletePropertySetResponse {}

//
// CreateProperty
//

message CreatePropertyRequest {
  ViewContext context = 1;
  SubjectType subject_type = 2; // TODO: add validation here (not-unspecified check)
  FieldType field_type = 3; // TODO: add validation here (not-unspecified check)

  string name = 4; // TODO: add validation (at least non-empty checks)
  optional string description = 5; // TODO: add validation, if needed

  // ID of set this Property should belong to
  optional string set_id = 6;

  optional bool always_include_for_current_context = 7;

  oneof field_type_data {
    bool none = 8;
    SelectData select_data = 9;
  }

  message SelectData {
    optional bool allow_freetext = 1;
    repeated SelectOption options = 2;
    message SelectOption {
      string name = 1; // TODO: add validation (at least non-empty checks)
      optional string description = 2; // TODO: add validation, if needed
    }
  }

}

message CreatePropertyResponse {
  string property_id = 1;
}


//
// GetProperty
//


message GetPropertyRequest {
  string id = 1; // @gotags: validate:"uuid4"
  ViewContext context = 2;
}

message GetPropertyResponse {
  string id = 1;
  SubjectType subject_type = 2;
  FieldType field_type = 3;

  string name = 4;
  optional string description = 5;

  bool is_archived = 6;

  // ID of set this Property should belong to
  optional string set_id = 8;

  oneof field_type_data {
    bool none = 9;
    SelectData select_data = 10;
  }

  message SelectData {
    optional bool allow_freetext = 1;
    repeated SelectOption options = 2;

    message SelectOption {
      string name = 1;
      optional string description = 2;
    }
  }

  optional bool always_include_for_current_context = 11;
}

//
// GetProperties
//

message GetPropertiesRequest {
  optional string set_id = 1; // @gotags: validate:"uuid4"
  optional SubjectType subject_type = 2;
}

message GetPropertiesResponse {
  message Property {
    string id = 1;
    SubjectType subject_type = 2;
    FieldType field_type = 3;

    string name = 4;
    optional string description = 5;

    bool is_archived = 6;

    // ID of set this Property should belong to
    optional string set_id = 8;

    oneof field_type_data {
      bool none = 9;
      SelectData select_data = 10;
    }

    message SelectData {
      optional bool allow_freetext = 1;
      repeated SelectOption options = 2;

      message SelectOption {
        string name = 1;
        optional string description = 2;
        bool is_custom = 3;
      }
    }

    optional bool always_include_for_current_context = 11;
  }

  repeated Property properties = 1;
}

//
// UpdateProperty
//

message UpdatePropertyRequest {
  string id = 1;

  optional SubjectType subject_type = 2;
  optional FieldType field_type = 3;

  optional string name = 4; // TODO: validation
  optional string description = 5; // TODO: validation

  optional bool is_archived = 6;

  // ID of set this Property should belong to
  optional string set_id = 8;

  oneof field_type_data {
    bool none = 9;
    SelectData select_data = 10;
  }

  message SelectData {
    optional bool allow_freetext = 1;
    repeated string remove_options = 2; // @gotags: validate:"dive,uuid4"
    repeated SelectOption upsert_options = 3;

    message SelectOption {
      string id = 1;
      optional string name = 2;
      optional string description = 3;
      optional bool is_custom = 4;
    }
  }


  // TODO: TBD: optional bool always_include_for_current_context = 11;
}

message UpdatePropertyResponse {}

/***************************************************/
/************ Work with Property Values ************/
/***************************************************/

//
// AttachPropertyValue
//

// attach the same property again to update
message AttachPropertyValueRequest {
  string subject_id = 1; // @gotags: validate:"uuid4"
  SubjectType subject_type = 2; // TODO: validation (not 0)
  string property_id = 3; // @gotags: validate:"uuid4"

  oneof value {
    bool is_undefined = 4; // if it exists, it should be true
    string text_value = 5; // FIELD_TYPE_TEXT
    float number_value = 6; // FIELD_TYPE_NUMBER
    bool bool_value = 7; // FIELD_TYPE_CHECKBOX
    string date_value = 8; // FIELD_TYPE_DATE TODO: is there a proto date type?
    string date_time_value = 9; // FIELD_TYPE_DATE_TIME
    string select_value = 10; // FIELD_TYPE_SELECT, id of option
  }
}

message AttachPropertyValueResponse {
  string property_value_id = 1;
}

//
// GetAttachedPropertyValues
//

message GetAttachedPropertyValuesRequest {
  string subject_id = 1; // @gotags: validate:"uuid4"
}

message GetAttachedPropertyValuesResponse {
  message Value {
    string property_id = 1;
    FieldType field_type = 2;
    string name = 3;
    optional string description = 4;

    bool is_archived = 5;

    message Set {
      string id = 1;
      string name = 2;
    }
    optional Set set = 7;

    oneof value {
      bool is_undefined = 8; // if it exists, it's true
      string text_value = 9; // FIELD_TYPE_TEXT
      float number_value = 10; // FIELD_TYPE_NUMBER
      bool bool_value = 11; // FIELD_TYPE_CHECKBOX
      string date_value = 12; // FIELD_TYPE_DATE TODO: is there a proto date type?
      string date_time_value = 13; // FIELD_TYPE_DATE_TIME
      string select_value = 14; // FIELD_TYPE_SELECT, id of option
    }
  }

  repeated Value values = 1;
  // TODO: TBD: Property Information for Values
}


/***************************************************/
/********* Work with the Properties Views  *********/
/***************************************************/

message UpdatePatientPropertyViewRuleRequest {
  /* matchers */
  optional string ward_id = 1;
  optional string patient_id = 2;

  /* Filter Update */

  oneof soft_required {
    bool reset_soft_required = 3; // sets soft_required to null for this matcher, when true
    bool set_soft_required = 4; // sets the value of the soft_required filter for this matcher
  }

  // append property_id to the always_include list
  // this means the property is shown, unless a more specific rule
  // puts it in its dont_always_include list
  optional string append_to_always_include = 5;

  // remove property_id to the always_include list, also see append_to_always_include
  optional string remove_from_always_include = 6;

  // append property_id to the dont_always_include list, also see append_to_always_include
  optional string append_to_dont_always_include = 7;

  // remove property_id to the dont_always_include list, also see append_to_always_include
  optional string remove_from_dont_always_include = 8;
}

message UpdatePatientPropertyViewRuleResponse {}

message UpdateOrderRequest {
  // id of the property that we "move"
  string property_id = 1;
  // the id of the property with an id just before the property that you are moving
  // when left blank this means it's moved to the very top
  optional string prev_neighbor = 2;
}

message UpdateOrderResponse {}

service PropertiesService {
  rpc CreatePropertySet (CreatePropertySetRequest) returns (CreatePropertySetResponse) {}
  rpc UpdatePropertySet (UpdatePropertySetRequest) returns (UpdatePropertySetResponse) {}
  rpc DeletePropertySet (DeletePropertySetRequest) returns (DeletePropertySetResponse) {}

  rpc CreateProperty (CreatePropertyRequest) returns (CreatePropertyResponse) {}
  rpc GetProperty (GetPropertyRequest) returns (GetPropertyResponse) {}
  rpc GetProperties (GetPropertiesRequest) returns (GetPropertiesResponse) {}
  rpc UpdateProperty (UpdatePropertyRequest) returns (UpdatePropertyResponse) {}

  rpc AttachPropertyValue (AttachPropertyValueRequest) returns (AttachPropertyValueResponse) {}
  rpc GetAttachedPropertyValues (GetAttachedPropertyValuesRequest) returns (GetAttachedPropertyValuesResponse) {}

  rpc UpdatePatientPropertyViewRule (UpdatePatientPropertyViewRuleRequest) returns (UpdatePatientPropertyViewRuleResponse) {}
  rpc UpdateOrder (UpdateOrderRequest) returns (UpdateOrderResponse) {}
}
