definition organization {
	relation leader: user
	relation member: user

	// foreign types, when traversing, should use permissions, not relations
	// this is a best practice to maintain a more stable "API" between types
	permission leadership = leader
	permission membership = leader + member

	// all members can get the organization
	permission get = membership;
	permission get_members = get;

	// (only) leaders can update and delete an organization
	permission update = leadership;
	permission delete = leadership;

	// (only) leaders can invite and remove members
	permission invite_member = leadership
	permission remove_member = leadership

	// all members can create new properties
	permission create_property = membership;

	// all members can create new property_sets
	permission create_property_set = membership;

	// all members can create new wards
	permission create_ward = membership;

	// all members can create new patients
	permission create_patient = membership;

	// all members can alter root property rules
	permission alter_root_property_rules = membership;
}

definition organization_invite {
	// When an email becomes the target of an invite, there are two possible states:
	// - either the email is currently used by an existing user or
	// - it is not
	// In the former, we target that user directly, this prevents issues in case
	// the user changes their email-address while an invite is pending and other nastiness.
	// If we can't do that, we assign permissions to the invite to the email directly.
	// (We actually store a hash of the email instead for both compliance and technical reasons)
	relation invitee: user | email
	relation organization: organization

	permission view = invitee + organization->leadership
	permission accept = invitee
	permission deny = invitee
	permission cancel = organization->leadership
}
