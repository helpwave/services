# We use APISIX in standalone mode, this means no database is required (usually APISIX uses etcd to store it's config),
# instead we define all routing configuration in this yaml file
# Profiles (e.g. apisix-prod.yaml) are supported
# For reference see https://apisix.apache.org/docs/apisix/admin-api/
#
# To configure APISIX' non-dynamic config, see apisix_config.yaml


# Upstreams are the backends that APISIX can send traffic to,
# for development and staging this is configured statically
# APISIX has upstream discovery features though
#
# Currently we send all traffic to dapr, which then routes the requests to the corresponding service,
# this might be improved up on in the future
upstreams:
    # Dapr's grpc router,
    # it routes grpc traffic it receives to the corresponding app (i.e. service)
    # based on the dapr-app-id metadata key (think: http header)
  - id: dapr-grpc
    nodes:
      "localhost:35001": 1
    scheme: grpc
    # Dapr's http router works similar to the dapr grpc router
  - id: dapr-http
    scheme: http
    nodes:
      "localhost:3500": 1

# Services define groups of API endpoints, which correspond to logical (and in our case physical) services.
# Most services have a plugin chain like this:
# - grpc-web, is both a frontend library and a proxy that allows grpc communication from browsers, see [AGW]
# - proxy-rewrite, which we use to add the dapr-app-id header, so dapr will route the request to the correct service
#
# _meta: priority -1 => We need to define the plugin order manually,
# for example the cors and grpc-web plugin do not get along so well:
# https://the-asf.slack.com/archives/CUC5MN17A/p1685478440334289
#
# [AGW]: https://apisix.apache.org/blog/2022/01/25/apisix-grpc-web-integration/
services:
  - id: tasks-svc
    upstream_id: dapr-grpc
    plugins:
      grpc-web: {}
      proxy-rewrite:
        headers:
          add:
            dapr-app-id: tasks-svc
global_rules:
  - id: 1
    plugins:
      opentelemetry:
        sampler:
          name: always_on # might be too much

# Routes define all endpoints APISIX is supposed to handle and maps them to their service
routes:
  # Service Routes
  - id: tasks-svc
    uri: /tasks-svc/*
    service_id: tasks-svc
    # TODO: maybe we can move this to the service?
    plugins:
      cors:
        # TODO: Scope to grpc-web spec
        allow_origins: "**"
        allow_methods: "**"
        allow_headers: "**"
        expose_headers: "grpc-status,grpc-message"
        max_age: 5
        allow_credential: true
        _meta:
          priority: -1
  # Catch-all: route grpc traffic to dapr-grpc (without grpc-web!)
  # used by mobile, which talks grpc
  - id: grpc
    uri: /*
    upstream_id: dapr-grpc

#END
