// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task_template_repo.sql

package task_template_repo

import (
	"context"

	"github.com/google/uuid"
)

type AppendSubTasksParams struct {
	Name           string
	TaskTemplateID uuid.UUID
}

const createSubTask = `-- name: CreateSubTask :one
WITH inserted_subtask AS (
	INSERT INTO task_template_subtasks (name, task_template_id)
		VALUES ($2, $1)
		RETURNING id
)
UPDATE task_templates
SET consistency = consistency + 1
WHERE task_templates.id = $1
RETURNING (SELECT id FROM inserted_subtask), consistency
`

type CreateSubTaskParams struct {
	TaskTemplateID uuid.UUID
	Name           string
}

type CreateSubTaskRow struct {
	ID          uuid.UUID
	Consistency int64
}

func (q *Queries) CreateSubTask(ctx context.Context, arg CreateSubTaskParams) (CreateSubTaskRow, error) {
	row := q.db.QueryRow(ctx, createSubTask, arg.TaskTemplateID, arg.Name)
	var i CreateSubTaskRow
	err := row.Scan(&i.ID, &i.Consistency)
	return i, err
}

const createTaskTemplate = `-- name: CreateTaskTemplate :one
INSERT INTO task_templates
	(name, description, created_by, ward_id) VALUES ($1, $2, $3, $4)
    RETURNING id, consistency
`

type CreateTaskTemplateParams struct {
	Name        string
	Description string
	CreatedBy   uuid.UUID
	WardID      uuid.NullUUID
}

type CreateTaskTemplateRow struct {
	ID          uuid.UUID
	Consistency int64
}

func (q *Queries) CreateTaskTemplate(ctx context.Context, arg CreateTaskTemplateParams) (CreateTaskTemplateRow, error) {
	row := q.db.QueryRow(ctx, createTaskTemplate,
		arg.Name,
		arg.Description,
		arg.CreatedBy,
		arg.WardID,
	)
	var i CreateTaskTemplateRow
	err := row.Scan(&i.ID, &i.Consistency)
	return i, err
}

const deleteSubtask = `-- name: DeleteSubtask :one
DELETE FROM task_template_subtasks WHERE id = $1 RETURNING id, task_template_id, name
`

func (q *Queries) DeleteSubtask(ctx context.Context, id uuid.UUID) (TaskTemplateSubtask, error) {
	row := q.db.QueryRow(ctx, deleteSubtask, id)
	var i TaskTemplateSubtask
	err := row.Scan(&i.ID, &i.TaskTemplateID, &i.Name)
	return i, err
}

const deleteTaskTemplate = `-- name: DeleteTaskTemplate :exec
DELETE FROM task_templates WHERE id = $1
`

func (q *Queries) DeleteTaskTemplate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTaskTemplate, id)
	return err
}

const getAllTaskTemplatesWithSubTasks = `-- name: GetAllTaskTemplatesWithSubTasks :many
SELECT
	task_templates.id, task_templates.name, task_templates.description, task_templates.ward_id, task_templates.created_by, task_templates.consistency,
	task_template_subtasks.id as sub_task_id,
	task_template_subtasks.name as sub_task_name
FROM
	task_templates
LEFT JOIN
	task_template_subtasks
ON
	task_template_subtasks.task_template_id = task_templates.id
WHERE
	(task_templates.ward_id = $1 OR $1 IS NULL)
AND (task_templates.ward_id IS NULL OR NOT $2::bool)
AND (task_templates.created_by = $3 OR $3 IS NULL)
`

type GetAllTaskTemplatesWithSubTasksParams struct {
	WardID      uuid.NullUUID
	PrivateOnly bool
	CreatorID   uuid.NullUUID
}

type GetAllTaskTemplatesWithSubTasksRow struct {
	TaskTemplate TaskTemplate
	SubTaskID    uuid.NullUUID
	SubTaskName  *string
}

func (q *Queries) GetAllTaskTemplatesWithSubTasks(ctx context.Context, arg GetAllTaskTemplatesWithSubTasksParams) ([]GetAllTaskTemplatesWithSubTasksRow, error) {
	rows, err := q.db.Query(ctx, getAllTaskTemplatesWithSubTasks, arg.WardID, arg.PrivateOnly, arg.CreatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllTaskTemplatesWithSubTasksRow{}
	for rows.Next() {
		var i GetAllTaskTemplatesWithSubTasksRow
		if err := rows.Scan(
			&i.TaskTemplate.ID,
			&i.TaskTemplate.Name,
			&i.TaskTemplate.Description,
			&i.TaskTemplate.WardID,
			&i.TaskTemplate.CreatedBy,
			&i.TaskTemplate.Consistency,
			&i.SubTaskID,
			&i.SubTaskName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubtask = `-- name: UpdateSubtask :one
WITH old_table AS (
	SELECT name as old_name
	FROM task_template_subtasks
	WHERE task_template_subtasks.id = $2
)
UPDATE task_template_subtasks ttst
SET	name = coalesce($1, name)
WHERE ttst.id = $2
RETURNING
	(
		SELECT tt.id as task_template_id
		FROM task_templates tt
		WHERE tt.id = ttst.task_template_id
	),
	(SELECT old_name FROM old_table)
`

type UpdateSubtaskParams struct {
	Name *string
	ID   uuid.UUID
}

type UpdateSubtaskRow struct {
	TaskTemplateID uuid.UUID
	OldName        string
}

func (q *Queries) UpdateSubtask(ctx context.Context, arg UpdateSubtaskParams) (UpdateSubtaskRow, error) {
	row := q.db.QueryRow(ctx, updateSubtask, arg.Name, arg.ID)
	var i UpdateSubtaskRow
	err := row.Scan(&i.TaskTemplateID, &i.OldName)
	return i, err
}

const updateTaskTemplate = `-- name: UpdateTaskTemplate :one
WITH old_table AS (
	SELECT
		name as old_name,
		description as old_description,
		consistency as old_consistency
	FROM task_templates
	WHERE task_templates.id = $3
)
UPDATE task_templates
SET	name = coalesce($1, name),
	description = coalesce($2, description),
	consistency = consistency + 1
WHERE task_templates.id = $3
RETURNING
	consistency,
	(SELECT old_name FROM old_table),
	(SELECT old_description FROM old_table),
	(SELECT old_consistency FROM old_table)
`

type UpdateTaskTemplateParams struct {
	Name        *string
	Description *string
	ID          uuid.UUID
}

type UpdateTaskTemplateRow struct {
	Consistency    int64
	OldName        string
	OldDescription string
	OldConsistency int64
}

func (q *Queries) UpdateTaskTemplate(ctx context.Context, arg UpdateTaskTemplateParams) (UpdateTaskTemplateRow, error) {
	row := q.db.QueryRow(ctx, updateTaskTemplate, arg.Name, arg.Description, arg.ID)
	var i UpdateTaskTemplateRow
	err := row.Scan(
		&i.Consistency,
		&i.OldName,
		&i.OldDescription,
		&i.OldConsistency,
	)
	return i, err
}
