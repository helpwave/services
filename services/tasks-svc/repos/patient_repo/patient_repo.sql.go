// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: patient_repo.sql

package patient_repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPatient = `-- name: CreatePatient :exec
INSERT INTO patients
	(id, human_readable_identifier, notes, created_at, updated_at, consistency)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreatePatientParams struct {
	ID                      uuid.UUID
	HumanReadableIdentifier string
	Notes                   string
	CreatedAt               pgtype.Timestamp
	UpdatedAt               pgtype.Timestamp
	Consistency             int64
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) error {
	_, err := q.db.Exec(ctx, createPatient,
		arg.ID,
		arg.HumanReadableIdentifier,
		arg.Notes,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Consistency,
	)
	return err
}

const deletePatient = `-- name: DeletePatient :exec
DELETE FROM patients WHERE id = $1
`

func (q *Queries) DeletePatient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePatient, id)
	return err
}

const getAllPatientsWithTasksBedAndRoom = `-- name: GetAllPatientsWithTasksBedAndRoom :many
SELECT
	patients.id, patients.human_readable_identifier, patients.notes, patients.bed_id, patients.created_at, patients.updated_at, patients.is_discharged, patients.consistency,
	tasks.id as task_id,
	tasks.name as task_name,
	tasks.description as task_description,
	tasks.status as task_status,
	tasks.assigned_user_id as task_assigned_user_id,
	tasks.public as task_public,
	tasks.consistency as task_consistency,
	subtasks.id as subtask_id,
	subtasks.name as subtask_name,
	subtasks.done as subtask_done,
	beds.id as bed_id,
	beds.name as bed_name,
	beds.consistency as beds_consistency,
	rooms.id as room_id,
	rooms.name as room_name,
	rooms.ward_id as ward_id,
	rooms.consistency as room_consistency
FROM patients
		 LEFT JOIN tasks ON tasks.patient_id = patients.id
		 LEFT JOIN subtasks ON subtasks.task_id = tasks.id
		 LEFT JOIN beds ON beds.id = patients.bed_id
		 LEFT JOIN rooms ON rooms.id = beds.room_id
`

type GetAllPatientsWithTasksBedAndRoomRow struct {
	Patient            Patient
	TaskID             uuid.NullUUID
	TaskName           *string
	TaskDescription    *string
	TaskStatus         *int32
	TaskAssignedUserID uuid.NullUUID
	TaskPublic         *bool
	TaskConsistency    *int64
	SubtaskID          uuid.NullUUID
	SubtaskName        *string
	SubtaskDone        *bool
	BedID              uuid.NullUUID
	BedName            *string
	BedsConsistency    *int64
	RoomID             uuid.NullUUID
	RoomName           *string
	WardID             uuid.NullUUID
	RoomConsistency    *int64
}

func (q *Queries) GetAllPatientsWithTasksBedAndRoom(ctx context.Context) ([]GetAllPatientsWithTasksBedAndRoomRow, error) {
	rows, err := q.db.Query(ctx, getAllPatientsWithTasksBedAndRoom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllPatientsWithTasksBedAndRoomRow{}
	for rows.Next() {
		var i GetAllPatientsWithTasksBedAndRoomRow
		if err := rows.Scan(
			&i.Patient.ID,
			&i.Patient.HumanReadableIdentifier,
			&i.Patient.Notes,
			&i.Patient.BedID,
			&i.Patient.CreatedAt,
			&i.Patient.UpdatedAt,
			&i.Patient.IsDischarged,
			&i.Patient.Consistency,
			&i.TaskID,
			&i.TaskName,
			&i.TaskDescription,
			&i.TaskStatus,
			&i.TaskAssignedUserID,
			&i.TaskPublic,
			&i.TaskConsistency,
			&i.SubtaskID,
			&i.SubtaskName,
			&i.SubtaskDone,
			&i.BedID,
			&i.BedName,
			&i.BedsConsistency,
			&i.RoomID,
			&i.RoomName,
			&i.WardID,
			&i.RoomConsistency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatientByBed = `-- name: GetPatientByBed :one
SELECT patients.id, patients.human_readable_identifier, patients.notes, patients.bed_id, patients.created_at, patients.updated_at, patients.is_discharged, patients.consistency
FROM patients
WHERE bed_id = $1
	LIMIT 1
`

func (q *Queries) GetPatientByBed(ctx context.Context, bedID uuid.NullUUID) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByBed, bedID)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.HumanReadableIdentifier,
		&i.Notes,
		&i.BedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDischarged,
		&i.Consistency,
	)
	return i, err
}

const getPatientWithBedAndRoom = `-- name: GetPatientWithBedAndRoom :one
SELECT
	patients.id, patients.human_readable_identifier, patients.notes, patients.bed_id, patients.created_at, patients.updated_at, patients.is_discharged, patients.consistency,
	beds.name as bed_name,
	beds.consistency as bed_consistency,
	rooms.id as room_id,
	rooms.name as room_name,
	rooms.ward_id as ward_id,
	rooms.consistency as room_consistency
FROM patients
		 LEFT JOIN beds ON patients.bed_id = beds.id
		 LEFT JOIN rooms ON beds.room_id = rooms.id
WHERE patients.id = $1
LIMIT 1
`

type GetPatientWithBedAndRoomRow struct {
	ID                      uuid.UUID
	HumanReadableIdentifier string
	Notes                   string
	BedID                   uuid.NullUUID
	CreatedAt               pgtype.Timestamp
	UpdatedAt               pgtype.Timestamp
	IsDischarged            bool
	Consistency             int64
	BedName                 *string
	BedConsistency          *int64
	RoomID                  uuid.NullUUID
	RoomName                *string
	WardID                  uuid.NullUUID
	RoomConsistency         *int64
}

func (q *Queries) GetPatientWithBedAndRoom(ctx context.Context, patientID uuid.UUID) (GetPatientWithBedAndRoomRow, error) {
	row := q.db.QueryRow(ctx, getPatientWithBedAndRoom, patientID)
	var i GetPatientWithBedAndRoomRow
	err := row.Scan(
		&i.ID,
		&i.HumanReadableIdentifier,
		&i.Notes,
		&i.BedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDischarged,
		&i.Consistency,
		&i.BedName,
		&i.BedConsistency,
		&i.RoomID,
		&i.RoomName,
		&i.WardID,
		&i.RoomConsistency,
	)
	return i, err
}

const getPatientsByWard = `-- name: GetPatientsByWard :many
SELECT
	patients.id, patients.human_readable_identifier, patients.notes, patients.bed_id, patients.created_at, patients.updated_at, patients.is_discharged, patients.consistency
FROM patients
		 JOIN beds ON patients.bed_id = beds.id
		 JOIN rooms ON beds.room_id = rooms.id
WHERE rooms.ward_id = $1
`

func (q *Queries) GetPatientsByWard(ctx context.Context, wardID uuid.UUID) ([]Patient, error) {
	rows, err := q.db.Query(ctx, getPatientsByWard, wardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Patient{}
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.HumanReadableIdentifier,
			&i.Notes,
			&i.BedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDischarged,
			&i.Consistency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePatient = `-- name: UpdatePatient :exec
UPDATE patients
SET human_readable_identifier = coalesce($2, human_readable_identifier),
    notes = coalesce($3, notes),
    updated_at = coalesce($4, updated_at),
    is_discharged = coalesce($5, is_discharged),
	consistency = $6
WHERE id = $1
`

type UpdatePatientParams struct {
	ID                     uuid.UUID
	HumanReadableIdentfier *string
	Notes                  *string
	UpdatedAt              pgtype.Timestamp
	IsDischarged           *bool
	Consistency            int64
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) error {
	_, err := q.db.Exec(ctx, updatePatient,
		arg.ID,
		arg.HumanReadableIdentfier,
		arg.Notes,
		arg.UpdatedAt,
		arg.IsDischarged,
		arg.Consistency,
	)
	return err
}

const updatePatientBedId = `-- name: UpdatePatientBedId :exec
UPDATE patients
SET bed_id = $1,
    updated_at = $2,
	consistency = $3
WHERE id = $4
`

type UpdatePatientBedIdParams struct {
	BedID       uuid.NullUUID
	UpdatedAt   pgtype.Timestamp
	Consistency int64
	ID          uuid.UUID
}

func (q *Queries) UpdatePatientBedId(ctx context.Context, arg UpdatePatientBedIdParams) error {
	_, err := q.db.Exec(ctx, updatePatientBedId,
		arg.BedID,
		arg.UpdatedAt,
		arg.Consistency,
		arg.ID,
	)
	return err
}
