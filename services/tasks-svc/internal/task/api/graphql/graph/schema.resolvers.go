package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"tasks-svc/internal/task/api/graphql/graph/model"
	v1queries "tasks-svc/internal/task/queries/v1"

	"github.com/google/uuid"
)

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id uuid.UUID) (*model.Task, error) {
	task, err := v1queries.NewGetTaskByIDQueryHandler(r.as)(ctx, id)
	if err != nil {
		return nil, err
	}

	var subtasksRes []*model.Subtask
	for _, subtask := range task.Subtasks {
		subtasksRes = append(subtasksRes, &model.Subtask{
			ID:   subtask.ID,
			Name: subtask.Name,
			Done: subtask.Done,
		})
	}

	return &model.Task{
		ID:          task.ID,
		Name:        task.Name,
		Description: task.Description,
		Subtasks:    subtasksRes,
	}, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: Tasks - tasks"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
