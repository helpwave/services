// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"task-svc/ent/migrate"

	"task-svc/ent/bed"
	"task-svc/ent/patient"
	"task-svc/ent/room"
	"task-svc/ent/subtask"
	"task-svc/ent/task"
	"task-svc/ent/tasktemplate"
	"task-svc/ent/tasktemplatesubtask"
	"task-svc/ent/ward"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bed is the client for interacting with the Bed builders.
	Bed *BedClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// SubTask is the client for interacting with the SubTask builders.
	SubTask *SubTaskClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// TaskTemplate is the client for interacting with the TaskTemplate builders.
	TaskTemplate *TaskTemplateClient
	// TaskTemplateSubTask is the client for interacting with the TaskTemplateSubTask builders.
	TaskTemplateSubTask *TaskTemplateSubTaskClient
	// Ward is the client for interacting with the Ward builders.
	Ward *WardClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bed = NewBedClient(c.config)
	c.Patient = NewPatientClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.SubTask = NewSubTaskClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.TaskTemplate = NewTaskTemplateClient(c.config)
	c.TaskTemplateSubTask = NewTaskTemplateSubTaskClient(c.config)
	c.Ward = NewWardClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Bed:                 NewBedClient(cfg),
		Patient:             NewPatientClient(cfg),
		Room:                NewRoomClient(cfg),
		SubTask:             NewSubTaskClient(cfg),
		Task:                NewTaskClient(cfg),
		TaskTemplate:        NewTaskTemplateClient(cfg),
		TaskTemplateSubTask: NewTaskTemplateSubTaskClient(cfg),
		Ward:                NewWardClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Bed:                 NewBedClient(cfg),
		Patient:             NewPatientClient(cfg),
		Room:                NewRoomClient(cfg),
		SubTask:             NewSubTaskClient(cfg),
		Task:                NewTaskClient(cfg),
		TaskTemplate:        NewTaskTemplateClient(cfg),
		TaskTemplateSubTask: NewTaskTemplateSubTaskClient(cfg),
		Ward:                NewWardClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bed.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Bed, c.Patient, c.Room, c.SubTask, c.Task, c.TaskTemplate,
		c.TaskTemplateSubTask, c.Ward,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Bed, c.Patient, c.Room, c.SubTask, c.Task, c.TaskTemplate,
		c.TaskTemplateSubTask, c.Ward,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BedMutation:
		return c.Bed.mutate(ctx, m)
	case *PatientMutation:
		return c.Patient.mutate(ctx, m)
	case *RoomMutation:
		return c.Room.mutate(ctx, m)
	case *SubTaskMutation:
		return c.SubTask.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *TaskTemplateMutation:
		return c.TaskTemplate.mutate(ctx, m)
	case *TaskTemplateSubTaskMutation:
		return c.TaskTemplateSubTask.mutate(ctx, m)
	case *WardMutation:
		return c.Ward.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BedClient is a client for the Bed schema.
type BedClient struct {
	config
}

// NewBedClient returns a client for the Bed from the given config.
func NewBedClient(c config) *BedClient {
	return &BedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bed.Hooks(f(g(h())))`.
func (c *BedClient) Use(hooks ...Hook) {
	c.hooks.Bed = append(c.hooks.Bed, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bed.Intercept(f(g(h())))`.
func (c *BedClient) Intercept(interceptors ...Interceptor) {
	c.inters.Bed = append(c.inters.Bed, interceptors...)
}

// Create returns a builder for creating a Bed entity.
func (c *BedClient) Create() *BedCreate {
	mutation := newBedMutation(c.config, OpCreate)
	return &BedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bed entities.
func (c *BedClient) CreateBulk(builders ...*BedCreate) *BedCreateBulk {
	return &BedCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BedClient) MapCreateBulk(slice any, setFunc func(*BedCreate, int)) *BedCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BedCreateBulk{err: fmt.Errorf("calling to BedClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BedCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bed.
func (c *BedClient) Update() *BedUpdate {
	mutation := newBedMutation(c.config, OpUpdate)
	return &BedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BedClient) UpdateOne(b *Bed) *BedUpdateOne {
	mutation := newBedMutation(c.config, OpUpdateOne, withBed(b))
	return &BedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BedClient) UpdateOneID(id uuid.UUID) *BedUpdateOne {
	mutation := newBedMutation(c.config, OpUpdateOne, withBedID(id))
	return &BedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bed.
func (c *BedClient) Delete() *BedDelete {
	mutation := newBedMutation(c.config, OpDelete)
	return &BedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BedClient) DeleteOne(b *Bed) *BedDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BedClient) DeleteOneID(id uuid.UUID) *BedDeleteOne {
	builder := c.Delete().Where(bed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BedDeleteOne{builder}
}

// Query returns a query builder for Bed.
func (c *BedClient) Query() *BedQuery {
	return &BedQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBed},
		inters: c.Interceptors(),
	}
}

// Get returns a Bed entity by its id.
func (c *BedClient) Get(ctx context.Context, id uuid.UUID) (*Bed, error) {
	return c.Query().Where(bed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BedClient) GetX(ctx context.Context, id uuid.UUID) *Bed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoom queries the room edge of a Bed.
func (c *BedClient) QueryRoom(b *Bed) *RoomQuery {
	query := (&RoomClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bed.Table, bed.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bed.RoomTable, bed.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Bed.
func (c *BedClient) QueryPatient(b *Bed) *PatientQuery {
	query := (&PatientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bed.Table, bed.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, bed.PatientTable, bed.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BedClient) Hooks() []Hook {
	return c.hooks.Bed
}

// Interceptors returns the client interceptors.
func (c *BedClient) Interceptors() []Interceptor {
	return c.inters.Bed
}

func (c *BedClient) mutate(ctx context.Context, m *BedMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BedCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BedUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BedDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Bed mutation op: %q", m.Op())
	}
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `patient.Intercept(f(g(h())))`.
func (c *PatientClient) Intercept(interceptors ...Interceptor) {
	c.inters.Patient = append(c.inters.Patient, interceptors...)
}

// Create returns a builder for creating a Patient entity.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Patient entities.
func (c *PatientClient) CreateBulk(builders ...*PatientCreate) *PatientCreateBulk {
	return &PatientCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PatientClient) MapCreateBulk(slice any, setFunc func(*PatientCreate, int)) *PatientCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PatientCreateBulk{err: fmt.Errorf("calling to PatientClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PatientCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PatientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id uuid.UUID) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PatientClient) DeleteOneID(id uuid.UUID) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Query returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePatient},
		inters: c.Interceptors(),
	}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id uuid.UUID) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id uuid.UUID) *Patient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBed queries the bed edge of a Patient.
func (c *PatientClient) QueryBed(pa *Patient) *BedQuery {
	query := (&BedClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(bed.Table, bed.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, patient.BedTable, patient.BedColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTasks queries the tasks edge of a Patient.
func (c *PatientClient) QueryTasks(pa *Patient) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.TasksTable, patient.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// Interceptors returns the client interceptors.
func (c *PatientClient) Interceptors() []Interceptor {
	return c.inters.Patient
}

func (c *PatientClient) mutate(ctx context.Context, m *PatientMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PatientCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PatientDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Patient mutation op: %q", m.Op())
	}
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `room.Intercept(f(g(h())))`.
func (c *RoomClient) Intercept(interceptors ...Interceptor) {
	c.inters.Room = append(c.inters.Room, interceptors...)
}

// Create returns a builder for creating a Room entity.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Room entities.
func (c *RoomClient) CreateBulk(builders ...*RoomCreate) *RoomCreateBulk {
	return &RoomCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoomClient) MapCreateBulk(slice any, setFunc func(*RoomCreate, int)) *RoomCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoomCreateBulk{err: fmt.Errorf("calling to RoomClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoomCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoomCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id uuid.UUID) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoomClient) DeleteOneID(id uuid.UUID) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Query returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoom},
		inters: c.Interceptors(),
	}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id uuid.UUID) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id uuid.UUID) *Room {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBeds queries the beds edge of a Room.
func (c *RoomClient) QueryBeds(r *Room) *BedQuery {
	query := (&BedClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(bed.Table, bed.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.BedsTable, room.BedsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWard queries the ward edge of a Room.
func (c *RoomClient) QueryWard(r *Room) *WardQuery {
	query := (&WardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(ward.Table, ward.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.WardTable, room.WardColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// Interceptors returns the client interceptors.
func (c *RoomClient) Interceptors() []Interceptor {
	return c.inters.Room
}

func (c *RoomClient) mutate(ctx context.Context, m *RoomMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoomCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoomDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Room mutation op: %q", m.Op())
	}
}

// SubTaskClient is a client for the SubTask schema.
type SubTaskClient struct {
	config
}

// NewSubTaskClient returns a client for the SubTask from the given config.
func NewSubTaskClient(c config) *SubTaskClient {
	return &SubTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subtask.Hooks(f(g(h())))`.
func (c *SubTaskClient) Use(hooks ...Hook) {
	c.hooks.SubTask = append(c.hooks.SubTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subtask.Intercept(f(g(h())))`.
func (c *SubTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubTask = append(c.inters.SubTask, interceptors...)
}

// Create returns a builder for creating a SubTask entity.
func (c *SubTaskClient) Create() *SubTaskCreate {
	mutation := newSubTaskMutation(c.config, OpCreate)
	return &SubTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubTask entities.
func (c *SubTaskClient) CreateBulk(builders ...*SubTaskCreate) *SubTaskCreateBulk {
	return &SubTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubTaskClient) MapCreateBulk(slice any, setFunc func(*SubTaskCreate, int)) *SubTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubTaskCreateBulk{err: fmt.Errorf("calling to SubTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubTask.
func (c *SubTaskClient) Update() *SubTaskUpdate {
	mutation := newSubTaskMutation(c.config, OpUpdate)
	return &SubTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubTaskClient) UpdateOne(st *SubTask) *SubTaskUpdateOne {
	mutation := newSubTaskMutation(c.config, OpUpdateOne, withSubTask(st))
	return &SubTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubTaskClient) UpdateOneID(id uuid.UUID) *SubTaskUpdateOne {
	mutation := newSubTaskMutation(c.config, OpUpdateOne, withSubTaskID(id))
	return &SubTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubTask.
func (c *SubTaskClient) Delete() *SubTaskDelete {
	mutation := newSubTaskMutation(c.config, OpDelete)
	return &SubTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubTaskClient) DeleteOne(st *SubTask) *SubTaskDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubTaskClient) DeleteOneID(id uuid.UUID) *SubTaskDeleteOne {
	builder := c.Delete().Where(subtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubTaskDeleteOne{builder}
}

// Query returns a query builder for SubTask.
func (c *SubTaskClient) Query() *SubTaskQuery {
	return &SubTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubTask},
		inters: c.Interceptors(),
	}
}

// Get returns a SubTask entity by its id.
func (c *SubTaskClient) Get(ctx context.Context, id uuid.UUID) (*SubTask, error) {
	return c.Query().Where(subtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubTaskClient) GetX(ctx context.Context, id uuid.UUID) *SubTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a SubTask.
func (c *SubTaskClient) QueryTask(st *SubTask) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subtask.Table, subtask.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subtask.TaskTable, subtask.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubTaskClient) Hooks() []Hook {
	return c.hooks.SubTask
}

// Interceptors returns the client interceptors.
func (c *SubTaskClient) Interceptors() []Interceptor {
	return c.inters.SubTask
}

func (c *SubTaskClient) mutate(ctx context.Context, m *SubTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubTask mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskClient) MapCreateBulk(slice any, setFunc func(*TaskCreate, int)) *TaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskCreateBulk{err: fmt.Errorf("calling to TaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id uuid.UUID) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id uuid.UUID) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id uuid.UUID) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id uuid.UUID) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPatient queries the patient edge of a Task.
func (c *TaskClient) QueryPatient(t *Task) *PatientQuery {
	query := (&PatientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.PatientTable, task.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubtasks queries the subtasks edge of a Task.
func (c *TaskClient) QuerySubtasks(t *Task) *SubTaskQuery {
	query := (&SubTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(subtask.Table, subtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.SubtasksTable, task.SubtasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// TaskTemplateClient is a client for the TaskTemplate schema.
type TaskTemplateClient struct {
	config
}

// NewTaskTemplateClient returns a client for the TaskTemplate from the given config.
func NewTaskTemplateClient(c config) *TaskTemplateClient {
	return &TaskTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tasktemplate.Hooks(f(g(h())))`.
func (c *TaskTemplateClient) Use(hooks ...Hook) {
	c.hooks.TaskTemplate = append(c.hooks.TaskTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tasktemplate.Intercept(f(g(h())))`.
func (c *TaskTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.TaskTemplate = append(c.inters.TaskTemplate, interceptors...)
}

// Create returns a builder for creating a TaskTemplate entity.
func (c *TaskTemplateClient) Create() *TaskTemplateCreate {
	mutation := newTaskTemplateMutation(c.config, OpCreate)
	return &TaskTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskTemplate entities.
func (c *TaskTemplateClient) CreateBulk(builders ...*TaskTemplateCreate) *TaskTemplateCreateBulk {
	return &TaskTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskTemplateClient) MapCreateBulk(slice any, setFunc func(*TaskTemplateCreate, int)) *TaskTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskTemplateCreateBulk{err: fmt.Errorf("calling to TaskTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskTemplate.
func (c *TaskTemplateClient) Update() *TaskTemplateUpdate {
	mutation := newTaskTemplateMutation(c.config, OpUpdate)
	return &TaskTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskTemplateClient) UpdateOne(tt *TaskTemplate) *TaskTemplateUpdateOne {
	mutation := newTaskTemplateMutation(c.config, OpUpdateOne, withTaskTemplate(tt))
	return &TaskTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskTemplateClient) UpdateOneID(id uuid.UUID) *TaskTemplateUpdateOne {
	mutation := newTaskTemplateMutation(c.config, OpUpdateOne, withTaskTemplateID(id))
	return &TaskTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskTemplate.
func (c *TaskTemplateClient) Delete() *TaskTemplateDelete {
	mutation := newTaskTemplateMutation(c.config, OpDelete)
	return &TaskTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskTemplateClient) DeleteOne(tt *TaskTemplate) *TaskTemplateDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskTemplateClient) DeleteOneID(id uuid.UUID) *TaskTemplateDeleteOne {
	builder := c.Delete().Where(tasktemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskTemplateDeleteOne{builder}
}

// Query returns a query builder for TaskTemplate.
func (c *TaskTemplateClient) Query() *TaskTemplateQuery {
	return &TaskTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTaskTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a TaskTemplate entity by its id.
func (c *TaskTemplateClient) Get(ctx context.Context, id uuid.UUID) (*TaskTemplate, error) {
	return c.Query().Where(tasktemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskTemplateClient) GetX(ctx context.Context, id uuid.UUID) *TaskTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWard queries the ward edge of a TaskTemplate.
func (c *TaskTemplateClient) QueryWard(tt *TaskTemplate) *WardQuery {
	query := (&WardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasktemplate.Table, tasktemplate.FieldID, id),
			sqlgraph.To(ward.Table, ward.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tasktemplate.WardTable, tasktemplate.WardColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubtasks queries the subtasks edge of a TaskTemplate.
func (c *TaskTemplateClient) QuerySubtasks(tt *TaskTemplate) *TaskTemplateSubTaskQuery {
	query := (&TaskTemplateSubTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasktemplate.Table, tasktemplate.FieldID, id),
			sqlgraph.To(tasktemplatesubtask.Table, tasktemplatesubtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tasktemplate.SubtasksTable, tasktemplate.SubtasksColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskTemplateClient) Hooks() []Hook {
	return c.hooks.TaskTemplate
}

// Interceptors returns the client interceptors.
func (c *TaskTemplateClient) Interceptors() []Interceptor {
	return c.inters.TaskTemplate
}

func (c *TaskTemplateClient) mutate(ctx context.Context, m *TaskTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TaskTemplate mutation op: %q", m.Op())
	}
}

// TaskTemplateSubTaskClient is a client for the TaskTemplateSubTask schema.
type TaskTemplateSubTaskClient struct {
	config
}

// NewTaskTemplateSubTaskClient returns a client for the TaskTemplateSubTask from the given config.
func NewTaskTemplateSubTaskClient(c config) *TaskTemplateSubTaskClient {
	return &TaskTemplateSubTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tasktemplatesubtask.Hooks(f(g(h())))`.
func (c *TaskTemplateSubTaskClient) Use(hooks ...Hook) {
	c.hooks.TaskTemplateSubTask = append(c.hooks.TaskTemplateSubTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tasktemplatesubtask.Intercept(f(g(h())))`.
func (c *TaskTemplateSubTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.TaskTemplateSubTask = append(c.inters.TaskTemplateSubTask, interceptors...)
}

// Create returns a builder for creating a TaskTemplateSubTask entity.
func (c *TaskTemplateSubTaskClient) Create() *TaskTemplateSubTaskCreate {
	mutation := newTaskTemplateSubTaskMutation(c.config, OpCreate)
	return &TaskTemplateSubTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskTemplateSubTask entities.
func (c *TaskTemplateSubTaskClient) CreateBulk(builders ...*TaskTemplateSubTaskCreate) *TaskTemplateSubTaskCreateBulk {
	return &TaskTemplateSubTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskTemplateSubTaskClient) MapCreateBulk(slice any, setFunc func(*TaskTemplateSubTaskCreate, int)) *TaskTemplateSubTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskTemplateSubTaskCreateBulk{err: fmt.Errorf("calling to TaskTemplateSubTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskTemplateSubTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskTemplateSubTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskTemplateSubTask.
func (c *TaskTemplateSubTaskClient) Update() *TaskTemplateSubTaskUpdate {
	mutation := newTaskTemplateSubTaskMutation(c.config, OpUpdate)
	return &TaskTemplateSubTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskTemplateSubTaskClient) UpdateOne(ttst *TaskTemplateSubTask) *TaskTemplateSubTaskUpdateOne {
	mutation := newTaskTemplateSubTaskMutation(c.config, OpUpdateOne, withTaskTemplateSubTask(ttst))
	return &TaskTemplateSubTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskTemplateSubTaskClient) UpdateOneID(id uuid.UUID) *TaskTemplateSubTaskUpdateOne {
	mutation := newTaskTemplateSubTaskMutation(c.config, OpUpdateOne, withTaskTemplateSubTaskID(id))
	return &TaskTemplateSubTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskTemplateSubTask.
func (c *TaskTemplateSubTaskClient) Delete() *TaskTemplateSubTaskDelete {
	mutation := newTaskTemplateSubTaskMutation(c.config, OpDelete)
	return &TaskTemplateSubTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskTemplateSubTaskClient) DeleteOne(ttst *TaskTemplateSubTask) *TaskTemplateSubTaskDeleteOne {
	return c.DeleteOneID(ttst.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskTemplateSubTaskClient) DeleteOneID(id uuid.UUID) *TaskTemplateSubTaskDeleteOne {
	builder := c.Delete().Where(tasktemplatesubtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskTemplateSubTaskDeleteOne{builder}
}

// Query returns a query builder for TaskTemplateSubTask.
func (c *TaskTemplateSubTaskClient) Query() *TaskTemplateSubTaskQuery {
	return &TaskTemplateSubTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTaskTemplateSubTask},
		inters: c.Interceptors(),
	}
}

// Get returns a TaskTemplateSubTask entity by its id.
func (c *TaskTemplateSubTaskClient) Get(ctx context.Context, id uuid.UUID) (*TaskTemplateSubTask, error) {
	return c.Query().Where(tasktemplatesubtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskTemplateSubTaskClient) GetX(ctx context.Context, id uuid.UUID) *TaskTemplateSubTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTaskTemplate queries the task_template edge of a TaskTemplateSubTask.
func (c *TaskTemplateSubTaskClient) QueryTaskTemplate(ttst *TaskTemplateSubTask) *TaskTemplateQuery {
	query := (&TaskTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ttst.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasktemplatesubtask.Table, tasktemplatesubtask.FieldID, id),
			sqlgraph.To(tasktemplate.Table, tasktemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tasktemplatesubtask.TaskTemplateTable, tasktemplatesubtask.TaskTemplateColumn),
		)
		fromV = sqlgraph.Neighbors(ttst.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskTemplateSubTaskClient) Hooks() []Hook {
	return c.hooks.TaskTemplateSubTask
}

// Interceptors returns the client interceptors.
func (c *TaskTemplateSubTaskClient) Interceptors() []Interceptor {
	return c.inters.TaskTemplateSubTask
}

func (c *TaskTemplateSubTaskClient) mutate(ctx context.Context, m *TaskTemplateSubTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskTemplateSubTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskTemplateSubTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskTemplateSubTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskTemplateSubTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TaskTemplateSubTask mutation op: %q", m.Op())
	}
}

// WardClient is a client for the Ward schema.
type WardClient struct {
	config
}

// NewWardClient returns a client for the Ward from the given config.
func NewWardClient(c config) *WardClient {
	return &WardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ward.Hooks(f(g(h())))`.
func (c *WardClient) Use(hooks ...Hook) {
	c.hooks.Ward = append(c.hooks.Ward, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ward.Intercept(f(g(h())))`.
func (c *WardClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ward = append(c.inters.Ward, interceptors...)
}

// Create returns a builder for creating a Ward entity.
func (c *WardClient) Create() *WardCreate {
	mutation := newWardMutation(c.config, OpCreate)
	return &WardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ward entities.
func (c *WardClient) CreateBulk(builders ...*WardCreate) *WardCreateBulk {
	return &WardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WardClient) MapCreateBulk(slice any, setFunc func(*WardCreate, int)) *WardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WardCreateBulk{err: fmt.Errorf("calling to WardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ward.
func (c *WardClient) Update() *WardUpdate {
	mutation := newWardMutation(c.config, OpUpdate)
	return &WardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WardClient) UpdateOne(w *Ward) *WardUpdateOne {
	mutation := newWardMutation(c.config, OpUpdateOne, withWard(w))
	return &WardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WardClient) UpdateOneID(id uuid.UUID) *WardUpdateOne {
	mutation := newWardMutation(c.config, OpUpdateOne, withWardID(id))
	return &WardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ward.
func (c *WardClient) Delete() *WardDelete {
	mutation := newWardMutation(c.config, OpDelete)
	return &WardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WardClient) DeleteOne(w *Ward) *WardDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WardClient) DeleteOneID(id uuid.UUID) *WardDeleteOne {
	builder := c.Delete().Where(ward.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WardDeleteOne{builder}
}

// Query returns a query builder for Ward.
func (c *WardClient) Query() *WardQuery {
	return &WardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWard},
		inters: c.Interceptors(),
	}
}

// Get returns a Ward entity by its id.
func (c *WardClient) Get(ctx context.Context, id uuid.UUID) (*Ward, error) {
	return c.Query().Where(ward.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WardClient) GetX(ctx context.Context, id uuid.UUID) *Ward {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRooms queries the rooms edge of a Ward.
func (c *WardClient) QueryRooms(w *Ward) *RoomQuery {
	query := (&RoomClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ward.Table, ward.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ward.RoomsTable, ward.RoomsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTaskTemplates queries the task_templates edge of a Ward.
func (c *WardClient) QueryTaskTemplates(w *Ward) *TaskTemplateQuery {
	query := (&TaskTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ward.Table, ward.FieldID, id),
			sqlgraph.To(tasktemplate.Table, tasktemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ward.TaskTemplatesTable, ward.TaskTemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WardClient) Hooks() []Hook {
	return c.hooks.Ward
}

// Interceptors returns the client interceptors.
func (c *WardClient) Interceptors() []Interceptor {
	return c.inters.Ward
}

func (c *WardClient) mutate(ctx context.Context, m *WardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ward mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Bed, Patient, Room, SubTask, Task, TaskTemplate, TaskTemplateSubTask,
		Ward []ent.Hook
	}
	inters struct {
		Bed, Patient, Room, SubTask, Task, TaskTemplate, TaskTemplateSubTask,
		Ward []ent.Interceptor
	}
)
