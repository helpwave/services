// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"task-svc/ent/bed"
	"task-svc/ent/patient"
	"task-svc/ent/room"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BedCreate is the builder for creating a Bed entity.
type BedCreate struct {
	config
	mutation *BedMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BedCreate) SetName(s string) *BedCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bc *BedCreate) SetNillableName(s *string) *BedCreate {
	if s != nil {
		bc.SetName(*s)
	}
	return bc
}

// SetOrganizationID sets the "organization_id" field.
func (bc *BedCreate) SetOrganizationID(u uuid.UUID) *BedCreate {
	bc.mutation.SetOrganizationID(u)
	return bc
}

// SetID sets the "id" field.
func (bc *BedCreate) SetID(u uuid.UUID) *BedCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BedCreate) SetNillableID(u *uuid.UUID) *BedCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (bc *BedCreate) SetRoomID(id uuid.UUID) *BedCreate {
	bc.mutation.SetRoomID(id)
	return bc
}

// SetRoom sets the "room" edge to the Room entity.
func (bc *BedCreate) SetRoom(r *Room) *BedCreate {
	return bc.SetRoomID(r.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (bc *BedCreate) SetPatientID(id uuid.UUID) *BedCreate {
	bc.mutation.SetPatientID(id)
	return bc
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (bc *BedCreate) SetNillablePatientID(id *uuid.UUID) *BedCreate {
	if id != nil {
		bc = bc.SetPatientID(*id)
	}
	return bc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (bc *BedCreate) SetPatient(p *Patient) *BedCreate {
	return bc.SetPatientID(p.ID)
}

// Mutation returns the BedMutation object of the builder.
func (bc *BedCreate) Mutation() *BedMutation {
	return bc.mutation
}

// Save creates the Bed in the database.
func (bc *BedCreate) Save(ctx context.Context) (*Bed, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BedCreate) SaveX(ctx context.Context) *Bed {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BedCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BedCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BedCreate) defaults() {
	if _, ok := bc.mutation.Name(); !ok {
		v := bed.DefaultName
		bc.mutation.SetName(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bed.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BedCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Bed.name"`)}
	}
	if _, ok := bc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Bed.organization_id"`)}
	}
	if _, ok := bc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required edge "Bed.room"`)}
	}
	return nil
}

func (bc *BedCreate) sqlSave(ctx context.Context) (*Bed, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BedCreate) createSpec() (*Bed, *sqlgraph.CreateSpec) {
	var (
		_node = &Bed{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bed.Table, sqlgraph.NewFieldSpec(bed.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(bed.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.OrganizationID(); ok {
		_spec.SetField(bed.FieldOrganizationID, field.TypeUUID, value)
		_node.OrganizationID = value
	}
	if nodes := bc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bed.RoomTable,
			Columns: []string{bed.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.room_beds = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bed.PatientTable,
			Columns: []string{bed.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BedCreateBulk is the builder for creating many Bed entities in bulk.
type BedCreateBulk struct {
	config
	err      error
	builders []*BedCreate
}

// Save creates the Bed entities in the database.
func (bcb *BedCreateBulk) Save(ctx context.Context) ([]*Bed, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bed, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BedCreateBulk) SaveX(ctx context.Context) []*Bed {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BedCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BedCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
