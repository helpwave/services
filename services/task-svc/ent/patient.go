// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"task-svc/ent/bed"
	"task-svc/ent/patient"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// HumanReadableIdentifier holds the value of the "human_readable_identifier" field.
	HumanReadableIdentifier string `json:"human_readable_identifier,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// IsDischarged holds the value of the "is_discharged" field.
	IsDischarged int `json:"is_discharged,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organization_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges        PatientEdges `json:"edges"`
	bed_patient  *uuid.UUID
	selectValues sql.SelectValues
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// Bed holds the value of the bed edge.
	Bed *Bed `json:"bed,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BedOrErr returns the Bed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) BedOrErr() (*Bed, error) {
	if e.loadedTypes[0] {
		if e.Bed == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: bed.Label}
		}
		return e.Bed, nil
	}
	return nil, &NotLoadedError{edge: "bed"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e PatientEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case patient.FieldIsDischarged:
			values[i] = new(sql.NullInt64)
		case patient.FieldHumanReadableIdentifier, patient.FieldNotes:
			values[i] = new(sql.NullString)
		case patient.FieldCreatedAt, patient.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case patient.FieldID, patient.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		case patient.ForeignKeys[0]: // bed_patient
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case patient.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case patient.FieldHumanReadableIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field human_readable_identifier", values[i])
			} else if value.Valid {
				pa.HumanReadableIdentifier = value.String
			}
		case patient.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				pa.Notes = value.String
			}
		case patient.FieldIsDischarged:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_discharged", values[i])
			} else if value.Valid {
				pa.IsDischarged = int(value.Int64)
			}
		case patient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case patient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case patient.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				pa.OrganizationID = *value
			}
		case patient.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field bed_patient", values[i])
			} else if value.Valid {
				pa.bed_patient = new(uuid.UUID)
				*pa.bed_patient = *value.S.(*uuid.UUID)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Patient.
// This includes values selected through modifiers, order, etc.
func (pa *Patient) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryBed queries the "bed" edge of the Patient entity.
func (pa *Patient) QueryBed() *BedQuery {
	return NewPatientClient(pa.config).QueryBed(pa)
}

// QueryTasks queries the "tasks" edge of the Patient entity.
func (pa *Patient) QueryTasks() *TaskQuery {
	return NewPatientClient(pa.config).QueryTasks(pa)
}

// Update returns a builder for updating this Patient.
// Note that you need to call Patient.Unwrap() before calling this method if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return NewPatientClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Patient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patient is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("human_readable_identifier=")
	builder.WriteString(pa.HumanReadableIdentifier)
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(pa.Notes)
	builder.WriteString(", ")
	builder.WriteString("is_discharged=")
	builder.WriteString(fmt.Sprintf("%v", pa.IsDischarged))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.OrganizationID))
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient
