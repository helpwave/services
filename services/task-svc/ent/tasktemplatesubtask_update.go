// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"task-svc/ent/predicate"
	"task-svc/ent/tasktemplate"
	"task-svc/ent/tasktemplatesubtask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TaskTemplateSubTaskUpdate is the builder for updating TaskTemplateSubTask entities.
type TaskTemplateSubTaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskTemplateSubTaskMutation
}

// Where appends a list predicates to the TaskTemplateSubTaskUpdate builder.
func (ttstu *TaskTemplateSubTaskUpdate) Where(ps ...predicate.TaskTemplateSubTask) *TaskTemplateSubTaskUpdate {
	ttstu.mutation.Where(ps...)
	return ttstu
}

// SetName sets the "name" field.
func (ttstu *TaskTemplateSubTaskUpdate) SetName(s string) *TaskTemplateSubTaskUpdate {
	ttstu.mutation.SetName(s)
	return ttstu
}

// SetTaskTemplateID sets the "task_template" edge to the TaskTemplate entity by ID.
func (ttstu *TaskTemplateSubTaskUpdate) SetTaskTemplateID(id uuid.UUID) *TaskTemplateSubTaskUpdate {
	ttstu.mutation.SetTaskTemplateID(id)
	return ttstu
}

// SetTaskTemplate sets the "task_template" edge to the TaskTemplate entity.
func (ttstu *TaskTemplateSubTaskUpdate) SetTaskTemplate(t *TaskTemplate) *TaskTemplateSubTaskUpdate {
	return ttstu.SetTaskTemplateID(t.ID)
}

// Mutation returns the TaskTemplateSubTaskMutation object of the builder.
func (ttstu *TaskTemplateSubTaskUpdate) Mutation() *TaskTemplateSubTaskMutation {
	return ttstu.mutation
}

// ClearTaskTemplate clears the "task_template" edge to the TaskTemplate entity.
func (ttstu *TaskTemplateSubTaskUpdate) ClearTaskTemplate() *TaskTemplateSubTaskUpdate {
	ttstu.mutation.ClearTaskTemplate()
	return ttstu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttstu *TaskTemplateSubTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttstu.sqlSave, ttstu.mutation, ttstu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttstu *TaskTemplateSubTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := ttstu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttstu *TaskTemplateSubTaskUpdate) Exec(ctx context.Context) error {
	_, err := ttstu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttstu *TaskTemplateSubTaskUpdate) ExecX(ctx context.Context) {
	if err := ttstu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttstu *TaskTemplateSubTaskUpdate) check() error {
	if _, ok := ttstu.mutation.TaskTemplateID(); ttstu.mutation.TaskTemplateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskTemplateSubTask.task_template"`)
	}
	return nil
}

func (ttstu *TaskTemplateSubTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttstu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tasktemplatesubtask.Table, tasktemplatesubtask.Columns, sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID))
	if ps := ttstu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttstu.mutation.Name(); ok {
		_spec.SetField(tasktemplatesubtask.FieldName, field.TypeString, value)
	}
	if ttstu.mutation.TaskTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktemplatesubtask.TaskTemplateTable,
			Columns: []string{tasktemplatesubtask.TaskTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttstu.mutation.TaskTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktemplatesubtask.TaskTemplateTable,
			Columns: []string{tasktemplatesubtask.TaskTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttstu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktemplatesubtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttstu.mutation.done = true
	return n, nil
}

// TaskTemplateSubTaskUpdateOne is the builder for updating a single TaskTemplateSubTask entity.
type TaskTemplateSubTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskTemplateSubTaskMutation
}

// SetName sets the "name" field.
func (ttstuo *TaskTemplateSubTaskUpdateOne) SetName(s string) *TaskTemplateSubTaskUpdateOne {
	ttstuo.mutation.SetName(s)
	return ttstuo
}

// SetTaskTemplateID sets the "task_template" edge to the TaskTemplate entity by ID.
func (ttstuo *TaskTemplateSubTaskUpdateOne) SetTaskTemplateID(id uuid.UUID) *TaskTemplateSubTaskUpdateOne {
	ttstuo.mutation.SetTaskTemplateID(id)
	return ttstuo
}

// SetTaskTemplate sets the "task_template" edge to the TaskTemplate entity.
func (ttstuo *TaskTemplateSubTaskUpdateOne) SetTaskTemplate(t *TaskTemplate) *TaskTemplateSubTaskUpdateOne {
	return ttstuo.SetTaskTemplateID(t.ID)
}

// Mutation returns the TaskTemplateSubTaskMutation object of the builder.
func (ttstuo *TaskTemplateSubTaskUpdateOne) Mutation() *TaskTemplateSubTaskMutation {
	return ttstuo.mutation
}

// ClearTaskTemplate clears the "task_template" edge to the TaskTemplate entity.
func (ttstuo *TaskTemplateSubTaskUpdateOne) ClearTaskTemplate() *TaskTemplateSubTaskUpdateOne {
	ttstuo.mutation.ClearTaskTemplate()
	return ttstuo
}

// Where appends a list predicates to the TaskTemplateSubTaskUpdate builder.
func (ttstuo *TaskTemplateSubTaskUpdateOne) Where(ps ...predicate.TaskTemplateSubTask) *TaskTemplateSubTaskUpdateOne {
	ttstuo.mutation.Where(ps...)
	return ttstuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttstuo *TaskTemplateSubTaskUpdateOne) Select(field string, fields ...string) *TaskTemplateSubTaskUpdateOne {
	ttstuo.fields = append([]string{field}, fields...)
	return ttstuo
}

// Save executes the query and returns the updated TaskTemplateSubTask entity.
func (ttstuo *TaskTemplateSubTaskUpdateOne) Save(ctx context.Context) (*TaskTemplateSubTask, error) {
	return withHooks(ctx, ttstuo.sqlSave, ttstuo.mutation, ttstuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttstuo *TaskTemplateSubTaskUpdateOne) SaveX(ctx context.Context) *TaskTemplateSubTask {
	node, err := ttstuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttstuo *TaskTemplateSubTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := ttstuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttstuo *TaskTemplateSubTaskUpdateOne) ExecX(ctx context.Context) {
	if err := ttstuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttstuo *TaskTemplateSubTaskUpdateOne) check() error {
	if _, ok := ttstuo.mutation.TaskTemplateID(); ttstuo.mutation.TaskTemplateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskTemplateSubTask.task_template"`)
	}
	return nil
}

func (ttstuo *TaskTemplateSubTaskUpdateOne) sqlSave(ctx context.Context) (_node *TaskTemplateSubTask, err error) {
	if err := ttstuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tasktemplatesubtask.Table, tasktemplatesubtask.Columns, sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID))
	id, ok := ttstuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskTemplateSubTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttstuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasktemplatesubtask.FieldID)
		for _, f := range fields {
			if !tasktemplatesubtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tasktemplatesubtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttstuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttstuo.mutation.Name(); ok {
		_spec.SetField(tasktemplatesubtask.FieldName, field.TypeString, value)
	}
	if ttstuo.mutation.TaskTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktemplatesubtask.TaskTemplateTable,
			Columns: []string{tasktemplatesubtask.TaskTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttstuo.mutation.TaskTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktemplatesubtask.TaskTemplateTable,
			Columns: []string{tasktemplatesubtask.TaskTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskTemplateSubTask{config: ttstuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttstuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktemplatesubtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttstuo.mutation.done = true
	return _node, nil
}
