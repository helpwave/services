// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"task-svc/ent/predicate"
	"task-svc/ent/tasktemplate"
	"task-svc/ent/tasktemplatesubtask"
	"task-svc/ent/ward"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TaskTemplateQuery is the builder for querying TaskTemplate entities.
type TaskTemplateQuery struct {
	config
	ctx          *QueryContext
	order        []tasktemplate.OrderOption
	inters       []Interceptor
	predicates   []predicate.TaskTemplate
	withWard     *WardQuery
	withSubtasks *TaskTemplateSubTaskQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TaskTemplateQuery builder.
func (ttq *TaskTemplateQuery) Where(ps ...predicate.TaskTemplate) *TaskTemplateQuery {
	ttq.predicates = append(ttq.predicates, ps...)
	return ttq
}

// Limit the number of records to be returned by this query.
func (ttq *TaskTemplateQuery) Limit(limit int) *TaskTemplateQuery {
	ttq.ctx.Limit = &limit
	return ttq
}

// Offset to start from.
func (ttq *TaskTemplateQuery) Offset(offset int) *TaskTemplateQuery {
	ttq.ctx.Offset = &offset
	return ttq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ttq *TaskTemplateQuery) Unique(unique bool) *TaskTemplateQuery {
	ttq.ctx.Unique = &unique
	return ttq
}

// Order specifies how the records should be ordered.
func (ttq *TaskTemplateQuery) Order(o ...tasktemplate.OrderOption) *TaskTemplateQuery {
	ttq.order = append(ttq.order, o...)
	return ttq
}

// QueryWard chains the current query on the "ward" edge.
func (ttq *TaskTemplateQuery) QueryWard() *WardQuery {
	query := (&WardClient{config: ttq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tasktemplate.Table, tasktemplate.FieldID, selector),
			sqlgraph.To(ward.Table, ward.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tasktemplate.WardTable, tasktemplate.WardColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubtasks chains the current query on the "subtasks" edge.
func (ttq *TaskTemplateQuery) QuerySubtasks() *TaskTemplateSubTaskQuery {
	query := (&TaskTemplateSubTaskClient{config: ttq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tasktemplate.Table, tasktemplate.FieldID, selector),
			sqlgraph.To(tasktemplatesubtask.Table, tasktemplatesubtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tasktemplate.SubtasksTable, tasktemplate.SubtasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TaskTemplate entity from the query.
// Returns a *NotFoundError when no TaskTemplate was found.
func (ttq *TaskTemplateQuery) First(ctx context.Context) (*TaskTemplate, error) {
	nodes, err := ttq.Limit(1).All(setContextOp(ctx, ttq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tasktemplate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ttq *TaskTemplateQuery) FirstX(ctx context.Context) *TaskTemplate {
	node, err := ttq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TaskTemplate ID from the query.
// Returns a *NotFoundError when no TaskTemplate ID was found.
func (ttq *TaskTemplateQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ttq.Limit(1).IDs(setContextOp(ctx, ttq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tasktemplate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ttq *TaskTemplateQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ttq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TaskTemplate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TaskTemplate entity is found.
// Returns a *NotFoundError when no TaskTemplate entities are found.
func (ttq *TaskTemplateQuery) Only(ctx context.Context) (*TaskTemplate, error) {
	nodes, err := ttq.Limit(2).All(setContextOp(ctx, ttq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tasktemplate.Label}
	default:
		return nil, &NotSingularError{tasktemplate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ttq *TaskTemplateQuery) OnlyX(ctx context.Context) *TaskTemplate {
	node, err := ttq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TaskTemplate ID in the query.
// Returns a *NotSingularError when more than one TaskTemplate ID is found.
// Returns a *NotFoundError when no entities are found.
func (ttq *TaskTemplateQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ttq.Limit(2).IDs(setContextOp(ctx, ttq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tasktemplate.Label}
	default:
		err = &NotSingularError{tasktemplate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ttq *TaskTemplateQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ttq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TaskTemplates.
func (ttq *TaskTemplateQuery) All(ctx context.Context) ([]*TaskTemplate, error) {
	ctx = setContextOp(ctx, ttq.ctx, "All")
	if err := ttq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TaskTemplate, *TaskTemplateQuery]()
	return withInterceptors[[]*TaskTemplate](ctx, ttq, qr, ttq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ttq *TaskTemplateQuery) AllX(ctx context.Context) []*TaskTemplate {
	nodes, err := ttq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TaskTemplate IDs.
func (ttq *TaskTemplateQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ttq.ctx.Unique == nil && ttq.path != nil {
		ttq.Unique(true)
	}
	ctx = setContextOp(ctx, ttq.ctx, "IDs")
	if err = ttq.Select(tasktemplate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ttq *TaskTemplateQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ttq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ttq *TaskTemplateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ttq.ctx, "Count")
	if err := ttq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ttq, querierCount[*TaskTemplateQuery](), ttq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ttq *TaskTemplateQuery) CountX(ctx context.Context) int {
	count, err := ttq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ttq *TaskTemplateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ttq.ctx, "Exist")
	switch _, err := ttq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ttq *TaskTemplateQuery) ExistX(ctx context.Context) bool {
	exist, err := ttq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TaskTemplateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ttq *TaskTemplateQuery) Clone() *TaskTemplateQuery {
	if ttq == nil {
		return nil
	}
	return &TaskTemplateQuery{
		config:       ttq.config,
		ctx:          ttq.ctx.Clone(),
		order:        append([]tasktemplate.OrderOption{}, ttq.order...),
		inters:       append([]Interceptor{}, ttq.inters...),
		predicates:   append([]predicate.TaskTemplate{}, ttq.predicates...),
		withWard:     ttq.withWard.Clone(),
		withSubtasks: ttq.withSubtasks.Clone(),
		// clone intermediate query.
		sql:  ttq.sql.Clone(),
		path: ttq.path,
	}
}

// WithWard tells the query-builder to eager-load the nodes that are connected to
// the "ward" edge. The optional arguments are used to configure the query builder of the edge.
func (ttq *TaskTemplateQuery) WithWard(opts ...func(*WardQuery)) *TaskTemplateQuery {
	query := (&WardClient{config: ttq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttq.withWard = query
	return ttq
}

// WithSubtasks tells the query-builder to eager-load the nodes that are connected to
// the "subtasks" edge. The optional arguments are used to configure the query builder of the edge.
func (ttq *TaskTemplateQuery) WithSubtasks(opts ...func(*TaskTemplateSubTaskQuery)) *TaskTemplateQuery {
	query := (&TaskTemplateSubTaskClient{config: ttq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttq.withSubtasks = query
	return ttq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TaskTemplate.Query().
//		GroupBy(tasktemplate.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ttq *TaskTemplateQuery) GroupBy(field string, fields ...string) *TaskTemplateGroupBy {
	ttq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TaskTemplateGroupBy{build: ttq}
	grbuild.flds = &ttq.ctx.Fields
	grbuild.label = tasktemplate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.TaskTemplate.Query().
//		Select(tasktemplate.FieldName).
//		Scan(ctx, &v)
func (ttq *TaskTemplateQuery) Select(fields ...string) *TaskTemplateSelect {
	ttq.ctx.Fields = append(ttq.ctx.Fields, fields...)
	sbuild := &TaskTemplateSelect{TaskTemplateQuery: ttq}
	sbuild.label = tasktemplate.Label
	sbuild.flds, sbuild.scan = &ttq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TaskTemplateSelect configured with the given aggregations.
func (ttq *TaskTemplateQuery) Aggregate(fns ...AggregateFunc) *TaskTemplateSelect {
	return ttq.Select().Aggregate(fns...)
}

func (ttq *TaskTemplateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ttq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ttq); err != nil {
				return err
			}
		}
	}
	for _, f := range ttq.ctx.Fields {
		if !tasktemplate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ttq.path != nil {
		prev, err := ttq.path(ctx)
		if err != nil {
			return err
		}
		ttq.sql = prev
	}
	return nil
}

func (ttq *TaskTemplateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TaskTemplate, error) {
	var (
		nodes       = []*TaskTemplate{}
		withFKs     = ttq.withFKs
		_spec       = ttq.querySpec()
		loadedTypes = [2]bool{
			ttq.withWard != nil,
			ttq.withSubtasks != nil,
		}
	)
	if ttq.withWard != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, tasktemplate.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TaskTemplate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TaskTemplate{config: ttq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ttq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ttq.withWard; query != nil {
		if err := ttq.loadWard(ctx, query, nodes, nil,
			func(n *TaskTemplate, e *Ward) { n.Edges.Ward = e }); err != nil {
			return nil, err
		}
	}
	if query := ttq.withSubtasks; query != nil {
		if err := ttq.loadSubtasks(ctx, query, nodes,
			func(n *TaskTemplate) { n.Edges.Subtasks = []*TaskTemplateSubTask{} },
			func(n *TaskTemplate, e *TaskTemplateSubTask) { n.Edges.Subtasks = append(n.Edges.Subtasks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ttq *TaskTemplateQuery) loadWard(ctx context.Context, query *WardQuery, nodes []*TaskTemplate, init func(*TaskTemplate), assign func(*TaskTemplate, *Ward)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TaskTemplate)
	for i := range nodes {
		if nodes[i].ward_task_templates == nil {
			continue
		}
		fk := *nodes[i].ward_task_templates
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ward.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ward_task_templates" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ttq *TaskTemplateQuery) loadSubtasks(ctx context.Context, query *TaskTemplateSubTaskQuery, nodes []*TaskTemplate, init func(*TaskTemplate), assign func(*TaskTemplate, *TaskTemplateSubTask)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*TaskTemplate)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TaskTemplateSubTask(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tasktemplate.SubtasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.task_template_subtasks
		if fk == nil {
			return fmt.Errorf(`foreign-key "task_template_subtasks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "task_template_subtasks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ttq *TaskTemplateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ttq.querySpec()
	_spec.Node.Columns = ttq.ctx.Fields
	if len(ttq.ctx.Fields) > 0 {
		_spec.Unique = ttq.ctx.Unique != nil && *ttq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ttq.driver, _spec)
}

func (ttq *TaskTemplateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tasktemplate.Table, tasktemplate.Columns, sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID))
	_spec.From = ttq.sql
	if unique := ttq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ttq.path != nil {
		_spec.Unique = true
	}
	if fields := ttq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasktemplate.FieldID)
		for i := range fields {
			if fields[i] != tasktemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ttq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ttq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ttq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ttq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ttq *TaskTemplateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ttq.driver.Dialect())
	t1 := builder.Table(tasktemplate.Table)
	columns := ttq.ctx.Fields
	if len(columns) == 0 {
		columns = tasktemplate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ttq.sql != nil {
		selector = ttq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ttq.ctx.Unique != nil && *ttq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ttq.predicates {
		p(selector)
	}
	for _, p := range ttq.order {
		p(selector)
	}
	if offset := ttq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ttq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TaskTemplateGroupBy is the group-by builder for TaskTemplate entities.
type TaskTemplateGroupBy struct {
	selector
	build *TaskTemplateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ttgb *TaskTemplateGroupBy) Aggregate(fns ...AggregateFunc) *TaskTemplateGroupBy {
	ttgb.fns = append(ttgb.fns, fns...)
	return ttgb
}

// Scan applies the selector query and scans the result into the given value.
func (ttgb *TaskTemplateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ttgb.build.ctx, "GroupBy")
	if err := ttgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TaskTemplateQuery, *TaskTemplateGroupBy](ctx, ttgb.build, ttgb, ttgb.build.inters, v)
}

func (ttgb *TaskTemplateGroupBy) sqlScan(ctx context.Context, root *TaskTemplateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ttgb.fns))
	for _, fn := range ttgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ttgb.flds)+len(ttgb.fns))
		for _, f := range *ttgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ttgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TaskTemplateSelect is the builder for selecting fields of TaskTemplate entities.
type TaskTemplateSelect struct {
	*TaskTemplateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tts *TaskTemplateSelect) Aggregate(fns ...AggregateFunc) *TaskTemplateSelect {
	tts.fns = append(tts.fns, fns...)
	return tts
}

// Scan applies the selector query and scans the result into the given value.
func (tts *TaskTemplateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tts.ctx, "Select")
	if err := tts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TaskTemplateQuery, *TaskTemplateSelect](ctx, tts.TaskTemplateQuery, tts, tts.inters, v)
}

func (tts *TaskTemplateSelect) sqlScan(ctx context.Context, root *TaskTemplateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tts.fns))
	for _, fn := range tts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
