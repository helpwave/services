// Code generated by ent, DO NOT EDIT.

package patient

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the patient type in the database.
	Label = "patient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHumanReadableIdentifier holds the string denoting the human_readable_identifier field in the database.
	FieldHumanReadableIdentifier = "human_readable_identifier"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldIsDischarged holds the string denoting the is_discharged field in the database.
	FieldIsDischarged = "is_discharged"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// EdgeBed holds the string denoting the bed edge name in mutations.
	EdgeBed = "bed"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// Table holds the table name of the patient in the database.
	Table = "patients"
	// BedTable is the table that holds the bed relation/edge.
	BedTable = "patients"
	// BedInverseTable is the table name for the Bed entity.
	// It exists in this package in order to avoid circular dependency with the "bed" package.
	BedInverseTable = "beds"
	// BedColumn is the table column denoting the bed relation/edge.
	BedColumn = "bed_patient"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "patient_tasks"
)

// Columns holds all SQL columns for patient fields.
var Columns = []string{
	FieldID,
	FieldHumanReadableIdentifier,
	FieldNotes,
	FieldIsDischarged,
	FieldOrganizationID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "patients"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bed_patient",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Patient queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHumanReadableIdentifier orders the results by the human_readable_identifier field.
func ByHumanReadableIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHumanReadableIdentifier, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByIsDischarged orders the results by the is_discharged field.
func ByIsDischarged(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDischarged, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByBedField orders the results by bed field.
func ByBedField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBedStep(), sql.OrderByField(field, opts...))
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, BedTable, BedColumn),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
	)
}
