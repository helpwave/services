// Code generated by ent, DO NOT EDIT.

package patient

import (
	"task-svc/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldID, id))
}

// HumanReadableIdentifier applies equality check predicate on the "human_readable_identifier" field. It's identical to HumanReadableIdentifierEQ.
func HumanReadableIdentifier(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldHumanReadableIdentifier, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldNotes, v))
}

// IsDischarged applies equality check predicate on the "is_discharged" field. It's identical to IsDischargedEQ.
func IsDischarged(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldIsDischarged, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldUpdatedAt, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldOrganizationID, v))
}

// HumanReadableIdentifierEQ applies the EQ predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldHumanReadableIdentifier, v))
}

// HumanReadableIdentifierNEQ applies the NEQ predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldHumanReadableIdentifier, v))
}

// HumanReadableIdentifierIn applies the In predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldHumanReadableIdentifier, vs...))
}

// HumanReadableIdentifierNotIn applies the NotIn predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldHumanReadableIdentifier, vs...))
}

// HumanReadableIdentifierGT applies the GT predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldHumanReadableIdentifier, v))
}

// HumanReadableIdentifierGTE applies the GTE predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldHumanReadableIdentifier, v))
}

// HumanReadableIdentifierLT applies the LT predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldHumanReadableIdentifier, v))
}

// HumanReadableIdentifierLTE applies the LTE predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldHumanReadableIdentifier, v))
}

// HumanReadableIdentifierContains applies the Contains predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldHumanReadableIdentifier, v))
}

// HumanReadableIdentifierHasPrefix applies the HasPrefix predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldHumanReadableIdentifier, v))
}

// HumanReadableIdentifierHasSuffix applies the HasSuffix predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldHumanReadableIdentifier, v))
}

// HumanReadableIdentifierEqualFold applies the EqualFold predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldHumanReadableIdentifier, v))
}

// HumanReadableIdentifierContainsFold applies the ContainsFold predicate on the "human_readable_identifier" field.
func HumanReadableIdentifierContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldHumanReadableIdentifier, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Patient {
	return predicate.Patient(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Patient {
	return predicate.Patient(sql.FieldContainsFold(FieldNotes, v))
}

// IsDischargedEQ applies the EQ predicate on the "is_discharged" field.
func IsDischargedEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldIsDischarged, v))
}

// IsDischargedNEQ applies the NEQ predicate on the "is_discharged" field.
func IsDischargedNEQ(v int) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldIsDischarged, v))
}

// IsDischargedIn applies the In predicate on the "is_discharged" field.
func IsDischargedIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldIsDischarged, vs...))
}

// IsDischargedNotIn applies the NotIn predicate on the "is_discharged" field.
func IsDischargedNotIn(vs ...int) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldIsDischarged, vs...))
}

// IsDischargedGT applies the GT predicate on the "is_discharged" field.
func IsDischargedGT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldIsDischarged, v))
}

// IsDischargedGTE applies the GTE predicate on the "is_discharged" field.
func IsDischargedGTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldIsDischarged, v))
}

// IsDischargedLT applies the LT predicate on the "is_discharged" field.
func IsDischargedLT(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldIsDischarged, v))
}

// IsDischargedLTE applies the LTE predicate on the "is_discharged" field.
func IsDischargedLTE(v int) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldIsDischarged, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldUpdatedAt, v))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDGT applies the GT predicate on the "organization_id" field.
func OrganizationIDGT(v uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldGT(FieldOrganizationID, v))
}

// OrganizationIDGTE applies the GTE predicate on the "organization_id" field.
func OrganizationIDGTE(v uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldGTE(FieldOrganizationID, v))
}

// OrganizationIDLT applies the LT predicate on the "organization_id" field.
func OrganizationIDLT(v uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldLT(FieldOrganizationID, v))
}

// OrganizationIDLTE applies the LTE predicate on the "organization_id" field.
func OrganizationIDLTE(v uuid.UUID) predicate.Patient {
	return predicate.Patient(sql.FieldLTE(FieldOrganizationID, v))
}

// HasBed applies the HasEdge predicate on the "bed" edge.
func HasBed() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, BedTable, BedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBedWith applies the HasEdge predicate on the "bed" edge with a given conditions (other predicates).
func HasBedWith(preds ...predicate.Bed) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newBedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.Patient {
	return predicate.Patient(func(s *sql.Selector) {
		step := newTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Patient) predicate.Patient {
	return predicate.Patient(sql.NotPredicates(p))
}
