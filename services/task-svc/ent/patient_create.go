// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"task-svc/ent/bed"
	"task-svc/ent/patient"
	"task-svc/ent/task"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PatientCreate is the builder for creating a Patient entity.
type PatientCreate struct {
	config
	mutation *PatientMutation
	hooks    []Hook
}

// SetHumanReadableIdentifier sets the "human_readable_identifier" field.
func (pc *PatientCreate) SetHumanReadableIdentifier(s string) *PatientCreate {
	pc.mutation.SetHumanReadableIdentifier(s)
	return pc
}

// SetNotes sets the "notes" field.
func (pc *PatientCreate) SetNotes(s string) *PatientCreate {
	pc.mutation.SetNotes(s)
	return pc
}

// SetIsDischarged sets the "is_discharged" field.
func (pc *PatientCreate) SetIsDischarged(b bool) *PatientCreate {
	pc.mutation.SetIsDischarged(b)
	return pc
}

// SetOrganizationID sets the "organization_id" field.
func (pc *PatientCreate) SetOrganizationID(u uuid.UUID) *PatientCreate {
	pc.mutation.SetOrganizationID(u)
	return pc
}

// SetID sets the "id" field.
func (pc *PatientCreate) SetID(u uuid.UUID) *PatientCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PatientCreate) SetNillableID(u *uuid.UUID) *PatientCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetBedID sets the "bed" edge to the Bed entity by ID.
func (pc *PatientCreate) SetBedID(id uuid.UUID) *PatientCreate {
	pc.mutation.SetBedID(id)
	return pc
}

// SetNillableBedID sets the "bed" edge to the Bed entity by ID if the given value is not nil.
func (pc *PatientCreate) SetNillableBedID(id *uuid.UUID) *PatientCreate {
	if id != nil {
		pc = pc.SetBedID(*id)
	}
	return pc
}

// SetBed sets the "bed" edge to the Bed entity.
func (pc *PatientCreate) SetBed(b *Bed) *PatientCreate {
	return pc.SetBedID(b.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pc *PatientCreate) AddTaskIDs(ids ...uuid.UUID) *PatientCreate {
	pc.mutation.AddTaskIDs(ids...)
	return pc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pc *PatientCreate) AddTasks(t ...*Task) *PatientCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTaskIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pc *PatientCreate) Mutation() *PatientMutation {
	return pc.mutation
}

// Save creates the Patient in the database.
func (pc *PatientCreate) Save(ctx context.Context) (*Patient, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientCreate) SaveX(ctx context.Context) *Patient {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PatientCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PatientCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PatientCreate) defaults() {
	if _, ok := pc.mutation.ID(); !ok {
		v := patient.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PatientCreate) check() error {
	if _, ok := pc.mutation.HumanReadableIdentifier(); !ok {
		return &ValidationError{Name: "human_readable_identifier", err: errors.New(`ent: missing required field "Patient.human_readable_identifier"`)}
	}
	if _, ok := pc.mutation.Notes(); !ok {
		return &ValidationError{Name: "notes", err: errors.New(`ent: missing required field "Patient.notes"`)}
	}
	if _, ok := pc.mutation.IsDischarged(); !ok {
		return &ValidationError{Name: "is_discharged", err: errors.New(`ent: missing required field "Patient.is_discharged"`)}
	}
	if _, ok := pc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Patient.organization_id"`)}
	}
	return nil
}

func (pc *PatientCreate) sqlSave(ctx context.Context) (*Patient, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PatientCreate) createSpec() (*Patient, *sqlgraph.CreateSpec) {
	var (
		_node = &Patient{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(patient.Table, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.HumanReadableIdentifier(); ok {
		_spec.SetField(patient.FieldHumanReadableIdentifier, field.TypeString, value)
		_node.HumanReadableIdentifier = value
	}
	if value, ok := pc.mutation.Notes(); ok {
		_spec.SetField(patient.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := pc.mutation.IsDischarged(); ok {
		_spec.SetField(patient.FieldIsDischarged, field.TypeBool, value)
		_node.IsDischarged = value
	}
	if value, ok := pc.mutation.OrganizationID(); ok {
		_spec.SetField(patient.FieldOrganizationID, field.TypeUUID, value)
		_node.OrganizationID = value
	}
	if nodes := pc.mutation.BedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   patient.BedTable,
			Columns: []string{patient.BedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bed_patient = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TasksTable,
			Columns: []string{patient.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PatientCreateBulk is the builder for creating many Patient entities in bulk.
type PatientCreateBulk struct {
	config
	err      error
	builders []*PatientCreate
}

// Save creates the Patient entities in the database.
func (pcb *PatientCreateBulk) Save(ctx context.Context) ([]*Patient, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Patient, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PatientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PatientCreateBulk) SaveX(ctx context.Context) []*Patient {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PatientCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PatientCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
