// Code generated by ent, DO NOT EDIT.

package tasktemplatesubtask

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the tasktemplatesubtask type in the database.
	Label = "task_template_sub_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeTaskTemplate holds the string denoting the task_template edge name in mutations.
	EdgeTaskTemplate = "task_template"
	// Table holds the table name of the tasktemplatesubtask in the database.
	Table = "task_template_sub_tasks"
	// TaskTemplateTable is the table that holds the task_template relation/edge.
	TaskTemplateTable = "task_template_sub_tasks"
	// TaskTemplateInverseTable is the table name for the TaskTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "tasktemplate" package.
	TaskTemplateInverseTable = "task_templates"
	// TaskTemplateColumn is the table column denoting the task_template relation/edge.
	TaskTemplateColumn = "task_template_subtasks"
)

// Columns holds all SQL columns for tasktemplatesubtask fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "task_template_sub_tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"task_template_subtasks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the TaskTemplateSubTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTaskTemplateField orders the results by task_template field.
func ByTaskTemplateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskTemplateStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskTemplateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskTemplateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTemplateTable, TaskTemplateColumn),
	)
}
