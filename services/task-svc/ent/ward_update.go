// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"task-svc/ent/predicate"
	"task-svc/ent/room"
	"task-svc/ent/tasktemplate"
	"task-svc/ent/ward"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WardUpdate is the builder for updating Ward entities.
type WardUpdate struct {
	config
	hooks    []Hook
	mutation *WardMutation
}

// Where appends a list predicates to the WardUpdate builder.
func (wu *WardUpdate) Where(ps ...predicate.Ward) *WardUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetName sets the "name" field.
func (wu *WardUpdate) SetName(s string) *WardUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetOrganizationID sets the "organization_id" field.
func (wu *WardUpdate) SetOrganizationID(u uuid.UUID) *WardUpdate {
	wu.mutation.SetOrganizationID(u)
	return wu
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (wu *WardUpdate) AddRoomIDs(ids ...uuid.UUID) *WardUpdate {
	wu.mutation.AddRoomIDs(ids...)
	return wu
}

// AddRooms adds the "rooms" edges to the Room entity.
func (wu *WardUpdate) AddRooms(r ...*Room) *WardUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wu.AddRoomIDs(ids...)
}

// AddTaskTemplateIDs adds the "task_templates" edge to the TaskTemplate entity by IDs.
func (wu *WardUpdate) AddTaskTemplateIDs(ids ...uuid.UUID) *WardUpdate {
	wu.mutation.AddTaskTemplateIDs(ids...)
	return wu
}

// AddTaskTemplates adds the "task_templates" edges to the TaskTemplate entity.
func (wu *WardUpdate) AddTaskTemplates(t ...*TaskTemplate) *WardUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.AddTaskTemplateIDs(ids...)
}

// Mutation returns the WardMutation object of the builder.
func (wu *WardUpdate) Mutation() *WardMutation {
	return wu.mutation
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (wu *WardUpdate) ClearRooms() *WardUpdate {
	wu.mutation.ClearRooms()
	return wu
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (wu *WardUpdate) RemoveRoomIDs(ids ...uuid.UUID) *WardUpdate {
	wu.mutation.RemoveRoomIDs(ids...)
	return wu
}

// RemoveRooms removes "rooms" edges to Room entities.
func (wu *WardUpdate) RemoveRooms(r ...*Room) *WardUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wu.RemoveRoomIDs(ids...)
}

// ClearTaskTemplates clears all "task_templates" edges to the TaskTemplate entity.
func (wu *WardUpdate) ClearTaskTemplates() *WardUpdate {
	wu.mutation.ClearTaskTemplates()
	return wu
}

// RemoveTaskTemplateIDs removes the "task_templates" edge to TaskTemplate entities by IDs.
func (wu *WardUpdate) RemoveTaskTemplateIDs(ids ...uuid.UUID) *WardUpdate {
	wu.mutation.RemoveTaskTemplateIDs(ids...)
	return wu
}

// RemoveTaskTemplates removes "task_templates" edges to TaskTemplate entities.
func (wu *WardUpdate) RemoveTaskTemplates(t ...*TaskTemplate) *WardUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.RemoveTaskTemplateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WardUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WardUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WardUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ward.Table, ward.Columns, sqlgraph.NewFieldSpec(ward.FieldID, field.TypeUUID))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(ward.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.OrganizationID(); ok {
		_spec.SetField(ward.FieldOrganizationID, field.TypeUUID, value)
	}
	if wu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.RoomsTable,
			Columns: []string{ward.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !wu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.RoomsTable,
			Columns: []string{ward.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.RoomsTable,
			Columns: []string{ward.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.TaskTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.TaskTemplatesTable,
			Columns: []string{ward.TaskTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedTaskTemplatesIDs(); len(nodes) > 0 && !wu.mutation.TaskTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.TaskTemplatesTable,
			Columns: []string{ward.TaskTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.TaskTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.TaskTemplatesTable,
			Columns: []string{ward.TaskTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WardUpdateOne is the builder for updating a single Ward entity.
type WardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WardMutation
}

// SetName sets the "name" field.
func (wuo *WardUpdateOne) SetName(s string) *WardUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetOrganizationID sets the "organization_id" field.
func (wuo *WardUpdateOne) SetOrganizationID(u uuid.UUID) *WardUpdateOne {
	wuo.mutation.SetOrganizationID(u)
	return wuo
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (wuo *WardUpdateOne) AddRoomIDs(ids ...uuid.UUID) *WardUpdateOne {
	wuo.mutation.AddRoomIDs(ids...)
	return wuo
}

// AddRooms adds the "rooms" edges to the Room entity.
func (wuo *WardUpdateOne) AddRooms(r ...*Room) *WardUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wuo.AddRoomIDs(ids...)
}

// AddTaskTemplateIDs adds the "task_templates" edge to the TaskTemplate entity by IDs.
func (wuo *WardUpdateOne) AddTaskTemplateIDs(ids ...uuid.UUID) *WardUpdateOne {
	wuo.mutation.AddTaskTemplateIDs(ids...)
	return wuo
}

// AddTaskTemplates adds the "task_templates" edges to the TaskTemplate entity.
func (wuo *WardUpdateOne) AddTaskTemplates(t ...*TaskTemplate) *WardUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.AddTaskTemplateIDs(ids...)
}

// Mutation returns the WardMutation object of the builder.
func (wuo *WardUpdateOne) Mutation() *WardMutation {
	return wuo.mutation
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (wuo *WardUpdateOne) ClearRooms() *WardUpdateOne {
	wuo.mutation.ClearRooms()
	return wuo
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (wuo *WardUpdateOne) RemoveRoomIDs(ids ...uuid.UUID) *WardUpdateOne {
	wuo.mutation.RemoveRoomIDs(ids...)
	return wuo
}

// RemoveRooms removes "rooms" edges to Room entities.
func (wuo *WardUpdateOne) RemoveRooms(r ...*Room) *WardUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return wuo.RemoveRoomIDs(ids...)
}

// ClearTaskTemplates clears all "task_templates" edges to the TaskTemplate entity.
func (wuo *WardUpdateOne) ClearTaskTemplates() *WardUpdateOne {
	wuo.mutation.ClearTaskTemplates()
	return wuo
}

// RemoveTaskTemplateIDs removes the "task_templates" edge to TaskTemplate entities by IDs.
func (wuo *WardUpdateOne) RemoveTaskTemplateIDs(ids ...uuid.UUID) *WardUpdateOne {
	wuo.mutation.RemoveTaskTemplateIDs(ids...)
	return wuo
}

// RemoveTaskTemplates removes "task_templates" edges to TaskTemplate entities.
func (wuo *WardUpdateOne) RemoveTaskTemplates(t ...*TaskTemplate) *WardUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.RemoveTaskTemplateIDs(ids...)
}

// Where appends a list predicates to the WardUpdate builder.
func (wuo *WardUpdateOne) Where(ps ...predicate.Ward) *WardUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WardUpdateOne) Select(field string, fields ...string) *WardUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Ward entity.
func (wuo *WardUpdateOne) Save(ctx context.Context) (*Ward, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WardUpdateOne) SaveX(ctx context.Context) *Ward {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WardUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WardUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WardUpdateOne) sqlSave(ctx context.Context) (_node *Ward, err error) {
	_spec := sqlgraph.NewUpdateSpec(ward.Table, ward.Columns, sqlgraph.NewFieldSpec(ward.FieldID, field.TypeUUID))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ward.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ward.FieldID)
		for _, f := range fields {
			if !ward.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ward.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(ward.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.OrganizationID(); ok {
		_spec.SetField(ward.FieldOrganizationID, field.TypeUUID, value)
	}
	if wuo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.RoomsTable,
			Columns: []string{ward.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !wuo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.RoomsTable,
			Columns: []string{ward.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.RoomsTable,
			Columns: []string{ward.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.TaskTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.TaskTemplatesTable,
			Columns: []string{ward.TaskTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedTaskTemplatesIDs(); len(nodes) > 0 && !wuo.mutation.TaskTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.TaskTemplatesTable,
			Columns: []string{ward.TaskTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.TaskTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ward.TaskTemplatesTable,
			Columns: []string{ward.TaskTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ward{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ward.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
