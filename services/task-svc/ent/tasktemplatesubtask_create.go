// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"task-svc/ent/tasktemplate"
	"task-svc/ent/tasktemplatesubtask"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TaskTemplateSubTaskCreate is the builder for creating a TaskTemplateSubTask entity.
type TaskTemplateSubTaskCreate struct {
	config
	mutation *TaskTemplateSubTaskMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ttstc *TaskTemplateSubTaskCreate) SetName(s string) *TaskTemplateSubTaskCreate {
	ttstc.mutation.SetName(s)
	return ttstc
}

// SetID sets the "id" field.
func (ttstc *TaskTemplateSubTaskCreate) SetID(u uuid.UUID) *TaskTemplateSubTaskCreate {
	ttstc.mutation.SetID(u)
	return ttstc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttstc *TaskTemplateSubTaskCreate) SetNillableID(u *uuid.UUID) *TaskTemplateSubTaskCreate {
	if u != nil {
		ttstc.SetID(*u)
	}
	return ttstc
}

// SetTaskTemplateID sets the "task_template" edge to the TaskTemplate entity by ID.
func (ttstc *TaskTemplateSubTaskCreate) SetTaskTemplateID(id uuid.UUID) *TaskTemplateSubTaskCreate {
	ttstc.mutation.SetTaskTemplateID(id)
	return ttstc
}

// SetTaskTemplate sets the "task_template" edge to the TaskTemplate entity.
func (ttstc *TaskTemplateSubTaskCreate) SetTaskTemplate(t *TaskTemplate) *TaskTemplateSubTaskCreate {
	return ttstc.SetTaskTemplateID(t.ID)
}

// Mutation returns the TaskTemplateSubTaskMutation object of the builder.
func (ttstc *TaskTemplateSubTaskCreate) Mutation() *TaskTemplateSubTaskMutation {
	return ttstc.mutation
}

// Save creates the TaskTemplateSubTask in the database.
func (ttstc *TaskTemplateSubTaskCreate) Save(ctx context.Context) (*TaskTemplateSubTask, error) {
	ttstc.defaults()
	return withHooks(ctx, ttstc.sqlSave, ttstc.mutation, ttstc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttstc *TaskTemplateSubTaskCreate) SaveX(ctx context.Context) *TaskTemplateSubTask {
	v, err := ttstc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttstc *TaskTemplateSubTaskCreate) Exec(ctx context.Context) error {
	_, err := ttstc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttstc *TaskTemplateSubTaskCreate) ExecX(ctx context.Context) {
	if err := ttstc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttstc *TaskTemplateSubTaskCreate) defaults() {
	if _, ok := ttstc.mutation.ID(); !ok {
		v := tasktemplatesubtask.DefaultID()
		ttstc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttstc *TaskTemplateSubTaskCreate) check() error {
	if _, ok := ttstc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TaskTemplateSubTask.name"`)}
	}
	if _, ok := ttstc.mutation.TaskTemplateID(); !ok {
		return &ValidationError{Name: "task_template", err: errors.New(`ent: missing required edge "TaskTemplateSubTask.task_template"`)}
	}
	return nil
}

func (ttstc *TaskTemplateSubTaskCreate) sqlSave(ctx context.Context) (*TaskTemplateSubTask, error) {
	if err := ttstc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttstc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttstc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ttstc.mutation.id = &_node.ID
	ttstc.mutation.done = true
	return _node, nil
}

func (ttstc *TaskTemplateSubTaskCreate) createSpec() (*TaskTemplateSubTask, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskTemplateSubTask{config: ttstc.config}
		_spec = sqlgraph.NewCreateSpec(tasktemplatesubtask.Table, sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID))
	)
	if id, ok := ttstc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ttstc.mutation.Name(); ok {
		_spec.SetField(tasktemplatesubtask.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := ttstc.mutation.TaskTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktemplatesubtask.TaskTemplateTable,
			Columns: []string{tasktemplatesubtask.TaskTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_template_subtasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskTemplateSubTaskCreateBulk is the builder for creating many TaskTemplateSubTask entities in bulk.
type TaskTemplateSubTaskCreateBulk struct {
	config
	err      error
	builders []*TaskTemplateSubTaskCreate
}

// Save creates the TaskTemplateSubTask entities in the database.
func (ttstcb *TaskTemplateSubTaskCreateBulk) Save(ctx context.Context) ([]*TaskTemplateSubTask, error) {
	if ttstcb.err != nil {
		return nil, ttstcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttstcb.builders))
	nodes := make([]*TaskTemplateSubTask, len(ttstcb.builders))
	mutators := make([]Mutator, len(ttstcb.builders))
	for i := range ttstcb.builders {
		func(i int, root context.Context) {
			builder := ttstcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskTemplateSubTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttstcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttstcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttstcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttstcb *TaskTemplateSubTaskCreateBulk) SaveX(ctx context.Context) []*TaskTemplateSubTask {
	v, err := ttstcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttstcb *TaskTemplateSubTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := ttstcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttstcb *TaskTemplateSubTaskCreateBulk) ExecX(ctx context.Context) {
	if err := ttstcb.Exec(ctx); err != nil {
		panic(err)
	}
}
