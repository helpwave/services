// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"task-svc/ent/predicate"
	"task-svc/ent/tasktemplate"
	"task-svc/ent/tasktemplatesubtask"
	"task-svc/ent/ward"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TaskTemplateUpdate is the builder for updating TaskTemplate entities.
type TaskTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *TaskTemplateMutation
}

// Where appends a list predicates to the TaskTemplateUpdate builder.
func (ttu *TaskTemplateUpdate) Where(ps ...predicate.TaskTemplate) *TaskTemplateUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetName sets the "name" field.
func (ttu *TaskTemplateUpdate) SetName(s string) *TaskTemplateUpdate {
	ttu.mutation.SetName(s)
	return ttu
}

// SetDescription sets the "description" field.
func (ttu *TaskTemplateUpdate) SetDescription(s string) *TaskTemplateUpdate {
	ttu.mutation.SetDescription(s)
	return ttu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttu *TaskTemplateUpdate) SetNillableDescription(s *string) *TaskTemplateUpdate {
	if s != nil {
		ttu.SetDescription(*s)
	}
	return ttu
}

// SetCreatedBy sets the "created_by" field.
func (ttu *TaskTemplateUpdate) SetCreatedBy(u uuid.UUID) *TaskTemplateUpdate {
	ttu.mutation.SetCreatedBy(u)
	return ttu
}

// SetOrganizationID sets the "organization_id" field.
func (ttu *TaskTemplateUpdate) SetOrganizationID(u uuid.UUID) *TaskTemplateUpdate {
	ttu.mutation.SetOrganizationID(u)
	return ttu
}

// SetWardID sets the "ward" edge to the Ward entity by ID.
func (ttu *TaskTemplateUpdate) SetWardID(id uuid.UUID) *TaskTemplateUpdate {
	ttu.mutation.SetWardID(id)
	return ttu
}

// SetNillableWardID sets the "ward" edge to the Ward entity by ID if the given value is not nil.
func (ttu *TaskTemplateUpdate) SetNillableWardID(id *uuid.UUID) *TaskTemplateUpdate {
	if id != nil {
		ttu = ttu.SetWardID(*id)
	}
	return ttu
}

// SetWard sets the "ward" edge to the Ward entity.
func (ttu *TaskTemplateUpdate) SetWard(w *Ward) *TaskTemplateUpdate {
	return ttu.SetWardID(w.ID)
}

// AddSubtaskIDs adds the "subtasks" edge to the TaskTemplateSubTask entity by IDs.
func (ttu *TaskTemplateUpdate) AddSubtaskIDs(ids ...uuid.UUID) *TaskTemplateUpdate {
	ttu.mutation.AddSubtaskIDs(ids...)
	return ttu
}

// AddSubtasks adds the "subtasks" edges to the TaskTemplateSubTask entity.
func (ttu *TaskTemplateUpdate) AddSubtasks(t ...*TaskTemplateSubTask) *TaskTemplateUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddSubtaskIDs(ids...)
}

// Mutation returns the TaskTemplateMutation object of the builder.
func (ttu *TaskTemplateUpdate) Mutation() *TaskTemplateMutation {
	return ttu.mutation
}

// ClearWard clears the "ward" edge to the Ward entity.
func (ttu *TaskTemplateUpdate) ClearWard() *TaskTemplateUpdate {
	ttu.mutation.ClearWard()
	return ttu
}

// ClearSubtasks clears all "subtasks" edges to the TaskTemplateSubTask entity.
func (ttu *TaskTemplateUpdate) ClearSubtasks() *TaskTemplateUpdate {
	ttu.mutation.ClearSubtasks()
	return ttu
}

// RemoveSubtaskIDs removes the "subtasks" edge to TaskTemplateSubTask entities by IDs.
func (ttu *TaskTemplateUpdate) RemoveSubtaskIDs(ids ...uuid.UUID) *TaskTemplateUpdate {
	ttu.mutation.RemoveSubtaskIDs(ids...)
	return ttu
}

// RemoveSubtasks removes "subtasks" edges to TaskTemplateSubTask entities.
func (ttu *TaskTemplateUpdate) RemoveSubtasks(t ...*TaskTemplateSubTask) *TaskTemplateUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveSubtaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TaskTemplateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TaskTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TaskTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TaskTemplateUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttu *TaskTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tasktemplate.Table, tasktemplate.Columns, sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.Name(); ok {
		_spec.SetField(tasktemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ttu.mutation.Description(); ok {
		_spec.SetField(tasktemplate.FieldDescription, field.TypeString, value)
	}
	if value, ok := ttu.mutation.CreatedBy(); ok {
		_spec.SetField(tasktemplate.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := ttu.mutation.OrganizationID(); ok {
		_spec.SetField(tasktemplate.FieldOrganizationID, field.TypeUUID, value)
	}
	if ttu.mutation.WardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktemplate.WardTable,
			Columns: []string{tasktemplate.WardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ward.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.WardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktemplate.WardTable,
			Columns: []string{tasktemplate.WardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ward.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktemplate.SubtasksTable,
			Columns: []string{tasktemplate.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedSubtasksIDs(); len(nodes) > 0 && !ttu.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktemplate.SubtasksTable,
			Columns: []string{tasktemplate.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.SubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktemplate.SubtasksTable,
			Columns: []string{tasktemplate.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TaskTemplateUpdateOne is the builder for updating a single TaskTemplate entity.
type TaskTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskTemplateMutation
}

// SetName sets the "name" field.
func (ttuo *TaskTemplateUpdateOne) SetName(s string) *TaskTemplateUpdateOne {
	ttuo.mutation.SetName(s)
	return ttuo
}

// SetDescription sets the "description" field.
func (ttuo *TaskTemplateUpdateOne) SetDescription(s string) *TaskTemplateUpdateOne {
	ttuo.mutation.SetDescription(s)
	return ttuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttuo *TaskTemplateUpdateOne) SetNillableDescription(s *string) *TaskTemplateUpdateOne {
	if s != nil {
		ttuo.SetDescription(*s)
	}
	return ttuo
}

// SetCreatedBy sets the "created_by" field.
func (ttuo *TaskTemplateUpdateOne) SetCreatedBy(u uuid.UUID) *TaskTemplateUpdateOne {
	ttuo.mutation.SetCreatedBy(u)
	return ttuo
}

// SetOrganizationID sets the "organization_id" field.
func (ttuo *TaskTemplateUpdateOne) SetOrganizationID(u uuid.UUID) *TaskTemplateUpdateOne {
	ttuo.mutation.SetOrganizationID(u)
	return ttuo
}

// SetWardID sets the "ward" edge to the Ward entity by ID.
func (ttuo *TaskTemplateUpdateOne) SetWardID(id uuid.UUID) *TaskTemplateUpdateOne {
	ttuo.mutation.SetWardID(id)
	return ttuo
}

// SetNillableWardID sets the "ward" edge to the Ward entity by ID if the given value is not nil.
func (ttuo *TaskTemplateUpdateOne) SetNillableWardID(id *uuid.UUID) *TaskTemplateUpdateOne {
	if id != nil {
		ttuo = ttuo.SetWardID(*id)
	}
	return ttuo
}

// SetWard sets the "ward" edge to the Ward entity.
func (ttuo *TaskTemplateUpdateOne) SetWard(w *Ward) *TaskTemplateUpdateOne {
	return ttuo.SetWardID(w.ID)
}

// AddSubtaskIDs adds the "subtasks" edge to the TaskTemplateSubTask entity by IDs.
func (ttuo *TaskTemplateUpdateOne) AddSubtaskIDs(ids ...uuid.UUID) *TaskTemplateUpdateOne {
	ttuo.mutation.AddSubtaskIDs(ids...)
	return ttuo
}

// AddSubtasks adds the "subtasks" edges to the TaskTemplateSubTask entity.
func (ttuo *TaskTemplateUpdateOne) AddSubtasks(t ...*TaskTemplateSubTask) *TaskTemplateUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddSubtaskIDs(ids...)
}

// Mutation returns the TaskTemplateMutation object of the builder.
func (ttuo *TaskTemplateUpdateOne) Mutation() *TaskTemplateMutation {
	return ttuo.mutation
}

// ClearWard clears the "ward" edge to the Ward entity.
func (ttuo *TaskTemplateUpdateOne) ClearWard() *TaskTemplateUpdateOne {
	ttuo.mutation.ClearWard()
	return ttuo
}

// ClearSubtasks clears all "subtasks" edges to the TaskTemplateSubTask entity.
func (ttuo *TaskTemplateUpdateOne) ClearSubtasks() *TaskTemplateUpdateOne {
	ttuo.mutation.ClearSubtasks()
	return ttuo
}

// RemoveSubtaskIDs removes the "subtasks" edge to TaskTemplateSubTask entities by IDs.
func (ttuo *TaskTemplateUpdateOne) RemoveSubtaskIDs(ids ...uuid.UUID) *TaskTemplateUpdateOne {
	ttuo.mutation.RemoveSubtaskIDs(ids...)
	return ttuo
}

// RemoveSubtasks removes "subtasks" edges to TaskTemplateSubTask entities.
func (ttuo *TaskTemplateUpdateOne) RemoveSubtasks(t ...*TaskTemplateSubTask) *TaskTemplateUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveSubtaskIDs(ids...)
}

// Where appends a list predicates to the TaskTemplateUpdate builder.
func (ttuo *TaskTemplateUpdateOne) Where(ps ...predicate.TaskTemplate) *TaskTemplateUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TaskTemplateUpdateOne) Select(field string, fields ...string) *TaskTemplateUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TaskTemplate entity.
func (ttuo *TaskTemplateUpdateOne) Save(ctx context.Context) (*TaskTemplate, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TaskTemplateUpdateOne) SaveX(ctx context.Context) *TaskTemplate {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TaskTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TaskTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttuo *TaskTemplateUpdateOne) sqlSave(ctx context.Context) (_node *TaskTemplate, err error) {
	_spec := sqlgraph.NewUpdateSpec(tasktemplate.Table, tasktemplate.Columns, sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasktemplate.FieldID)
		for _, f := range fields {
			if !tasktemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tasktemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.Name(); ok {
		_spec.SetField(tasktemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.Description(); ok {
		_spec.SetField(tasktemplate.FieldDescription, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.CreatedBy(); ok {
		_spec.SetField(tasktemplate.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := ttuo.mutation.OrganizationID(); ok {
		_spec.SetField(tasktemplate.FieldOrganizationID, field.TypeUUID, value)
	}
	if ttuo.mutation.WardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktemplate.WardTable,
			Columns: []string{tasktemplate.WardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ward.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.WardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktemplate.WardTable,
			Columns: []string{tasktemplate.WardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ward.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktemplate.SubtasksTable,
			Columns: []string{tasktemplate.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedSubtasksIDs(); len(nodes) > 0 && !ttuo.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktemplate.SubtasksTable,
			Columns: []string{tasktemplate.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.SubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktemplate.SubtasksTable,
			Columns: []string{tasktemplate.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskTemplate{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
