// Code generated by ent, DO NOT EDIT.

package room

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the room type in the database.
	Label = "room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// EdgeBeds holds the string denoting the beds edge name in mutations.
	EdgeBeds = "beds"
	// EdgeWard holds the string denoting the ward edge name in mutations.
	EdgeWard = "ward"
	// Table holds the table name of the room in the database.
	Table = "rooms"
	// BedsTable is the table that holds the beds relation/edge.
	BedsTable = "beds"
	// BedsInverseTable is the table name for the Bed entity.
	// It exists in this package in order to avoid circular dependency with the "bed" package.
	BedsInverseTable = "beds"
	// BedsColumn is the table column denoting the beds relation/edge.
	BedsColumn = "room_beds"
	// WardTable is the table that holds the ward relation/edge.
	WardTable = "rooms"
	// WardInverseTable is the table name for the Ward entity.
	// It exists in this package in order to avoid circular dependency with the "ward" package.
	WardInverseTable = "wards"
	// WardColumn is the table column denoting the ward relation/edge.
	WardColumn = "ward_rooms"
)

// Columns holds all SQL columns for room fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldOrganizationID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rooms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ward_rooms",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Room queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByBedsCount orders the results by beds count.
func ByBedsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBedsStep(), opts...)
	}
}

// ByBeds orders the results by beds terms.
func ByBeds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBedsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWardField orders the results by ward field.
func ByWardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWardStep(), sql.OrderByField(field, opts...))
	}
}
func newBedsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BedsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BedsTable, BedsColumn),
	)
}
func newWardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WardTable, WardColumn),
	)
}
