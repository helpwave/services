// Code generated by ent, DO NOT EDIT.

package ward

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the ward type in the database.
	Label = "ward"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// EdgeRooms holds the string denoting the rooms edge name in mutations.
	EdgeRooms = "rooms"
	// EdgeTaskTemplates holds the string denoting the task_templates edge name in mutations.
	EdgeTaskTemplates = "task_templates"
	// Table holds the table name of the ward in the database.
	Table = "wards"
	// RoomsTable is the table that holds the rooms relation/edge.
	RoomsTable = "rooms"
	// RoomsInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RoomsInverseTable = "rooms"
	// RoomsColumn is the table column denoting the rooms relation/edge.
	RoomsColumn = "ward_rooms"
	// TaskTemplatesTable is the table that holds the task_templates relation/edge.
	TaskTemplatesTable = "task_templates"
	// TaskTemplatesInverseTable is the table name for the TaskTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "tasktemplate" package.
	TaskTemplatesInverseTable = "task_templates"
	// TaskTemplatesColumn is the table column denoting the task_templates relation/edge.
	TaskTemplatesColumn = "ward_task_templates"
)

// Columns holds all SQL columns for ward fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldOrganizationID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Ward queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByRoomsCount orders the results by rooms count.
func ByRoomsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoomsStep(), opts...)
	}
}

// ByRooms orders the results by rooms terms.
func ByRooms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTaskTemplatesCount orders the results by task_templates count.
func ByTaskTemplatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaskTemplatesStep(), opts...)
	}
}

// ByTaskTemplates orders the results by task_templates terms.
func ByTaskTemplates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskTemplatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRoomsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RoomsTable, RoomsColumn),
	)
}
func newTaskTemplatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskTemplatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TaskTemplatesTable, TaskTemplatesColumn),
	)
}
