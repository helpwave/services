// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"task-svc/ent/patient"
	"task-svc/ent/predicate"
	"task-svc/ent/subtask"
	"task-svc/ent/task"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TaskUpdate) SetName(s string) *TaskUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetPublic sets the "public" field.
func (tu *TaskUpdate) SetPublic(b bool) *TaskUpdate {
	tu.mutation.SetPublic(b)
	return tu
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePublic(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetPublic(*b)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(i int32) *TaskUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(i)
	return tu
}

// AddStatus adds i to the "status" field.
func (tu *TaskUpdate) AddStatus(i int32) *TaskUpdate {
	tu.mutation.AddStatus(i)
	return tu
}

// SetDueAt sets the "due_at" field.
func (tu *TaskUpdate) SetDueAt(t time.Time) *TaskUpdate {
	tu.mutation.SetDueAt(t)
	return tu
}

// SetCreatedBy sets the "created_by" field.
func (tu *TaskUpdate) SetCreatedBy(u uuid.UUID) *TaskUpdate {
	tu.mutation.SetCreatedBy(u)
	return tu
}

// SetAssignedUserID sets the "assigned_user_id" field.
func (tu *TaskUpdate) SetAssignedUserID(u uuid.UUID) *TaskUpdate {
	tu.mutation.SetAssignedUserID(u)
	return tu
}

// SetOrganizationID sets the "organization_id" field.
func (tu *TaskUpdate) SetOrganizationID(u uuid.UUID) *TaskUpdate {
	tu.mutation.SetOrganizationID(u)
	return tu
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (tu *TaskUpdate) SetPatientID(id uuid.UUID) *TaskUpdate {
	tu.mutation.SetPatientID(id)
	return tu
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillablePatientID(id *uuid.UUID) *TaskUpdate {
	if id != nil {
		tu = tu.SetPatientID(*id)
	}
	return tu
}

// SetPatient sets the "patient" edge to the Patient entity.
func (tu *TaskUpdate) SetPatient(p *Patient) *TaskUpdate {
	return tu.SetPatientID(p.ID)
}

// AddSubtaskIDs adds the "subtasks" edge to the SubTask entity by IDs.
func (tu *TaskUpdate) AddSubtaskIDs(ids ...uuid.UUID) *TaskUpdate {
	tu.mutation.AddSubtaskIDs(ids...)
	return tu
}

// AddSubtasks adds the "subtasks" edges to the SubTask entity.
func (tu *TaskUpdate) AddSubtasks(s ...*SubTask) *TaskUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSubtaskIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (tu *TaskUpdate) ClearPatient() *TaskUpdate {
	tu.mutation.ClearPatient()
	return tu
}

// ClearSubtasks clears all "subtasks" edges to the SubTask entity.
func (tu *TaskUpdate) ClearSubtasks() *TaskUpdate {
	tu.mutation.ClearSubtasks()
	return tu
}

// RemoveSubtaskIDs removes the "subtasks" edge to SubTask entities by IDs.
func (tu *TaskUpdate) RemoveSubtaskIDs(ids ...uuid.UUID) *TaskUpdate {
	tu.mutation.RemoveSubtaskIDs(ids...)
	return tu
}

// RemoveSubtasks removes "subtasks" edges to SubTask entities.
func (tu *TaskUpdate) RemoveSubtasks(s ...*SubTask) *TaskUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSubtaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Public(); ok {
		_spec.SetField(task.FieldPublic, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(task.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.DueAt(); ok {
		_spec.SetField(task.FieldDueAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.CreatedBy(); ok {
		_spec.SetField(task.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := tu.mutation.AssignedUserID(); ok {
		_spec.SetField(task.FieldAssignedUserID, field.TypeUUID, value)
	}
	if value, ok := tu.mutation.OrganizationID(); ok {
		_spec.SetField(task.FieldOrganizationID, field.TypeUUID, value)
	}
	if tu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.PatientTable,
			Columns: []string{task.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.PatientTable,
			Columns: []string{task.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSubtasksIDs(); len(nodes) > 0 && !tu.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetName sets the "name" field.
func (tuo *TaskUpdateOne) SetName(s string) *TaskUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetPublic sets the "public" field.
func (tuo *TaskUpdateOne) SetPublic(b bool) *TaskUpdateOne {
	tuo.mutation.SetPublic(b)
	return tuo
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePublic(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetPublic(*b)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(i int32) *TaskUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(i)
	return tuo
}

// AddStatus adds i to the "status" field.
func (tuo *TaskUpdateOne) AddStatus(i int32) *TaskUpdateOne {
	tuo.mutation.AddStatus(i)
	return tuo
}

// SetDueAt sets the "due_at" field.
func (tuo *TaskUpdateOne) SetDueAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDueAt(t)
	return tuo
}

// SetCreatedBy sets the "created_by" field.
func (tuo *TaskUpdateOne) SetCreatedBy(u uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetCreatedBy(u)
	return tuo
}

// SetAssignedUserID sets the "assigned_user_id" field.
func (tuo *TaskUpdateOne) SetAssignedUserID(u uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetAssignedUserID(u)
	return tuo
}

// SetOrganizationID sets the "organization_id" field.
func (tuo *TaskUpdateOne) SetOrganizationID(u uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetOrganizationID(u)
	return tuo
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (tuo *TaskUpdateOne) SetPatientID(id uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetPatientID(id)
	return tuo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePatientID(id *uuid.UUID) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetPatientID(*id)
	}
	return tuo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (tuo *TaskUpdateOne) SetPatient(p *Patient) *TaskUpdateOne {
	return tuo.SetPatientID(p.ID)
}

// AddSubtaskIDs adds the "subtasks" edge to the SubTask entity by IDs.
func (tuo *TaskUpdateOne) AddSubtaskIDs(ids ...uuid.UUID) *TaskUpdateOne {
	tuo.mutation.AddSubtaskIDs(ids...)
	return tuo
}

// AddSubtasks adds the "subtasks" edges to the SubTask entity.
func (tuo *TaskUpdateOne) AddSubtasks(s ...*SubTask) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSubtaskIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (tuo *TaskUpdateOne) ClearPatient() *TaskUpdateOne {
	tuo.mutation.ClearPatient()
	return tuo
}

// ClearSubtasks clears all "subtasks" edges to the SubTask entity.
func (tuo *TaskUpdateOne) ClearSubtasks() *TaskUpdateOne {
	tuo.mutation.ClearSubtasks()
	return tuo
}

// RemoveSubtaskIDs removes the "subtasks" edge to SubTask entities by IDs.
func (tuo *TaskUpdateOne) RemoveSubtaskIDs(ids ...uuid.UUID) *TaskUpdateOne {
	tuo.mutation.RemoveSubtaskIDs(ids...)
	return tuo
}

// RemoveSubtasks removes "subtasks" edges to SubTask entities.
func (tuo *TaskUpdateOne) RemoveSubtasks(s ...*SubTask) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSubtaskIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Public(); ok {
		_spec.SetField(task.FieldPublic, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(task.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.DueAt(); ok {
		_spec.SetField(task.FieldDueAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.CreatedBy(); ok {
		_spec.SetField(task.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := tuo.mutation.AssignedUserID(); ok {
		_spec.SetField(task.FieldAssignedUserID, field.TypeUUID, value)
	}
	if value, ok := tuo.mutation.OrganizationID(); ok {
		_spec.SetField(task.FieldOrganizationID, field.TypeUUID, value)
	}
	if tuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.PatientTable,
			Columns: []string{task.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.PatientTable,
			Columns: []string{task.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSubtasksIDs(); len(nodes) > 0 && !tuo.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
