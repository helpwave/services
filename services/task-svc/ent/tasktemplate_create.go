// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"task-svc/ent/tasktemplate"
	"task-svc/ent/tasktemplatesubtask"
	"task-svc/ent/ward"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TaskTemplateCreate is the builder for creating a TaskTemplate entity.
type TaskTemplateCreate struct {
	config
	mutation *TaskTemplateMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ttc *TaskTemplateCreate) SetName(s string) *TaskTemplateCreate {
	ttc.mutation.SetName(s)
	return ttc
}

// SetDescription sets the "description" field.
func (ttc *TaskTemplateCreate) SetDescription(s string) *TaskTemplateCreate {
	ttc.mutation.SetDescription(s)
	return ttc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttc *TaskTemplateCreate) SetNillableDescription(s *string) *TaskTemplateCreate {
	if s != nil {
		ttc.SetDescription(*s)
	}
	return ttc
}

// SetCreatedBy sets the "created_by" field.
func (ttc *TaskTemplateCreate) SetCreatedBy(u uuid.UUID) *TaskTemplateCreate {
	ttc.mutation.SetCreatedBy(u)
	return ttc
}

// SetOrganizationID sets the "organization_id" field.
func (ttc *TaskTemplateCreate) SetOrganizationID(u uuid.UUID) *TaskTemplateCreate {
	ttc.mutation.SetOrganizationID(u)
	return ttc
}

// SetID sets the "id" field.
func (ttc *TaskTemplateCreate) SetID(u uuid.UUID) *TaskTemplateCreate {
	ttc.mutation.SetID(u)
	return ttc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttc *TaskTemplateCreate) SetNillableID(u *uuid.UUID) *TaskTemplateCreate {
	if u != nil {
		ttc.SetID(*u)
	}
	return ttc
}

// SetWardID sets the "ward" edge to the Ward entity by ID.
func (ttc *TaskTemplateCreate) SetWardID(id uuid.UUID) *TaskTemplateCreate {
	ttc.mutation.SetWardID(id)
	return ttc
}

// SetNillableWardID sets the "ward" edge to the Ward entity by ID if the given value is not nil.
func (ttc *TaskTemplateCreate) SetNillableWardID(id *uuid.UUID) *TaskTemplateCreate {
	if id != nil {
		ttc = ttc.SetWardID(*id)
	}
	return ttc
}

// SetWard sets the "ward" edge to the Ward entity.
func (ttc *TaskTemplateCreate) SetWard(w *Ward) *TaskTemplateCreate {
	return ttc.SetWardID(w.ID)
}

// AddSubtaskIDs adds the "subtasks" edge to the TaskTemplateSubTask entity by IDs.
func (ttc *TaskTemplateCreate) AddSubtaskIDs(ids ...uuid.UUID) *TaskTemplateCreate {
	ttc.mutation.AddSubtaskIDs(ids...)
	return ttc
}

// AddSubtasks adds the "subtasks" edges to the TaskTemplateSubTask entity.
func (ttc *TaskTemplateCreate) AddSubtasks(t ...*TaskTemplateSubTask) *TaskTemplateCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddSubtaskIDs(ids...)
}

// Mutation returns the TaskTemplateMutation object of the builder.
func (ttc *TaskTemplateCreate) Mutation() *TaskTemplateMutation {
	return ttc.mutation
}

// Save creates the TaskTemplate in the database.
func (ttc *TaskTemplateCreate) Save(ctx context.Context) (*TaskTemplate, error) {
	ttc.defaults()
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TaskTemplateCreate) SaveX(ctx context.Context) *TaskTemplate {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TaskTemplateCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TaskTemplateCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttc *TaskTemplateCreate) defaults() {
	if _, ok := ttc.mutation.Description(); !ok {
		v := tasktemplate.DefaultDescription
		ttc.mutation.SetDescription(v)
	}
	if _, ok := ttc.mutation.ID(); !ok {
		v := tasktemplate.DefaultID()
		ttc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TaskTemplateCreate) check() error {
	if _, ok := ttc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TaskTemplate.name"`)}
	}
	if _, ok := ttc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "TaskTemplate.description"`)}
	}
	if _, ok := ttc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "TaskTemplate.created_by"`)}
	}
	if _, ok := ttc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "TaskTemplate.organization_id"`)}
	}
	return nil
}

func (ttc *TaskTemplateCreate) sqlSave(ctx context.Context) (*TaskTemplate, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TaskTemplateCreate) createSpec() (*TaskTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskTemplate{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(tasktemplate.Table, sqlgraph.NewFieldSpec(tasktemplate.FieldID, field.TypeUUID))
	)
	if id, ok := ttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ttc.mutation.Name(); ok {
		_spec.SetField(tasktemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ttc.mutation.Description(); ok {
		_spec.SetField(tasktemplate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ttc.mutation.CreatedBy(); ok {
		_spec.SetField(tasktemplate.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := ttc.mutation.OrganizationID(); ok {
		_spec.SetField(tasktemplate.FieldOrganizationID, field.TypeUUID, value)
		_node.OrganizationID = value
	}
	if nodes := ttc.mutation.WardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktemplate.WardTable,
			Columns: []string{tasktemplate.WardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ward.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ward_task_templates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.SubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktemplate.SubtasksTable,
			Columns: []string{tasktemplate.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskTemplateCreateBulk is the builder for creating many TaskTemplate entities in bulk.
type TaskTemplateCreateBulk struct {
	config
	err      error
	builders []*TaskTemplateCreate
}

// Save creates the TaskTemplate entities in the database.
func (ttcb *TaskTemplateCreateBulk) Save(ctx context.Context) ([]*TaskTemplate, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TaskTemplate, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TaskTemplateCreateBulk) SaveX(ctx context.Context) []*TaskTemplate {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TaskTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TaskTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
