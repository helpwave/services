// Code generated by ent, DO NOT EDIT.

package subtask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the subtask type in the database.
	Label = "sub_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDone holds the string denoting the done field in the database.
	FieldDone = "done"
	// FieldCreationDate holds the string denoting the creation_date field in the database.
	FieldCreationDate = "creation_date"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// Table holds the table name of the subtask in the database.
	Table = "sub_tasks"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "sub_tasks"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_subtasks"
)

// Columns holds all SQL columns for subtask fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDone,
	FieldCreationDate,
	FieldCreatedBy,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sub_tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"task_subtasks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDone holds the default value on creation for the "done" field.
	DefaultDone bool
	// DefaultCreationDate holds the default value on creation for the "creation_date" field.
	DefaultCreationDate func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SubTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDone orders the results by the done field.
func ByDone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDone, opts...).ToFunc()
}

// ByCreationDate orders the results by the creation_date field.
func ByCreationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreationDate, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}
