// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"task-svc/ent/bed"
	"task-svc/ent/patient"
	"task-svc/ent/predicate"
	"task-svc/ent/task"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PatientUpdate is the builder for updating Patient entities.
type PatientUpdate struct {
	config
	hooks    []Hook
	mutation *PatientMutation
}

// Where appends a list predicates to the PatientUpdate builder.
func (pu *PatientUpdate) Where(ps ...predicate.Patient) *PatientUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetHumanReadableIdentifier sets the "human_readable_identifier" field.
func (pu *PatientUpdate) SetHumanReadableIdentifier(s string) *PatientUpdate {
	pu.mutation.SetHumanReadableIdentifier(s)
	return pu
}

// SetNotes sets the "notes" field.
func (pu *PatientUpdate) SetNotes(s string) *PatientUpdate {
	pu.mutation.SetNotes(s)
	return pu
}

// SetIsDischarged sets the "is_discharged" field.
func (pu *PatientUpdate) SetIsDischarged(b bool) *PatientUpdate {
	pu.mutation.SetIsDischarged(b)
	return pu
}

// SetOrganizationID sets the "organization_id" field.
func (pu *PatientUpdate) SetOrganizationID(u uuid.UUID) *PatientUpdate {
	pu.mutation.SetOrganizationID(u)
	return pu
}

// SetBedID sets the "bed" edge to the Bed entity by ID.
func (pu *PatientUpdate) SetBedID(id uuid.UUID) *PatientUpdate {
	pu.mutation.SetBedID(id)
	return pu
}

// SetNillableBedID sets the "bed" edge to the Bed entity by ID if the given value is not nil.
func (pu *PatientUpdate) SetNillableBedID(id *uuid.UUID) *PatientUpdate {
	if id != nil {
		pu = pu.SetBedID(*id)
	}
	return pu
}

// SetBed sets the "bed" edge to the Bed entity.
func (pu *PatientUpdate) SetBed(b *Bed) *PatientUpdate {
	return pu.SetBedID(b.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pu *PatientUpdate) AddTaskIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.AddTaskIDs(ids...)
	return pu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pu *PatientUpdate) AddTasks(t ...*Task) *PatientUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTaskIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pu *PatientUpdate) Mutation() *PatientMutation {
	return pu.mutation
}

// ClearBed clears the "bed" edge to the Bed entity.
func (pu *PatientUpdate) ClearBed() *PatientUpdate {
	pu.mutation.ClearBed()
	return pu
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (pu *PatientUpdate) ClearTasks() *PatientUpdate {
	pu.mutation.ClearTasks()
	return pu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (pu *PatientUpdate) RemoveTaskIDs(ids ...uuid.UUID) *PatientUpdate {
	pu.mutation.RemoveTaskIDs(ids...)
	return pu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (pu *PatientUpdate) RemoveTasks(t ...*Task) *PatientUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PatientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PatientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.HumanReadableIdentifier(); ok {
		_spec.SetField(patient.FieldHumanReadableIdentifier, field.TypeString, value)
	}
	if value, ok := pu.mutation.Notes(); ok {
		_spec.SetField(patient.FieldNotes, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsDischarged(); ok {
		_spec.SetField(patient.FieldIsDischarged, field.TypeBool, value)
	}
	if value, ok := pu.mutation.OrganizationID(); ok {
		_spec.SetField(patient.FieldOrganizationID, field.TypeUUID, value)
	}
	if pu.mutation.BedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   patient.BedTable,
			Columns: []string{patient.BedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   patient.BedTable,
			Columns: []string{patient.BedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TasksTable,
			Columns: []string{patient.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !pu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TasksTable,
			Columns: []string{patient.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TasksTable,
			Columns: []string{patient.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PatientUpdateOne is the builder for updating a single Patient entity.
type PatientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PatientMutation
}

// SetHumanReadableIdentifier sets the "human_readable_identifier" field.
func (puo *PatientUpdateOne) SetHumanReadableIdentifier(s string) *PatientUpdateOne {
	puo.mutation.SetHumanReadableIdentifier(s)
	return puo
}

// SetNotes sets the "notes" field.
func (puo *PatientUpdateOne) SetNotes(s string) *PatientUpdateOne {
	puo.mutation.SetNotes(s)
	return puo
}

// SetIsDischarged sets the "is_discharged" field.
func (puo *PatientUpdateOne) SetIsDischarged(b bool) *PatientUpdateOne {
	puo.mutation.SetIsDischarged(b)
	return puo
}

// SetOrganizationID sets the "organization_id" field.
func (puo *PatientUpdateOne) SetOrganizationID(u uuid.UUID) *PatientUpdateOne {
	puo.mutation.SetOrganizationID(u)
	return puo
}

// SetBedID sets the "bed" edge to the Bed entity by ID.
func (puo *PatientUpdateOne) SetBedID(id uuid.UUID) *PatientUpdateOne {
	puo.mutation.SetBedID(id)
	return puo
}

// SetNillableBedID sets the "bed" edge to the Bed entity by ID if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableBedID(id *uuid.UUID) *PatientUpdateOne {
	if id != nil {
		puo = puo.SetBedID(*id)
	}
	return puo
}

// SetBed sets the "bed" edge to the Bed entity.
func (puo *PatientUpdateOne) SetBed(b *Bed) *PatientUpdateOne {
	return puo.SetBedID(b.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (puo *PatientUpdateOne) AddTaskIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.AddTaskIDs(ids...)
	return puo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (puo *PatientUpdateOne) AddTasks(t ...*Task) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTaskIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (puo *PatientUpdateOne) Mutation() *PatientMutation {
	return puo.mutation
}

// ClearBed clears the "bed" edge to the Bed entity.
func (puo *PatientUpdateOne) ClearBed() *PatientUpdateOne {
	puo.mutation.ClearBed()
	return puo
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (puo *PatientUpdateOne) ClearTasks() *PatientUpdateOne {
	puo.mutation.ClearTasks()
	return puo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (puo *PatientUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *PatientUpdateOne {
	puo.mutation.RemoveTaskIDs(ids...)
	return puo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (puo *PatientUpdateOne) RemoveTasks(t ...*Task) *PatientUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the PatientUpdate builder.
func (puo *PatientUpdateOne) Where(ps ...predicate.Patient) *PatientUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PatientUpdateOne) Select(field string, fields ...string) *PatientUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Patient entity.
func (puo *PatientUpdateOne) Save(ctx context.Context) (*Patient, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientUpdateOne) SaveX(ctx context.Context) *Patient {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PatientUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PatientUpdateOne) sqlSave(ctx context.Context) (_node *Patient, err error) {
	_spec := sqlgraph.NewUpdateSpec(patient.Table, patient.Columns, sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Patient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, patient.FieldID)
		for _, f := range fields {
			if !patient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != patient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.HumanReadableIdentifier(); ok {
		_spec.SetField(patient.FieldHumanReadableIdentifier, field.TypeString, value)
	}
	if value, ok := puo.mutation.Notes(); ok {
		_spec.SetField(patient.FieldNotes, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsDischarged(); ok {
		_spec.SetField(patient.FieldIsDischarged, field.TypeBool, value)
	}
	if value, ok := puo.mutation.OrganizationID(); ok {
		_spec.SetField(patient.FieldOrganizationID, field.TypeUUID, value)
	}
	if puo.mutation.BedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   patient.BedTable,
			Columns: []string{patient.BedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   patient.BedTable,
			Columns: []string{patient.BedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TasksTable,
			Columns: []string{patient.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !puo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TasksTable,
			Columns: []string{patient.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TasksTable,
			Columns: []string{patient.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Patient{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
