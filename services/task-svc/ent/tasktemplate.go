// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"task-svc/ent/tasktemplate"
	"task-svc/ent/ward"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TaskTemplate is the model entity for the TaskTemplate schema.
type TaskTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organization_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskTemplateQuery when eager-loading is set.
	Edges               TaskTemplateEdges `json:"edges"`
	ward_task_templates *uuid.UUID
	selectValues        sql.SelectValues
}

// TaskTemplateEdges holds the relations/edges for other nodes in the graph.
type TaskTemplateEdges struct {
	// Ward holds the value of the ward edge.
	Ward *Ward `json:"ward,omitempty"`
	// Subtasks holds the value of the subtasks edge.
	Subtasks []*TaskTemplateSubTask `json:"subtasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WardOrErr returns the Ward value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskTemplateEdges) WardOrErr() (*Ward, error) {
	if e.loadedTypes[0] {
		if e.Ward == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ward.Label}
		}
		return e.Ward, nil
	}
	return nil, &NotLoadedError{edge: "ward"}
}

// SubtasksOrErr returns the Subtasks value or an error if the edge
// was not loaded in eager-loading.
func (e TaskTemplateEdges) SubtasksOrErr() ([]*TaskTemplateSubTask, error) {
	if e.loadedTypes[1] {
		return e.Subtasks, nil
	}
	return nil, &NotLoadedError{edge: "subtasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tasktemplate.FieldName, tasktemplate.FieldDescription:
			values[i] = new(sql.NullString)
		case tasktemplate.FieldID, tasktemplate.FieldCreatedBy, tasktemplate.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		case tasktemplate.ForeignKeys[0]: // ward_task_templates
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskTemplate fields.
func (tt *TaskTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tasktemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tt.ID = *value
			}
		case tasktemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tt.Name = value.String
			}
		case tasktemplate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tt.Description = value.String
			}
		case tasktemplate.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				tt.CreatedBy = *value
			}
		case tasktemplate.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				tt.OrganizationID = *value
			}
		case tasktemplate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field ward_task_templates", values[i])
			} else if value.Valid {
				tt.ward_task_templates = new(uuid.UUID)
				*tt.ward_task_templates = *value.S.(*uuid.UUID)
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskTemplate.
// This includes values selected through modifiers, order, etc.
func (tt *TaskTemplate) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// QueryWard queries the "ward" edge of the TaskTemplate entity.
func (tt *TaskTemplate) QueryWard() *WardQuery {
	return NewTaskTemplateClient(tt.config).QueryWard(tt)
}

// QuerySubtasks queries the "subtasks" edge of the TaskTemplate entity.
func (tt *TaskTemplate) QuerySubtasks() *TaskTemplateSubTaskQuery {
	return NewTaskTemplateClient(tt.config).QuerySubtasks(tt)
}

// Update returns a builder for updating this TaskTemplate.
// Note that you need to call TaskTemplate.Unwrap() before calling this method if this TaskTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TaskTemplate) Update() *TaskTemplateUpdateOne {
	return NewTaskTemplateClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the TaskTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TaskTemplate) Unwrap() *TaskTemplate {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskTemplate is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TaskTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("TaskTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tt.ID))
	builder.WriteString("name=")
	builder.WriteString(tt.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tt.Description)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", tt.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.OrganizationID))
	builder.WriteByte(')')
	return builder.String()
}

// TaskTemplates is a parsable slice of TaskTemplate.
type TaskTemplates []*TaskTemplate
