// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"task-svc/ent/predicate"
	"task-svc/ent/tasktemplate"
	"task-svc/ent/tasktemplatesubtask"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TaskTemplateSubTaskQuery is the builder for querying TaskTemplateSubTask entities.
type TaskTemplateSubTaskQuery struct {
	config
	ctx              *QueryContext
	order            []tasktemplatesubtask.OrderOption
	inters           []Interceptor
	predicates       []predicate.TaskTemplateSubTask
	withTaskTemplate *TaskTemplateQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TaskTemplateSubTaskQuery builder.
func (ttstq *TaskTemplateSubTaskQuery) Where(ps ...predicate.TaskTemplateSubTask) *TaskTemplateSubTaskQuery {
	ttstq.predicates = append(ttstq.predicates, ps...)
	return ttstq
}

// Limit the number of records to be returned by this query.
func (ttstq *TaskTemplateSubTaskQuery) Limit(limit int) *TaskTemplateSubTaskQuery {
	ttstq.ctx.Limit = &limit
	return ttstq
}

// Offset to start from.
func (ttstq *TaskTemplateSubTaskQuery) Offset(offset int) *TaskTemplateSubTaskQuery {
	ttstq.ctx.Offset = &offset
	return ttstq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ttstq *TaskTemplateSubTaskQuery) Unique(unique bool) *TaskTemplateSubTaskQuery {
	ttstq.ctx.Unique = &unique
	return ttstq
}

// Order specifies how the records should be ordered.
func (ttstq *TaskTemplateSubTaskQuery) Order(o ...tasktemplatesubtask.OrderOption) *TaskTemplateSubTaskQuery {
	ttstq.order = append(ttstq.order, o...)
	return ttstq
}

// QueryTaskTemplate chains the current query on the "task_template" edge.
func (ttstq *TaskTemplateSubTaskQuery) QueryTaskTemplate() *TaskTemplateQuery {
	query := (&TaskTemplateClient{config: ttstq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttstq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttstq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tasktemplatesubtask.Table, tasktemplatesubtask.FieldID, selector),
			sqlgraph.To(tasktemplate.Table, tasktemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tasktemplatesubtask.TaskTemplateTable, tasktemplatesubtask.TaskTemplateColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttstq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TaskTemplateSubTask entity from the query.
// Returns a *NotFoundError when no TaskTemplateSubTask was found.
func (ttstq *TaskTemplateSubTaskQuery) First(ctx context.Context) (*TaskTemplateSubTask, error) {
	nodes, err := ttstq.Limit(1).All(setContextOp(ctx, ttstq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tasktemplatesubtask.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ttstq *TaskTemplateSubTaskQuery) FirstX(ctx context.Context) *TaskTemplateSubTask {
	node, err := ttstq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TaskTemplateSubTask ID from the query.
// Returns a *NotFoundError when no TaskTemplateSubTask ID was found.
func (ttstq *TaskTemplateSubTaskQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ttstq.Limit(1).IDs(setContextOp(ctx, ttstq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tasktemplatesubtask.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ttstq *TaskTemplateSubTaskQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ttstq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TaskTemplateSubTask entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TaskTemplateSubTask entity is found.
// Returns a *NotFoundError when no TaskTemplateSubTask entities are found.
func (ttstq *TaskTemplateSubTaskQuery) Only(ctx context.Context) (*TaskTemplateSubTask, error) {
	nodes, err := ttstq.Limit(2).All(setContextOp(ctx, ttstq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tasktemplatesubtask.Label}
	default:
		return nil, &NotSingularError{tasktemplatesubtask.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ttstq *TaskTemplateSubTaskQuery) OnlyX(ctx context.Context) *TaskTemplateSubTask {
	node, err := ttstq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TaskTemplateSubTask ID in the query.
// Returns a *NotSingularError when more than one TaskTemplateSubTask ID is found.
// Returns a *NotFoundError when no entities are found.
func (ttstq *TaskTemplateSubTaskQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ttstq.Limit(2).IDs(setContextOp(ctx, ttstq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tasktemplatesubtask.Label}
	default:
		err = &NotSingularError{tasktemplatesubtask.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ttstq *TaskTemplateSubTaskQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ttstq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TaskTemplateSubTasks.
func (ttstq *TaskTemplateSubTaskQuery) All(ctx context.Context) ([]*TaskTemplateSubTask, error) {
	ctx = setContextOp(ctx, ttstq.ctx, "All")
	if err := ttstq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TaskTemplateSubTask, *TaskTemplateSubTaskQuery]()
	return withInterceptors[[]*TaskTemplateSubTask](ctx, ttstq, qr, ttstq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ttstq *TaskTemplateSubTaskQuery) AllX(ctx context.Context) []*TaskTemplateSubTask {
	nodes, err := ttstq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TaskTemplateSubTask IDs.
func (ttstq *TaskTemplateSubTaskQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ttstq.ctx.Unique == nil && ttstq.path != nil {
		ttstq.Unique(true)
	}
	ctx = setContextOp(ctx, ttstq.ctx, "IDs")
	if err = ttstq.Select(tasktemplatesubtask.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ttstq *TaskTemplateSubTaskQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ttstq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ttstq *TaskTemplateSubTaskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ttstq.ctx, "Count")
	if err := ttstq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ttstq, querierCount[*TaskTemplateSubTaskQuery](), ttstq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ttstq *TaskTemplateSubTaskQuery) CountX(ctx context.Context) int {
	count, err := ttstq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ttstq *TaskTemplateSubTaskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ttstq.ctx, "Exist")
	switch _, err := ttstq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ttstq *TaskTemplateSubTaskQuery) ExistX(ctx context.Context) bool {
	exist, err := ttstq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TaskTemplateSubTaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ttstq *TaskTemplateSubTaskQuery) Clone() *TaskTemplateSubTaskQuery {
	if ttstq == nil {
		return nil
	}
	return &TaskTemplateSubTaskQuery{
		config:           ttstq.config,
		ctx:              ttstq.ctx.Clone(),
		order:            append([]tasktemplatesubtask.OrderOption{}, ttstq.order...),
		inters:           append([]Interceptor{}, ttstq.inters...),
		predicates:       append([]predicate.TaskTemplateSubTask{}, ttstq.predicates...),
		withTaskTemplate: ttstq.withTaskTemplate.Clone(),
		// clone intermediate query.
		sql:  ttstq.sql.Clone(),
		path: ttstq.path,
	}
}

// WithTaskTemplate tells the query-builder to eager-load the nodes that are connected to
// the "task_template" edge. The optional arguments are used to configure the query builder of the edge.
func (ttstq *TaskTemplateSubTaskQuery) WithTaskTemplate(opts ...func(*TaskTemplateQuery)) *TaskTemplateSubTaskQuery {
	query := (&TaskTemplateClient{config: ttstq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttstq.withTaskTemplate = query
	return ttstq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TaskTemplateSubTask.Query().
//		GroupBy(tasktemplatesubtask.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ttstq *TaskTemplateSubTaskQuery) GroupBy(field string, fields ...string) *TaskTemplateSubTaskGroupBy {
	ttstq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TaskTemplateSubTaskGroupBy{build: ttstq}
	grbuild.flds = &ttstq.ctx.Fields
	grbuild.label = tasktemplatesubtask.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.TaskTemplateSubTask.Query().
//		Select(tasktemplatesubtask.FieldName).
//		Scan(ctx, &v)
func (ttstq *TaskTemplateSubTaskQuery) Select(fields ...string) *TaskTemplateSubTaskSelect {
	ttstq.ctx.Fields = append(ttstq.ctx.Fields, fields...)
	sbuild := &TaskTemplateSubTaskSelect{TaskTemplateSubTaskQuery: ttstq}
	sbuild.label = tasktemplatesubtask.Label
	sbuild.flds, sbuild.scan = &ttstq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TaskTemplateSubTaskSelect configured with the given aggregations.
func (ttstq *TaskTemplateSubTaskQuery) Aggregate(fns ...AggregateFunc) *TaskTemplateSubTaskSelect {
	return ttstq.Select().Aggregate(fns...)
}

func (ttstq *TaskTemplateSubTaskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ttstq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ttstq); err != nil {
				return err
			}
		}
	}
	for _, f := range ttstq.ctx.Fields {
		if !tasktemplatesubtask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ttstq.path != nil {
		prev, err := ttstq.path(ctx)
		if err != nil {
			return err
		}
		ttstq.sql = prev
	}
	return nil
}

func (ttstq *TaskTemplateSubTaskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TaskTemplateSubTask, error) {
	var (
		nodes       = []*TaskTemplateSubTask{}
		withFKs     = ttstq.withFKs
		_spec       = ttstq.querySpec()
		loadedTypes = [1]bool{
			ttstq.withTaskTemplate != nil,
		}
	)
	if ttstq.withTaskTemplate != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, tasktemplatesubtask.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TaskTemplateSubTask).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TaskTemplateSubTask{config: ttstq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ttstq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ttstq.withTaskTemplate; query != nil {
		if err := ttstq.loadTaskTemplate(ctx, query, nodes, nil,
			func(n *TaskTemplateSubTask, e *TaskTemplate) { n.Edges.TaskTemplate = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ttstq *TaskTemplateSubTaskQuery) loadTaskTemplate(ctx context.Context, query *TaskTemplateQuery, nodes []*TaskTemplateSubTask, init func(*TaskTemplateSubTask), assign func(*TaskTemplateSubTask, *TaskTemplate)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TaskTemplateSubTask)
	for i := range nodes {
		if nodes[i].task_template_subtasks == nil {
			continue
		}
		fk := *nodes[i].task_template_subtasks
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tasktemplate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "task_template_subtasks" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ttstq *TaskTemplateSubTaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ttstq.querySpec()
	_spec.Node.Columns = ttstq.ctx.Fields
	if len(ttstq.ctx.Fields) > 0 {
		_spec.Unique = ttstq.ctx.Unique != nil && *ttstq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ttstq.driver, _spec)
}

func (ttstq *TaskTemplateSubTaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tasktemplatesubtask.Table, tasktemplatesubtask.Columns, sqlgraph.NewFieldSpec(tasktemplatesubtask.FieldID, field.TypeUUID))
	_spec.From = ttstq.sql
	if unique := ttstq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ttstq.path != nil {
		_spec.Unique = true
	}
	if fields := ttstq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasktemplatesubtask.FieldID)
		for i := range fields {
			if fields[i] != tasktemplatesubtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ttstq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ttstq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ttstq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ttstq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ttstq *TaskTemplateSubTaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ttstq.driver.Dialect())
	t1 := builder.Table(tasktemplatesubtask.Table)
	columns := ttstq.ctx.Fields
	if len(columns) == 0 {
		columns = tasktemplatesubtask.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ttstq.sql != nil {
		selector = ttstq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ttstq.ctx.Unique != nil && *ttstq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ttstq.predicates {
		p(selector)
	}
	for _, p := range ttstq.order {
		p(selector)
	}
	if offset := ttstq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ttstq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TaskTemplateSubTaskGroupBy is the group-by builder for TaskTemplateSubTask entities.
type TaskTemplateSubTaskGroupBy struct {
	selector
	build *TaskTemplateSubTaskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ttstgb *TaskTemplateSubTaskGroupBy) Aggregate(fns ...AggregateFunc) *TaskTemplateSubTaskGroupBy {
	ttstgb.fns = append(ttstgb.fns, fns...)
	return ttstgb
}

// Scan applies the selector query and scans the result into the given value.
func (ttstgb *TaskTemplateSubTaskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ttstgb.build.ctx, "GroupBy")
	if err := ttstgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TaskTemplateSubTaskQuery, *TaskTemplateSubTaskGroupBy](ctx, ttstgb.build, ttstgb, ttstgb.build.inters, v)
}

func (ttstgb *TaskTemplateSubTaskGroupBy) sqlScan(ctx context.Context, root *TaskTemplateSubTaskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ttstgb.fns))
	for _, fn := range ttstgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ttstgb.flds)+len(ttstgb.fns))
		for _, f := range *ttstgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ttstgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttstgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TaskTemplateSubTaskSelect is the builder for selecting fields of TaskTemplateSubTask entities.
type TaskTemplateSubTaskSelect struct {
	*TaskTemplateSubTaskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ttsts *TaskTemplateSubTaskSelect) Aggregate(fns ...AggregateFunc) *TaskTemplateSubTaskSelect {
	ttsts.fns = append(ttsts.fns, fns...)
	return ttsts
}

// Scan applies the selector query and scans the result into the given value.
func (ttsts *TaskTemplateSubTaskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ttsts.ctx, "Select")
	if err := ttsts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TaskTemplateSubTaskQuery, *TaskTemplateSubTaskSelect](ctx, ttsts.TaskTemplateSubTaskQuery, ttsts, ttsts.inters, v)
}

func (ttsts *TaskTemplateSubTaskSelect) sqlScan(ctx context.Context, root *TaskTemplateSubTaskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ttsts.fns))
	for _, fn := range ttsts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ttsts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttsts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
