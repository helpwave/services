// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"task-svc/ent/subtask"
	"task-svc/ent/task"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// SubTask is the model entity for the SubTask schema.
type SubTask struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Done holds the value of the "done" field.
	Done bool `json:"done,omitempty"`
	// CreationDate holds the value of the "creation_date" field.
	CreationDate time.Time `json:"creation_date,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubTaskQuery when eager-loading is set.
	Edges         SubTaskEdges `json:"edges"`
	task_subtasks *uuid.UUID
	selectValues  sql.SelectValues
}

// SubTaskEdges holds the relations/edges for other nodes in the graph.
type SubTaskEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubTaskEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subtask.FieldDone:
			values[i] = new(sql.NullBool)
		case subtask.FieldName:
			values[i] = new(sql.NullString)
		case subtask.FieldCreationDate:
			values[i] = new(sql.NullTime)
		case subtask.FieldID, subtask.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		case subtask.ForeignKeys[0]: // task_subtasks
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubTask fields.
func (st *SubTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subtask.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				st.ID = *value
			}
		case subtask.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				st.Name = value.String
			}
		case subtask.FieldDone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field done", values[i])
			} else if value.Valid {
				st.Done = value.Bool
			}
		case subtask.FieldCreationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field creation_date", values[i])
			} else if value.Valid {
				st.CreationDate = value.Time
			}
		case subtask.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				st.CreatedBy = *value
			}
		case subtask.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field task_subtasks", values[i])
			} else if value.Valid {
				st.task_subtasks = new(uuid.UUID)
				*st.task_subtasks = *value.S.(*uuid.UUID)
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubTask.
// This includes values selected through modifiers, order, etc.
func (st *SubTask) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the SubTask entity.
func (st *SubTask) QueryTask() *TaskQuery {
	return NewSubTaskClient(st.config).QueryTask(st)
}

// Update returns a builder for updating this SubTask.
// Note that you need to call SubTask.Unwrap() before calling this method if this SubTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SubTask) Update() *SubTaskUpdateOne {
	return NewSubTaskClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SubTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SubTask) Unwrap() *SubTask {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubTask is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SubTask) String() string {
	var builder strings.Builder
	builder.WriteString("SubTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("name=")
	builder.WriteString(st.Name)
	builder.WriteString(", ")
	builder.WriteString("done=")
	builder.WriteString(fmt.Sprintf("%v", st.Done))
	builder.WriteString(", ")
	builder.WriteString("creation_date=")
	builder.WriteString(st.CreationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", st.CreatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// SubTasks is a parsable slice of SubTask.
type SubTasks []*SubTask
