// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"task-svc/ent/bed"
	"task-svc/ent/patient"
	"task-svc/ent/room"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Bed is the model entity for the Bed schema.
type Bed struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organization_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BedQuery when eager-loading is set.
	Edges        BedEdges `json:"edges"`
	room_beds    *uuid.UUID
	selectValues sql.SelectValues
}

// BedEdges holds the relations/edges for other nodes in the graph.
type BedEdges struct {
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// Patient holds the value of the patient edge.
	Patient *Patient `json:"patient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BedEdges) RoomOrErr() (*Room, error) {
	if e.loadedTypes[0] {
		if e.Room == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BedEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bed) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bed.FieldName:
			values[i] = new(sql.NullString)
		case bed.FieldID, bed.FieldOrganizationID:
			values[i] = new(uuid.UUID)
		case bed.ForeignKeys[0]: // room_beds
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bed fields.
func (b *Bed) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bed.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case bed.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case bed.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				b.OrganizationID = *value
			}
		case bed.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field room_beds", values[i])
			} else if value.Valid {
				b.room_beds = new(uuid.UUID)
				*b.room_beds = *value.S.(*uuid.UUID)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bed.
// This includes values selected through modifiers, order, etc.
func (b *Bed) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryRoom queries the "room" edge of the Bed entity.
func (b *Bed) QueryRoom() *RoomQuery {
	return NewBedClient(b.config).QueryRoom(b)
}

// QueryPatient queries the "patient" edge of the Bed entity.
func (b *Bed) QueryPatient() *PatientQuery {
	return NewBedClient(b.config).QueryPatient(b)
}

// Update returns a builder for updating this Bed.
// Note that you need to call Bed.Unwrap() before calling this method if this Bed
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bed) Update() *BedUpdateOne {
	return NewBedClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bed) Unwrap() *Bed {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bed is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bed) String() string {
	var builder strings.Builder
	builder.WriteString("Bed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", b.OrganizationID))
	builder.WriteByte(')')
	return builder.String()
}

// Beds is a parsable slice of Bed.
type Beds []*Bed
