// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"task-svc/ent/bed"
	"task-svc/ent/patient"
	"task-svc/ent/predicate"
	"task-svc/ent/room"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BedUpdate is the builder for updating Bed entities.
type BedUpdate struct {
	config
	hooks    []Hook
	mutation *BedMutation
}

// Where appends a list predicates to the BedUpdate builder.
func (bu *BedUpdate) Where(ps ...predicate.Bed) *BedUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BedUpdate) SetName(s string) *BedUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetOrganizationID sets the "organization_id" field.
func (bu *BedUpdate) SetOrganizationID(u uuid.UUID) *BedUpdate {
	bu.mutation.SetOrganizationID(u)
	return bu
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (bu *BedUpdate) SetRoomID(id uuid.UUID) *BedUpdate {
	bu.mutation.SetRoomID(id)
	return bu
}

// SetRoom sets the "room" edge to the Room entity.
func (bu *BedUpdate) SetRoom(r *Room) *BedUpdate {
	return bu.SetRoomID(r.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (bu *BedUpdate) SetPatientID(id uuid.UUID) *BedUpdate {
	bu.mutation.SetPatientID(id)
	return bu
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (bu *BedUpdate) SetNillablePatientID(id *uuid.UUID) *BedUpdate {
	if id != nil {
		bu = bu.SetPatientID(*id)
	}
	return bu
}

// SetPatient sets the "patient" edge to the Patient entity.
func (bu *BedUpdate) SetPatient(p *Patient) *BedUpdate {
	return bu.SetPatientID(p.ID)
}

// Mutation returns the BedMutation object of the builder.
func (bu *BedUpdate) Mutation() *BedMutation {
	return bu.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (bu *BedUpdate) ClearRoom() *BedUpdate {
	bu.mutation.ClearRoom()
	return bu
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (bu *BedUpdate) ClearPatient() *BedUpdate {
	bu.mutation.ClearPatient()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BedUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BedUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BedUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BedUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BedUpdate) check() error {
	if _, ok := bu.mutation.RoomID(); bu.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Bed.room"`)
	}
	return nil
}

func (bu *BedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bed.Table, bed.Columns, sqlgraph.NewFieldSpec(bed.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(bed.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.OrganizationID(); ok {
		_spec.SetField(bed.FieldOrganizationID, field.TypeUUID, value)
	}
	if bu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bed.RoomTable,
			Columns: []string{bed.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bed.RoomTable,
			Columns: []string{bed.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bed.PatientTable,
			Columns: []string{bed.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bed.PatientTable,
			Columns: []string{bed.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BedUpdateOne is the builder for updating a single Bed entity.
type BedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BedMutation
}

// SetName sets the "name" field.
func (buo *BedUpdateOne) SetName(s string) *BedUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetOrganizationID sets the "organization_id" field.
func (buo *BedUpdateOne) SetOrganizationID(u uuid.UUID) *BedUpdateOne {
	buo.mutation.SetOrganizationID(u)
	return buo
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (buo *BedUpdateOne) SetRoomID(id uuid.UUID) *BedUpdateOne {
	buo.mutation.SetRoomID(id)
	return buo
}

// SetRoom sets the "room" edge to the Room entity.
func (buo *BedUpdateOne) SetRoom(r *Room) *BedUpdateOne {
	return buo.SetRoomID(r.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (buo *BedUpdateOne) SetPatientID(id uuid.UUID) *BedUpdateOne {
	buo.mutation.SetPatientID(id)
	return buo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (buo *BedUpdateOne) SetNillablePatientID(id *uuid.UUID) *BedUpdateOne {
	if id != nil {
		buo = buo.SetPatientID(*id)
	}
	return buo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (buo *BedUpdateOne) SetPatient(p *Patient) *BedUpdateOne {
	return buo.SetPatientID(p.ID)
}

// Mutation returns the BedMutation object of the builder.
func (buo *BedUpdateOne) Mutation() *BedMutation {
	return buo.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (buo *BedUpdateOne) ClearRoom() *BedUpdateOne {
	buo.mutation.ClearRoom()
	return buo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (buo *BedUpdateOne) ClearPatient() *BedUpdateOne {
	buo.mutation.ClearPatient()
	return buo
}

// Where appends a list predicates to the BedUpdate builder.
func (buo *BedUpdateOne) Where(ps ...predicate.Bed) *BedUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BedUpdateOne) Select(field string, fields ...string) *BedUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bed entity.
func (buo *BedUpdateOne) Save(ctx context.Context) (*Bed, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BedUpdateOne) SaveX(ctx context.Context) *Bed {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BedUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BedUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BedUpdateOne) check() error {
	if _, ok := buo.mutation.RoomID(); buo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Bed.room"`)
	}
	return nil
}

func (buo *BedUpdateOne) sqlSave(ctx context.Context) (_node *Bed, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bed.Table, bed.Columns, sqlgraph.NewFieldSpec(bed.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bed.FieldID)
		for _, f := range fields {
			if !bed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(bed.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.OrganizationID(); ok {
		_spec.SetField(bed.FieldOrganizationID, field.TypeUUID, value)
	}
	if buo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bed.RoomTable,
			Columns: []string{bed.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bed.RoomTable,
			Columns: []string{bed.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bed.PatientTable,
			Columns: []string{bed.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bed.PatientTable,
			Columns: []string{bed.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(patient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bed{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
