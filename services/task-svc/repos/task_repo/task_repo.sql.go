// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task_repo.sql

package task_repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSubTask = `-- name: CreateSubTask :one
INSERT INTO subtasks
	(task_id, name, done, created_by)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateSubTaskParams struct {
	TaskID    uuid.UUID
	Name      string
	Done      bool
	CreatedBy uuid.UUID
}

func (q *Queries) CreateSubTask(ctx context.Context, arg CreateSubTaskParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSubTask,
		arg.TaskID,
		arg.Name,
		arg.Done,
		arg.CreatedBy,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks
	(name, description, status, patient_id, public, organization_id, created_by, due_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type CreateTaskParams struct {
	Name           string
	Description    string
	Status         int32
	PatientID      uuid.UUID
	Public         bool
	OrganizationID uuid.UUID
	CreatedBy      uuid.UUID
	DueAt          pgtype.Timestamp
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.PatientID,
		arg.Public,
		arg.OrganizationID,
		arg.CreatedBy,
		arg.DueAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteSubTask = `-- name: DeleteSubTask :exec
DELETE FROM subtasks WHERE id = $1
`

func (q *Queries) DeleteSubTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubTask, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const existsTask = `-- name: ExistsTask :one
SELECT EXISTS (
    SELECT 1
    FROM tasks
    WHERE id = $1
    AND organization_id = $2
) task_exists
`

type ExistsTaskParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) ExistsTask(ctx context.Context, arg ExistsTaskParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsTask, arg.ID, arg.OrganizationID)
	var task_exists bool
	err := row.Scan(&task_exists)
	return task_exists, err
}

const getTaskWithSubTasksAndPatientName = `-- name: GetTaskWithSubTasksAndPatientName :many
SELECT
	tasks.id, tasks.name, tasks.description, tasks.status, tasks.assigned_user_id, tasks.patient_id, tasks.public, tasks.organization_id, tasks.created_by, tasks.due_at,
	subtasks.id as subtask_id,
	subtasks.done as subtask_done,
	subtasks.name as subtask_name,
	subtasks.created_by as subtask_created_by,
	patients.human_readable_identifier as patient_name
FROM tasks
JOIN patients ON patients.id = tasks.patient_id
LEFT JOIN subtasks ON subtasks.task_id = tasks.id
WHERE tasks.id = $1
ORDER BY subtasks.creation_date ASC
`

type GetTaskWithSubTasksAndPatientNameRow struct {
	Task             Task
	SubtaskID        uuid.NullUUID
	SubtaskDone      *bool
	SubtaskName      *string
	SubtaskCreatedBy uuid.NullUUID
	PatientName      string
}

func (q *Queries) GetTaskWithSubTasksAndPatientName(ctx context.Context, id uuid.UUID) ([]GetTaskWithSubTasksAndPatientNameRow, error) {
	rows, err := q.db.Query(ctx, getTaskWithSubTasksAndPatientName, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTaskWithSubTasksAndPatientNameRow{}
	for rows.Next() {
		var i GetTaskWithSubTasksAndPatientNameRow
		if err := rows.Scan(
			&i.Task.ID,
			&i.Task.Name,
			&i.Task.Description,
			&i.Task.Status,
			&i.Task.AssignedUserID,
			&i.Task.PatientID,
			&i.Task.Public,
			&i.Task.OrganizationID,
			&i.Task.CreatedBy,
			&i.Task.DueAt,
			&i.SubtaskID,
			&i.SubtaskDone,
			&i.SubtaskName,
			&i.SubtaskCreatedBy,
			&i.PatientName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksWithPatientsByAssignee = `-- name: GetTasksWithPatientsByAssignee :many
SELECT
	tasks.id, tasks.name, tasks.description, tasks.status, tasks.assigned_user_id, tasks.patient_id, tasks.public, tasks.organization_id, tasks.created_by, tasks.due_at,
	patients.id as patient_id,
	patients.human_readable_identifier as patient_name,
	subtasks.id as subtask_id,
	subtasks.name as subtask_name,
	subtasks.done as subtask_done,
	subtasks.created_by as subtask_created_by
FROM patients
JOIN tasks ON tasks.patient_id = patients.id
LEFT JOIN subtasks ON subtasks.task_id = tasks.id
WHERE tasks.assigned_user_id = $1
`

type GetTasksWithPatientsByAssigneeRow struct {
	Task             Task
	PatientID        uuid.UUID
	PatientName      string
	SubtaskID        uuid.NullUUID
	SubtaskName      *string
	SubtaskDone      *bool
	SubtaskCreatedBy uuid.NullUUID
}

func (q *Queries) GetTasksWithPatientsByAssignee(ctx context.Context, assignedUserID uuid.NullUUID) ([]GetTasksWithPatientsByAssigneeRow, error) {
	rows, err := q.db.Query(ctx, getTasksWithPatientsByAssignee, assignedUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTasksWithPatientsByAssigneeRow{}
	for rows.Next() {
		var i GetTasksWithPatientsByAssigneeRow
		if err := rows.Scan(
			&i.Task.ID,
			&i.Task.Name,
			&i.Task.Description,
			&i.Task.Status,
			&i.Task.AssignedUserID,
			&i.Task.PatientID,
			&i.Task.Public,
			&i.Task.OrganizationID,
			&i.Task.CreatedBy,
			&i.Task.DueAt,
			&i.PatientID,
			&i.PatientName,
			&i.SubtaskID,
			&i.SubtaskName,
			&i.SubtaskDone,
			&i.SubtaskCreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksWithSubTasksByPatient = `-- name: GetTasksWithSubTasksByPatient :many
SELECT
	tasks.id, tasks.name, tasks.description, tasks.status, tasks.assigned_user_id, tasks.patient_id, tasks.public, tasks.organization_id, tasks.created_by, tasks.due_at,
	subtasks.id as subtask_id,
	subtasks.name as subtask_name,
	subtasks.done as subtask_done,
	subtasks.created_by as subtask_created_by
FROM tasks
JOIN patients ON patients.id = tasks.patient_id
LEFT JOIN subtasks ON subtasks.task_id = tasks.id
WHERE tasks.patient_id = $1
AND tasks.organization_id = $2
`

type GetTasksWithSubTasksByPatientParams struct {
	PatientID      uuid.UUID
	OrganizationID uuid.UUID
}

type GetTasksWithSubTasksByPatientRow struct {
	Task             Task
	SubtaskID        uuid.NullUUID
	SubtaskName      *string
	SubtaskDone      *bool
	SubtaskCreatedBy uuid.NullUUID
}

func (q *Queries) GetTasksWithSubTasksByPatient(ctx context.Context, arg GetTasksWithSubTasksByPatientParams) ([]GetTasksWithSubTasksByPatientRow, error) {
	rows, err := q.db.Query(ctx, getTasksWithSubTasksByPatient, arg.PatientID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTasksWithSubTasksByPatientRow{}
	for rows.Next() {
		var i GetTasksWithSubTasksByPatientRow
		if err := rows.Scan(
			&i.Task.ID,
			&i.Task.Name,
			&i.Task.Description,
			&i.Task.Status,
			&i.Task.AssignedUserID,
			&i.Task.PatientID,
			&i.Task.Public,
			&i.Task.OrganizationID,
			&i.Task.CreatedBy,
			&i.Task.DueAt,
			&i.SubtaskID,
			&i.SubtaskName,
			&i.SubtaskDone,
			&i.SubtaskCreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubTask = `-- name: UpdateSubTask :exec
UPDATE subtasks
SET	name = coalesce($1, name),
	done = coalesce($2, done)
WHERE id = $3
`

type UpdateSubTaskParams struct {
	Name *string
	Done *bool
	ID   uuid.UUID
}

func (q *Queries) UpdateSubTask(ctx context.Context, arg UpdateSubTaskParams) error {
	_, err := q.db.Exec(ctx, updateSubTask, arg.Name, arg.Done, arg.ID)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET	name = coalesce($1, name),
	description = coalesce($2, description),
	due_at = coalesce($3, due_at),
	public = coalesce($4, public),
	status = coalesce($5, status)
WHERE id = $6
`

type UpdateTaskParams struct {
	Name        *string
	Description *string
	DueAt       pgtype.Timestamp
	Public      *bool
	Status      *int32
	ID          uuid.UUID
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.Name,
		arg.Description,
		arg.DueAt,
		arg.Public,
		arg.Status,
		arg.ID,
	)
	return err
}

const updateTaskUser = `-- name: UpdateTaskUser :exec
UPDATE tasks
SET assigned_user_id = $1
WHERE id = $2
`

type UpdateTaskUserParams struct {
	AssignedUserID uuid.NullUUID
	ID             uuid.UUID
}

func (q *Queries) UpdateTaskUser(ctx context.Context, arg UpdateTaskUserParams) error {
	_, err := q.db.Exec(ctx, updateTaskUser, arg.AssignedUserID, arg.ID)
	return err
}
