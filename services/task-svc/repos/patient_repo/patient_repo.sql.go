// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: patient_repo.sql

package patient_repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (organization_id, human_readable_identifier, notes)
	VALUES ($1, $2, $3)
	RETURNING id
`

type CreatePatientParams struct {
	OrganizationID          uuid.UUID
	HumanReadableIdentifier string
	Notes                   string
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createPatient, arg.OrganizationID, arg.HumanReadableIdentifier, arg.Notes)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deletePatient = `-- name: DeletePatient :exec
DELETE FROM patients WHERE id = $1
`

func (q *Queries) DeletePatient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePatient, id)
	return err
}

const dischargePatient = `-- name: DischargePatient :exec
UPDATE patients
SET
	bed_id = NULL,
	is_discharged = 1
WHERE id = $1
`

func (q *Queries) DischargePatient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, dischargePatient, id)
	return err
}

const existsPatientInOrganization = `-- name: ExistsPatientInOrganization :one
SELECT EXISTS (
    SELECT 1
    FROM patients
    WHERE id = $1
    AND organization_id = $2
) patient_exists
`

type ExistsPatientInOrganizationParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) ExistsPatientInOrganization(ctx context.Context, arg ExistsPatientInOrganizationParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsPatientInOrganization, arg.ID, arg.OrganizationID)
	var patient_exists bool
	err := row.Scan(&patient_exists)
	return patient_exists, err
}

const getDischargedPatientsWithTasksForOrganization = `-- name: GetDischargedPatientsWithTasksForOrganization :many
SELECT
	patients.id as patient_id,
	patients.id, patients.human_readable_identifier, patients.organization_id, patients.notes, patients.bed_id, patients.is_discharged, patients.created_at, patients.updated_at,
	tasks.id as task_id,
	tasks.id, tasks.name, tasks.description, tasks.status, tasks.assigned_user_id, tasks.patient_id, tasks.public, tasks.organization_id, tasks.created_by, tasks.due_at,
	subtasks.id as subtask_id,
	subtasks.id, subtasks.task_id, subtasks.name, subtasks.done, subtasks.created_by, subtasks.creation_date
	FROM patients
	LEFT JOIN tasks ON tasks.patient_id = patients.id
	LEFT JOIN subtasks ON subtasks.task_id = tasks.id
	WHERE patients.organization_id = $1
	AND NOT patients.is_discharged = 0
`

type GetDischargedPatientsWithTasksForOrganizationRow struct {
	PatientID               uuid.UUID
	ID                      uuid.UUID
	HumanReadableIdentifier string
	OrganizationID          uuid.UUID
	Notes                   string
	BedID                   uuid.NullUUID
	IsDischarged            int32
	CreatedAt               pgtype.Timestamp
	UpdatedAt               pgtype.Timestamp
	TaskID                  uuid.NullUUID
	ID_2                    uuid.NullUUID
	Name                    *string
	Description             *string
	Status                  *int32
	AssignedUserID          uuid.NullUUID
	PatientID_2             uuid.NullUUID
	Public                  *bool
	OrganizationID_2        uuid.NullUUID
	CreatedBy               uuid.NullUUID
	DueAt                   pgtype.Timestamp
	SubtaskID               uuid.NullUUID
	ID_3                    uuid.NullUUID
	TaskID_2                uuid.NullUUID
	Name_2                  *string
	Done                    *bool
	CreatedBy_2             uuid.NullUUID
	CreationDate            pgtype.Timestamp
}

func (q *Queries) GetDischargedPatientsWithTasksForOrganization(ctx context.Context, organizationID uuid.UUID) ([]GetDischargedPatientsWithTasksForOrganizationRow, error) {
	rows, err := q.db.Query(ctx, getDischargedPatientsWithTasksForOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDischargedPatientsWithTasksForOrganizationRow{}
	for rows.Next() {
		var i GetDischargedPatientsWithTasksForOrganizationRow
		if err := rows.Scan(
			&i.PatientID,
			&i.ID,
			&i.HumanReadableIdentifier,
			&i.OrganizationID,
			&i.Notes,
			&i.BedID,
			&i.IsDischarged,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TaskID,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.AssignedUserID,
			&i.PatientID_2,
			&i.Public,
			&i.OrganizationID_2,
			&i.CreatedBy,
			&i.DueAt,
			&i.SubtaskID,
			&i.ID_3,
			&i.TaskID_2,
			&i.Name_2,
			&i.Done,
			&i.CreatedBy_2,
			&i.CreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastUpdatedPatientIDsForOrganization = `-- name: GetLastUpdatedPatientIDsForOrganization :many
SELECT id
	FROM patients
	WHERE organization_id = $1
	ORDER BY updated_at DESC
	LIMIT 4
`

func (q *Queries) GetLastUpdatedPatientIDsForOrganization(ctx context.Context, organizationID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getLastUpdatedPatientIDsForOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatientHumanReadableIdentifier = `-- name: GetPatientHumanReadableIdentifier :one
SELECT human_readable_identifier FROM patients
	WHERE id = $1
	LIMIT 1
`

func (q *Queries) GetPatientHumanReadableIdentifier(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getPatientHumanReadableIdentifier, id)
	var human_readable_identifier string
	err := row.Scan(&human_readable_identifier)
	return human_readable_identifier, err
}

const getPatientWithBedAndRoom = `-- name: GetPatientWithBedAndRoom :one
SELECT
	patients.id, patients.human_readable_identifier, patients.organization_id, patients.notes, patients.bed_id, patients.is_discharged, patients.created_at, patients.updated_at,
	beds.name as bed_name,
	rooms.id as room_id, rooms.name as room_name, rooms.ward_id as ward_id
	FROM patients
	LEFT JOIN beds ON patients.bed_id = beds.id
	LEFT JOIN rooms ON beds.room_id = rooms.id
	WHERE patients.id = $1
	LIMIT 1
`

type GetPatientWithBedAndRoomRow struct {
	ID                      uuid.UUID
	HumanReadableIdentifier string
	OrganizationID          uuid.UUID
	Notes                   string
	BedID                   uuid.NullUUID
	IsDischarged            int32
	CreatedAt               pgtype.Timestamp
	UpdatedAt               pgtype.Timestamp
	BedName                 *string
	RoomID                  uuid.NullUUID
	RoomName                *string
	WardID                  uuid.NullUUID
}

func (q *Queries) GetPatientWithBedAndRoom(ctx context.Context, patientID uuid.UUID) (GetPatientWithBedAndRoomRow, error) {
	row := q.db.QueryRow(ctx, getPatientWithBedAndRoom, patientID)
	var i GetPatientWithBedAndRoomRow
	err := row.Scan(
		&i.ID,
		&i.HumanReadableIdentifier,
		&i.OrganizationID,
		&i.Notes,
		&i.BedID,
		&i.IsDischarged,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BedName,
		&i.RoomID,
		&i.RoomName,
		&i.WardID,
	)
	return i, err
}

const getPatientsByWardForOrganization = `-- name: GetPatientsByWardForOrganization :many
SELECT
	patients.id, patients.human_readable_identifier, patients.organization_id, patients.notes, patients.bed_id, patients.is_discharged, patients.created_at, patients.updated_at
	FROM patients
	JOIN beds ON patients.bed_id = beds.id
	JOIN rooms ON beds.room_id = rooms.id
	WHERE rooms.ward_id = $1
	AND rooms.organization_id = $2
`

type GetPatientsByWardForOrganizationParams struct {
	WardID         uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) GetPatientsByWardForOrganization(ctx context.Context, arg GetPatientsByWardForOrganizationParams) ([]Patient, error) {
	rows, err := q.db.Query(ctx, getPatientsByWardForOrganization, arg.WardID, arg.OrganizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Patient{}
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.HumanReadableIdentifier,
			&i.OrganizationID,
			&i.Notes,
			&i.BedID,
			&i.IsDischarged,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatientsWithBedAndRoom = `-- name: GetPatientsWithBedAndRoom :many
SELECT
	patients.id, patients.human_readable_identifier, patients.organization_id, patients.notes, patients.bed_id, patients.is_discharged, patients.created_at, patients.updated_at,
	beds.name as bed_name,
	rooms.id as room_id, rooms.name as room_name, rooms.ward_id as ward_id
	FROM patients
	LEFT JOIN beds ON patients.bed_id = beds.id
	LEFT JOIN rooms ON beds.room_id = rooms.id
	WHERE patients.id IN ($1)
	ORDER BY patients.updated_at DESC
`

type GetPatientsWithBedAndRoomRow struct {
	ID                      uuid.UUID
	HumanReadableIdentifier string
	OrganizationID          uuid.UUID
	Notes                   string
	BedID                   uuid.NullUUID
	IsDischarged            int32
	CreatedAt               pgtype.Timestamp
	UpdatedAt               pgtype.Timestamp
	BedName                 *string
	RoomID                  uuid.NullUUID
	RoomName                *string
	WardID                  uuid.NullUUID
}

func (q *Queries) GetPatientsWithBedAndRoom(ctx context.Context, patientIds []uuid.UUID) ([]GetPatientsWithBedAndRoomRow, error) {
	rows, err := q.db.Query(ctx, getPatientsWithBedAndRoom, patientIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPatientsWithBedAndRoomRow{}
	for rows.Next() {
		var i GetPatientsWithBedAndRoomRow
		if err := rows.Scan(
			&i.ID,
			&i.HumanReadableIdentifier,
			&i.OrganizationID,
			&i.Notes,
			&i.BedID,
			&i.IsDischarged,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BedName,
			&i.RoomID,
			&i.RoomName,
			&i.WardID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnassignedPatientsWithTasksForOrganization = `-- name: GetUnassignedPatientsWithTasksForOrganization :many
SELECT
	patients.id as patient_id,
	patients.id, patients.human_readable_identifier, patients.organization_id, patients.notes, patients.bed_id, patients.is_discharged, patients.created_at, patients.updated_at,
	tasks.id as task_id,
	tasks.id, tasks.name, tasks.description, tasks.status, tasks.assigned_user_id, tasks.patient_id, tasks.public, tasks.organization_id, tasks.created_by, tasks.due_at,
	subtasks.id as subtask_id,
	subtasks.id, subtasks.task_id, subtasks.name, subtasks.done, subtasks.created_by, subtasks.creation_date
	FROM patients
	LEFT JOIN tasks ON tasks.patient_id = patients.id
	LEFT JOIN subtasks ON subtasks.task_id = tasks.id
	WHERE patients.organization_id = $1
	AND patients.bed_id IS NULL
	AND patients.is_discharged = 0
`

type GetUnassignedPatientsWithTasksForOrganizationRow struct {
	PatientID               uuid.UUID
	ID                      uuid.UUID
	HumanReadableIdentifier string
	OrganizationID          uuid.UUID
	Notes                   string
	BedID                   uuid.NullUUID
	IsDischarged            int32
	CreatedAt               pgtype.Timestamp
	UpdatedAt               pgtype.Timestamp
	TaskID                  uuid.NullUUID
	ID_2                    uuid.NullUUID
	Name                    *string
	Description             *string
	Status                  *int32
	AssignedUserID          uuid.NullUUID
	PatientID_2             uuid.NullUUID
	Public                  *bool
	OrganizationID_2        uuid.NullUUID
	CreatedBy               uuid.NullUUID
	DueAt                   pgtype.Timestamp
	SubtaskID               uuid.NullUUID
	ID_3                    uuid.NullUUID
	TaskID_2                uuid.NullUUID
	Name_2                  *string
	Done                    *bool
	CreatedBy_2             uuid.NullUUID
	CreationDate            pgtype.Timestamp
}

func (q *Queries) GetUnassignedPatientsWithTasksForOrganization(ctx context.Context, organizationID uuid.UUID) ([]GetUnassignedPatientsWithTasksForOrganizationRow, error) {
	rows, err := q.db.Query(ctx, getUnassignedPatientsWithTasksForOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUnassignedPatientsWithTasksForOrganizationRow{}
	for rows.Next() {
		var i GetUnassignedPatientsWithTasksForOrganizationRow
		if err := rows.Scan(
			&i.PatientID,
			&i.ID,
			&i.HumanReadableIdentifier,
			&i.OrganizationID,
			&i.Notes,
			&i.BedID,
			&i.IsDischarged,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TaskID,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.AssignedUserID,
			&i.PatientID_2,
			&i.Public,
			&i.OrganizationID_2,
			&i.CreatedBy,
			&i.DueAt,
			&i.SubtaskID,
			&i.ID_3,
			&i.TaskID_2,
			&i.Name_2,
			&i.Done,
			&i.CreatedBy_2,
			&i.CreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readmitPatient = `-- name: ReadmitPatient :exec
UPDATE patients
SET	is_discharged = 0
WHERE id = $1
`

func (q *Queries) ReadmitPatient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, readmitPatient, id)
	return err
}

const unassignBedFromPatient = `-- name: UnassignBedFromPatient :exec
UPDATE patients	SET	bed_id = NULL WHERE id = $1
`

func (q *Queries) UnassignBedFromPatient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, unassignBedFromPatient, id)
	return err
}

const updatePatient = `-- name: UpdatePatient :exec
UPDATE patients
SET
	human_readable_identifier = coalesce($1, human_readable_identifier),
	notes = coalesce($2, notes),
	bed_id = coalesce($3, bed_id)
WHERE id = $4
`

type UpdatePatientParams struct {
	HumanReadableIdentifier *string
	Notes                   *string
	BedID                   uuid.NullUUID
	ID                      uuid.UUID
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) error {
	_, err := q.db.Exec(ctx, updatePatient,
		arg.HumanReadableIdentifier,
		arg.Notes,
		arg.BedID,
		arg.ID,
	)
	return err
}
