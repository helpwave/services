// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createBed = `-- name: CreateBed :one
INSERT INTO beds (room_id, organization_id, name) VALUES ($1, $2, $3) RETURNING id, room_id, organization_id, name
`

type CreateBedParams struct {
	RoomID         uuid.UUID
	OrganizationID uuid.UUID
	Name           string
}

func (q *Queries) CreateBed(ctx context.Context, arg CreateBedParams) (Bed, error) {
	row := q.db.QueryRow(ctx, createBed, arg.RoomID, arg.OrganizationID, arg.Name)
	var i Bed
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.OrganizationID,
		&i.Name,
	)
	return i, err
}

const getBedById = `-- name: GetBedById :one
SELECT id, room_id, organization_id, name FROM beds WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBedById(ctx context.Context, id uuid.UUID) (Bed, error) {
	row := q.db.QueryRow(ctx, getBedById, id)
	var i Bed
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.OrganizationID,
		&i.Name,
	)
	return i, err
}

const getBedsByRoomForOrganization = `-- name: GetBedsByRoomForOrganization :many
SELECT id, room_id, organization_id, name FROM beds
	WHERE organization_id = $1 AND room_id = $2
	ORDER BY name ASC
`

type GetBedsByRoomForOrganizationParams struct {
	OrganizationID uuid.UUID
	RoomID         uuid.UUID
}

func (q *Queries) GetBedsByRoomForOrganization(ctx context.Context, arg GetBedsByRoomForOrganizationParams) ([]Bed, error) {
	rows, err := q.db.Query(ctx, getBedsByRoomForOrganization, arg.OrganizationID, arg.RoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bed
	for rows.Next() {
		var i Bed
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.OrganizationID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
