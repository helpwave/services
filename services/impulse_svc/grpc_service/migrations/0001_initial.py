# Generated by Django 4.2.5 on 2023-09-22 14:51

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=200)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('type', models.CharField(choices=[('daily', 'Täglich'), ('quest', 'Mission')], max_length=10)),
                ('category', models.CharField(choices=[('food', 'Ernährung'), ('fitness', 'Fitness'), ('mental', 'Mentale Gesundheit')], max_length=10)),
                ('points', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50)),
                ('sex', models.CharField(max_length=1)),
                ('age', models.IntegerField()),
                ('pal', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('done', models.BooleanField()),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grpc_service.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grpc_service.user')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='challenges',
            field=models.ManyToManyField(through='grpc_service.UserChallenge', to='grpc_service.challenge'),
        ),
    ]
