
syntax = "proto3";

option go_package = "user-svc/api";

//
// Create User
//

message CreateUserRequest {
	string email = 1; // @gotags: validate:"required,email"
	string nickname = 2; // @gotags: validate:"required"
	string fullName = 3; // @gotags: validate:"required"
	string password = 4; // @gotags: validate:"required"
}

message CreateUserResponse {
	string userID = 1;
}

//
// Update User
//

message UpdateUserRequest {
	// if userId is missing the requesting user's id is used
	optional string userId = 1; // @gotags: validate:"omitempty,uuid4"
	optional string fullName = 2;
	optional string nickname = 3;
	optional string email = 4; // @gotags: validate:"omitempty,email"
	optional string password = 5;
}

message UpdateUserResponse {}

//
// Create Organization
//

message CreateOrgRequest {
	string longName = 1; // @gotags: validate:"required,gte=4,lte=64"
	string shortName = 2; // @gotags: validate:"omitempty,gte=2,lte=16"
	string contactEmail = 3; // @gotags: validate:"required,email"
}

message CreateOrgResponse {
	string id = 1;
	string longName = 2;
	string shortName = 3;
	string contactEmail = 4;
	string avatarUrl = 5;
	bool isPersonal = 6;
}

//
// UserService
//

service UserService {
	rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {}
	rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {}
	
	rpc CreateOrganization (CreateOrgRequest) returns (CreateOrgResponse) {}
}
