// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user_repo.sql

package user_repo

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, nickname, name, avatar_url) VALUES ($1, $2, $3, $4, $5) RETURNING id, email, nickname, name, avatar_url
`

type CreateUserParams struct {
	ID        uuid.UUID
	Email     string
	Nickname  string
	Name      string
	AvatarUrl *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Nickname,
		arg.Name,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nickname,
		&i.Name,
		&i.AvatarUrl,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, nickname, name, avatar_url FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nickname,
		&i.Name,
		&i.AvatarUrl,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
	email=coalesce($1, email),
	nickname=coalesce($2, nickname),
	name=coalesce($3, name),
	avatar_url=coalesce($4, avatar_url)
WHERE id = $5
`

type UpdateUserParams struct {
	Email     *string
	Nickname  *string
	Name      *string
	AvatarUrl *string
	ID        uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.Nickname,
		arg.Name,
		arg.AvatarUrl,
		arg.ID,
	)
	return err
}
