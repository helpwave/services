// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.2
// source: emergency-room-svc.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmergencyRoomServiceClient is the client API for EmergencyRoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmergencyRoomServiceClient interface {
	CreateER(ctx context.Context, in *CreateERRequest, opts ...grpc.CallOption) (*GetSingleERResponse, error)
	GetER(ctx context.Context, in *GetSingleERRequest, opts ...grpc.CallOption) (*GetSingleERResponse, error)
	GetERs(ctx context.Context, in *GetERsRequest, opts ...grpc.CallOption) (*GetERsResponse, error)
	UpdateER(ctx context.Context, in *UpdateERRequest, opts ...grpc.CallOption) (*UpdateERResponse, error)
	AddDepartmentsToER(ctx context.Context, in *AddDepartmentsToERRequest, opts ...grpc.CallOption) (*AddDepartmentsToERResponse, error)
	RemoveDepartmentsFromER(ctx context.Context, in *RemoveDepartmentsFromERRequest, opts ...grpc.CallOption) (*RemoveDepartmentsFromERResponse, error)
	DeleteER(ctx context.Context, in *DeleteERRequest, opts ...grpc.CallOption) (*DeleteERResponse, error)
}

type emergencyRoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmergencyRoomServiceClient(cc grpc.ClientConnInterface) EmergencyRoomServiceClient {
	return &emergencyRoomServiceClient{cc}
}

func (c *emergencyRoomServiceClient) CreateER(ctx context.Context, in *CreateERRequest, opts ...grpc.CallOption) (*GetSingleERResponse, error) {
	out := new(GetSingleERResponse)
	err := c.cc.Invoke(ctx, "/EmergencyRoomService/CreateER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyRoomServiceClient) GetER(ctx context.Context, in *GetSingleERRequest, opts ...grpc.CallOption) (*GetSingleERResponse, error) {
	out := new(GetSingleERResponse)
	err := c.cc.Invoke(ctx, "/EmergencyRoomService/GetER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyRoomServiceClient) GetERs(ctx context.Context, in *GetERsRequest, opts ...grpc.CallOption) (*GetERsResponse, error) {
	out := new(GetERsResponse)
	err := c.cc.Invoke(ctx, "/EmergencyRoomService/GetERs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyRoomServiceClient) UpdateER(ctx context.Context, in *UpdateERRequest, opts ...grpc.CallOption) (*UpdateERResponse, error) {
	out := new(UpdateERResponse)
	err := c.cc.Invoke(ctx, "/EmergencyRoomService/UpdateER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyRoomServiceClient) AddDepartmentsToER(ctx context.Context, in *AddDepartmentsToERRequest, opts ...grpc.CallOption) (*AddDepartmentsToERResponse, error) {
	out := new(AddDepartmentsToERResponse)
	err := c.cc.Invoke(ctx, "/EmergencyRoomService/AddDepartmentsToER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyRoomServiceClient) RemoveDepartmentsFromER(ctx context.Context, in *RemoveDepartmentsFromERRequest, opts ...grpc.CallOption) (*RemoveDepartmentsFromERResponse, error) {
	out := new(RemoveDepartmentsFromERResponse)
	err := c.cc.Invoke(ctx, "/EmergencyRoomService/RemoveDepartmentsFromER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyRoomServiceClient) DeleteER(ctx context.Context, in *DeleteERRequest, opts ...grpc.CallOption) (*DeleteERResponse, error) {
	out := new(DeleteERResponse)
	err := c.cc.Invoke(ctx, "/EmergencyRoomService/DeleteER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmergencyRoomServiceServer is the server API for EmergencyRoomService service.
// All implementations must embed UnimplementedEmergencyRoomServiceServer
// for forward compatibility
type EmergencyRoomServiceServer interface {
	CreateER(context.Context, *CreateERRequest) (*GetSingleERResponse, error)
	GetER(context.Context, *GetSingleERRequest) (*GetSingleERResponse, error)
	GetERs(context.Context, *GetERsRequest) (*GetERsResponse, error)
	UpdateER(context.Context, *UpdateERRequest) (*UpdateERResponse, error)
	AddDepartmentsToER(context.Context, *AddDepartmentsToERRequest) (*AddDepartmentsToERResponse, error)
	RemoveDepartmentsFromER(context.Context, *RemoveDepartmentsFromERRequest) (*RemoveDepartmentsFromERResponse, error)
	DeleteER(context.Context, *DeleteERRequest) (*DeleteERResponse, error)
	mustEmbedUnimplementedEmergencyRoomServiceServer()
}

// UnimplementedEmergencyRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmergencyRoomServiceServer struct {
}

func (UnimplementedEmergencyRoomServiceServer) CreateER(context.Context, *CreateERRequest) (*GetSingleERResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateER not implemented")
}
func (UnimplementedEmergencyRoomServiceServer) GetER(context.Context, *GetSingleERRequest) (*GetSingleERResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetER not implemented")
}
func (UnimplementedEmergencyRoomServiceServer) GetERs(context.Context, *GetERsRequest) (*GetERsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERs not implemented")
}
func (UnimplementedEmergencyRoomServiceServer) UpdateER(context.Context, *UpdateERRequest) (*UpdateERResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateER not implemented")
}
func (UnimplementedEmergencyRoomServiceServer) AddDepartmentsToER(context.Context, *AddDepartmentsToERRequest) (*AddDepartmentsToERResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDepartmentsToER not implemented")
}
func (UnimplementedEmergencyRoomServiceServer) RemoveDepartmentsFromER(context.Context, *RemoveDepartmentsFromERRequest) (*RemoveDepartmentsFromERResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDepartmentsFromER not implemented")
}
func (UnimplementedEmergencyRoomServiceServer) DeleteER(context.Context, *DeleteERRequest) (*DeleteERResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteER not implemented")
}
func (UnimplementedEmergencyRoomServiceServer) mustEmbedUnimplementedEmergencyRoomServiceServer() {}

// UnsafeEmergencyRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmergencyRoomServiceServer will
// result in compilation errors.
type UnsafeEmergencyRoomServiceServer interface {
	mustEmbedUnimplementedEmergencyRoomServiceServer()
}

func RegisterEmergencyRoomServiceServer(s grpc.ServiceRegistrar, srv EmergencyRoomServiceServer) {
	s.RegisterService(&EmergencyRoomService_ServiceDesc, srv)
}

func _EmergencyRoomService_CreateER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateERRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyRoomServiceServer).CreateER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmergencyRoomService/CreateER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyRoomServiceServer).CreateER(ctx, req.(*CreateERRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyRoomService_GetER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleERRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyRoomServiceServer).GetER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmergencyRoomService/GetER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyRoomServiceServer).GetER(ctx, req.(*GetSingleERRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyRoomService_GetERs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyRoomServiceServer).GetERs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmergencyRoomService/GetERs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyRoomServiceServer).GetERs(ctx, req.(*GetERsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyRoomService_UpdateER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateERRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyRoomServiceServer).UpdateER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmergencyRoomService/UpdateER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyRoomServiceServer).UpdateER(ctx, req.(*UpdateERRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyRoomService_AddDepartmentsToER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDepartmentsToERRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyRoomServiceServer).AddDepartmentsToER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmergencyRoomService/AddDepartmentsToER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyRoomServiceServer).AddDepartmentsToER(ctx, req.(*AddDepartmentsToERRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyRoomService_RemoveDepartmentsFromER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDepartmentsFromERRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyRoomServiceServer).RemoveDepartmentsFromER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmergencyRoomService/RemoveDepartmentsFromER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyRoomServiceServer).RemoveDepartmentsFromER(ctx, req.(*RemoveDepartmentsFromERRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyRoomService_DeleteER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteERRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyRoomServiceServer).DeleteER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmergencyRoomService/DeleteER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyRoomServiceServer).DeleteER(ctx, req.(*DeleteERRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmergencyRoomService_ServiceDesc is the grpc.ServiceDesc for EmergencyRoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmergencyRoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmergencyRoomService",
	HandlerType: (*EmergencyRoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateER",
			Handler:    _EmergencyRoomService_CreateER_Handler,
		},
		{
			MethodName: "GetER",
			Handler:    _EmergencyRoomService_GetER_Handler,
		},
		{
			MethodName: "GetERs",
			Handler:    _EmergencyRoomService_GetERs_Handler,
		},
		{
			MethodName: "UpdateER",
			Handler:    _EmergencyRoomService_UpdateER_Handler,
		},
		{
			MethodName: "AddDepartmentsToER",
			Handler:    _EmergencyRoomService_AddDepartmentsToER_Handler,
		},
		{
			MethodName: "RemoveDepartmentsFromER",
			Handler:    _EmergencyRoomService_RemoveDepartmentsFromER_Handler,
		},
		{
			MethodName: "DeleteER",
			Handler:    _EmergencyRoomService_DeleteER_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emergency-room-svc.proto",
}
