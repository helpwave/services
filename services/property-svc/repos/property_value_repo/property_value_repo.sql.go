// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: property_value_repo.sql

package property_value_repo

import (
	"context"

	"github.com/google/uuid"
)

const createPropertyValue = `-- name: CreatePropertyValue :exec
INSERT INTO property_values
	(id, property_id, subject_id, text_value, number_value, bool_value, date_value, date_time_value, select_value)
VALUES (
        $1,
        $2,
        $3,
        coalesce($4, NULL),
        coalesce($5, NULL),
        coalesce($6, NULL),
        coalesce($7, NULL),
        coalesce($8, NULL),
        coalesce($9, NULL)
)
`

type CreatePropertyValueParams struct {
	ID            uuid.UUID
	PropertyID    uuid.UUID
	SubjectID     uuid.UUID
	TextValue     interface{}
	NumberValue   interface{}
	BoolValue     interface{}
	DateValue     interface{}
	DateTimeValue interface{}
	SelectValue   interface{}
}

func (q *Queries) CreatePropertyValue(ctx context.Context, arg CreatePropertyValueParams) error {
	_, err := q.db.Exec(ctx, createPropertyValue,
		arg.ID,
		arg.PropertyID,
		arg.SubjectID,
		arg.TextValue,
		arg.NumberValue,
		arg.BoolValue,
		arg.DateValue,
		arg.DateTimeValue,
		arg.SelectValue,
	)
	return err
}

const existsPropertyValue = `-- name: ExistsPropertyValue :one
SELECT EXISTS (
	SELECT 1
	FROM property_values
	WHERE subject_id = $1 AND property_id = $2
) as value_already_exists
`

type ExistsPropertyValueParams struct {
	SubjectID  uuid.UUID
	PropertyID uuid.UUID
}

func (q *Queries) ExistsPropertyValue(ctx context.Context, arg ExistsPropertyValueParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsPropertyValue, arg.SubjectID, arg.PropertyID)
	var value_already_exists bool
	err := row.Scan(&value_already_exists)
	return value_already_exists, err
}
