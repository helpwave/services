// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: property_value_repo.sql

package property_value_repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPropertyValue = `-- name: CreatePropertyValue :exec
INSERT INTO property_values
	(id, property_id, subject_id, text_value, number_value, bool_value, date_value, date_time_value, select_value)
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9
)
`

type CreatePropertyValueParams struct {
	ID            uuid.UUID
	PropertyID    uuid.UUID
	SubjectID     uuid.UUID
	TextValue     *string
	NumberValue   *float64
	BoolValue     *bool
	DateValue     pgtype.Date
	DateTimeValue pgtype.Timestamp
	SelectValue   uuid.NullUUID
}

func (q *Queries) CreatePropertyValue(ctx context.Context, arg CreatePropertyValueParams) error {
	_, err := q.db.Exec(ctx, createPropertyValue,
		arg.ID,
		arg.PropertyID,
		arg.SubjectID,
		arg.TextValue,
		arg.NumberValue,
		arg.BoolValue,
		arg.DateValue,
		arg.DateTimeValue,
		arg.SelectValue,
	)
	return err
}

const getPropertyValueByID = `-- name: GetPropertyValueByID :one
SELECT id, property_id, subject_id, text_value, number_value, bool_value, date_value, date_time_value, select_value FROM property_values WHERE id = $1
`

func (q *Queries) GetPropertyValueByID(ctx context.Context, id uuid.UUID) (PropertyValue, error) {
	row := q.db.QueryRow(ctx, getPropertyValueByID, id)
	var i PropertyValue
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.SubjectID,
		&i.TextValue,
		&i.NumberValue,
		&i.BoolValue,
		&i.DateValue,
		&i.DateTimeValue,
		&i.SelectValue,
	)
	return i, err
}

const getPropertyValueBySubjectIDAndPropertyID = `-- name: GetPropertyValueBySubjectIDAndPropertyID :one
SELECT id
FROM property_values
WHERE subject_id = $1 AND property_id = $2
`

type GetPropertyValueBySubjectIDAndPropertyIDParams struct {
	SubjectID  uuid.UUID
	PropertyID uuid.UUID
}

func (q *Queries) GetPropertyValueBySubjectIDAndPropertyID(ctx context.Context, arg GetPropertyValueBySubjectIDAndPropertyIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getPropertyValueBySubjectIDAndPropertyID, arg.SubjectID, arg.PropertyID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPropertyValuesWithPropertyBySubjectID = `-- name: GetPropertyValuesWithPropertyBySubjectID :many
SELECT
	properties.id, properties.subject_type, properties.field_type, properties.name, properties.description, properties.is_archived, properties.set_id, properties.select_data_id,
	property_values.id, property_values.property_id, property_values.subject_id, property_values.text_value, property_values.number_value, property_values.bool_value, property_values.date_value, property_values.date_time_value, property_values.select_value
FROM property_values
	LEFT JOIN properties ON property_values.property_id = properties.id
WHERE subject_id = $1
`

type GetPropertyValuesWithPropertyBySubjectIDRow struct {
	Property      Property
	PropertyValue PropertyValue
}

func (q *Queries) GetPropertyValuesWithPropertyBySubjectID(ctx context.Context, subjectID uuid.UUID) ([]GetPropertyValuesWithPropertyBySubjectIDRow, error) {
	rows, err := q.db.Query(ctx, getPropertyValuesWithPropertyBySubjectID, subjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPropertyValuesWithPropertyBySubjectIDRow{}
	for rows.Next() {
		var i GetPropertyValuesWithPropertyBySubjectIDRow
		if err := rows.Scan(
			&i.Property.ID,
			&i.Property.SubjectType,
			&i.Property.FieldType,
			&i.Property.Name,
			&i.Property.Description,
			&i.Property.IsArchived,
			&i.Property.SetID,
			&i.Property.SelectDataID,
			&i.PropertyValue.ID,
			&i.PropertyValue.PropertyID,
			&i.PropertyValue.SubjectID,
			&i.PropertyValue.TextValue,
			&i.PropertyValue.NumberValue,
			&i.PropertyValue.BoolValue,
			&i.PropertyValue.DateValue,
			&i.PropertyValue.DateTimeValue,
			&i.PropertyValue.SelectValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePropertyValueByID = `-- name: UpdatePropertyValueByID :exec
UPDATE property_values
SET text_value = $2,
	number_value = $3,
	bool_value = $4,
	date_value = $5,
	date_time_value = $6,
	select_value = $7
WHERE id = $1
`

type UpdatePropertyValueByIDParams struct {
	ID            uuid.UUID
	TextValue     *string
	NumberValue   *float64
	BoolValue     *bool
	DateValue     pgtype.Date
	DateTimeValue pgtype.Timestamp
	SelectValue   uuid.NullUUID
}

func (q *Queries) UpdatePropertyValueByID(ctx context.Context, arg UpdatePropertyValueByIDParams) error {
	_, err := q.db.Exec(ctx, updatePropertyValueByID,
		arg.ID,
		arg.TextValue,
		arg.NumberValue,
		arg.BoolValue,
		arg.DateValue,
		arg.DateTimeValue,
		arg.SelectValue,
	)
	return err
}
