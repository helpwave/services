// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: task_views_repo.sql

package task_views_repo

import (
	"context"

	"github.com/google/uuid"
)

const createTaskRule = `-- name: CreateTaskRule :exec
INSERT INTO task_property_view_rules (rule_id, ward_id, task_id)
VALUES ($1, $2, $3)
`

type CreateTaskRuleParams struct {
	RuleID uuid.UUID
	WardID uuid.NullUUID
	TaskID uuid.NullUUID
}

func (q *Queries) CreateTaskRule(ctx context.Context, arg CreateTaskRuleParams) error {
	_, err := q.db.Exec(ctx, createTaskRule, arg.RuleID, arg.WardID, arg.TaskID)
	return err
}

const getTaskRuleIdUsingExactMatchers = `-- name: GetTaskRuleIdUsingExactMatchers :one


SELECT
	rules.rule_id as rule_id
	FROM task_property_view_rules as rules
	WHERE
		(rules.ward_id = $1 OR (rules.ward_id IS NULL AND $1 IS NULL))
		AND ((rules.task_id = $2) OR (rules.task_id IS NULL AND $2 IS NULL))
`

type GetTaskRuleIdUsingExactMatchersParams struct {
	WardID uuid.NullUUID
	TaskID uuid.NullUUID
}

// NOTE: views_repo.CreateRule MUST be invoked with the same id in the same transaction!!
func (q *Queries) GetTaskRuleIdUsingExactMatchers(ctx context.Context, arg GetTaskRuleIdUsingExactMatchersParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getTaskRuleIdUsingExactMatchers, arg.WardID, arg.TaskID)
	var rule_id uuid.UUID
	err := row.Scan(&rule_id)
	return rule_id, err
}
