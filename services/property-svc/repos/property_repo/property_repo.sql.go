// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: property_repo.sql

package property_repo

import (
	"context"

	"github.com/google/uuid"
)

const createProperty = `-- name: CreateProperty :exec
INSERT INTO properties
	(id, subject_type, field_type, name, description, is_archived)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreatePropertyParams struct {
	ID          uuid.UUID
	SubjectType int32
	FieldType   int32
	Name        string
	Description string
	IsArchived  bool
}

func (q *Queries) CreateProperty(ctx context.Context, arg CreatePropertyParams) error {
	_, err := q.db.Exec(ctx, createProperty,
		arg.ID,
		arg.SubjectType,
		arg.FieldType,
		arg.Name,
		arg.Description,
		arg.IsArchived,
	)
	return err
}

const getPropertyById = `-- name: GetPropertyById :one
SELECT id, subject_type, field_type, name, description, is_archived, set_id FROM properties WHERE id = $1
`

func (q *Queries) GetPropertyById(ctx context.Context, id uuid.UUID) (Property, error) {
	row := q.db.QueryRow(ctx, getPropertyById, id)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.SubjectType,
		&i.FieldType,
		&i.Name,
		&i.Description,
		&i.IsArchived,
		&i.SetID,
	)
	return i, err
}

const getPropertyBySubjectType = `-- name: GetPropertyBySubjectType :many
SELECT id, subject_type, field_type, name, description, is_archived, set_id FROM properties WHERE subject_type = $1
`

func (q *Queries) GetPropertyBySubjectType(ctx context.Context, subjectType int32) ([]Property, error) {
	rows, err := q.db.Query(ctx, getPropertyBySubjectType, subjectType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Property{}
	for rows.Next() {
		var i Property
		if err := rows.Scan(
			&i.ID,
			&i.SubjectType,
			&i.FieldType,
			&i.Name,
			&i.Description,
			&i.IsArchived,
			&i.SetID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProperty = `-- name: UpdateProperty :exec
UPDATE properties
SET subject_type = coalesce($2, subject_type),
	field_type = coalesce($3, field_type),
	name = coalesce($4, name),
	description = coalesce($5, description),
	is_archived = coalesce($6, is_archived)
WHERE id = $1
`

type UpdatePropertyParams struct {
	ID          uuid.UUID
	SubjectType *int32
	FieldType   *int32
	Name        *string
	Description *string
	IsArchived  *bool
}

func (q *Queries) UpdateProperty(ctx context.Context, arg UpdatePropertyParams) error {
	_, err := q.db.Exec(ctx, updateProperty,
		arg.ID,
		arg.SubjectType,
		arg.FieldType,
		arg.Name,
		arg.Description,
		arg.IsArchived,
	)
	return err
}

const updatePropertySetID = `-- name: UpdatePropertySetID :exec
UPDATE properties
SET set_id = $1
WHERE id = $2
`

type UpdatePropertySetIDParams struct {
	SetID uuid.NullUUID
	ID    uuid.UUID
}

func (q *Queries) UpdatePropertySetID(ctx context.Context, arg UpdatePropertySetIDParams) error {
	_, err := q.db.Exec(ctx, updatePropertySetID, arg.SetID, arg.ID)
	return err
}
