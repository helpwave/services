// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: patient_views_repo.sql

package patient_views_repo

import (
	"context"

	"github.com/google/uuid"
)

const createPatientRule = `-- name: CreatePatientRule :exec
INSERT INTO patient_property_view_rules (rule_id, ward_id, patient_id)
VALUES ($1, $2, $3)
`

type CreatePatientRuleParams struct {
	RuleID    uuid.UUID
	WardID    uuid.NullUUID
	PatientID uuid.NullUUID
}

func (q *Queries) CreatePatientRule(ctx context.Context, arg CreatePatientRuleParams) error {
	_, err := q.db.Exec(ctx, createPatientRule, arg.RuleID, arg.WardID, arg.PatientID)
	return err
}

const getPatientPropertiesUsingMatchers = `-- name: GetPatientPropertiesUsingMatchers :many
SELECT
	list_items.property_id,
	list_items.dont_always_include,
	calc_rule_specificity(rules.patient_id IS NOT NULL, rules.ward_id IS NOT NULL) as specificity
FROM patient_property_view_rules as rules
JOIN property_view_filter_always_include_items as list_items ON list_items.rule_id = rules.rule_id
WHERE
	(rules.ward_id = $1 OR rules.ward_id IS NULL)
AND (rules.patient_id = $2 OR rules.patient_id IS NULL)
ORDER BY specificity
`

type GetPatientPropertiesUsingMatchersParams struct {
	WardID    uuid.NullUUID
	PatientID uuid.NullUUID
}

type GetPatientPropertiesUsingMatchersRow struct {
	PropertyID        uuid.UUID
	DontAlwaysInclude bool
	Specificity       int32
}

func (q *Queries) GetPatientPropertiesUsingMatchers(ctx context.Context, arg GetPatientPropertiesUsingMatchersParams) ([]GetPatientPropertiesUsingMatchersRow, error) {
	rows, err := q.db.Query(ctx, getPatientPropertiesUsingMatchers, arg.WardID, arg.PatientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPatientPropertiesUsingMatchersRow{}
	for rows.Next() {
		var i GetPatientPropertiesUsingMatchersRow
		if err := rows.Scan(&i.PropertyID, &i.DontAlwaysInclude, &i.Specificity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatientRuleIdUsingExactMatchers = `-- name: GetPatientRuleIdUsingExactMatchers :one
SELECT
	rules.rule_id as rule_id
	FROM patient_property_view_rules as rules
	WHERE
		(rules.ward_id = $1 OR (rules.ward_id IS NULL AND $1 IS NULL))
		AND ((rules.patient_id = $2) OR (rules.patient_id IS NULL AND $2 IS NULL))
`

type GetPatientRuleIdUsingExactMatchersParams struct {
	WardID    uuid.NullUUID
	PatientID uuid.NullUUID
}

func (q *Queries) GetPatientRuleIdUsingExactMatchers(ctx context.Context, arg GetPatientRuleIdUsingExactMatchersParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getPatientRuleIdUsingExactMatchers, arg.WardID, arg.PatientID)
	var rule_id uuid.UUID
	err := row.Scan(&rule_id)
	return rule_id, err
}
