// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/services/task-svc/task_svc.proto

package task_svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaskService_CreateTask_FullMethodName           = "/TaskService/CreateTask"
	TaskService_GetTask_FullMethodName              = "/TaskService/GetTask"
	TaskService_UpdateTask_FullMethodName           = "/TaskService/UpdateTask"
	TaskService_TaskToInProgress_FullMethodName     = "/TaskService/TaskToInProgress"
	TaskService_TaskToDone_FullMethodName           = "/TaskService/TaskToDone"
	TaskService_AssignTaskToUser_FullMethodName     = "/TaskService/AssignTaskToUser"
	TaskService_UnassignTaskFromUser_FullMethodName = "/TaskService/UnassignTaskFromUser"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	TaskToInProgress(ctx context.Context, in *TaskToInProgressRequest, opts ...grpc.CallOption) (*TaskToInProgressResponse, error)
	TaskToDone(ctx context.Context, in *TaskToDoneRequest, opts ...grpc.CallOption) (*TaskToDoneResponse, error)
	AssignTaskToUser(ctx context.Context, in *AssignTaskToUserRequest, opts ...grpc.CallOption) (*AssignTaskToUserResponse, error)
	UnassignTaskFromUser(ctx context.Context, in *UnassignTaskFromUserRequest, opts ...grpc.CallOption) (*UnassignTaskFromUserResponse, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, TaskService_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) TaskToInProgress(ctx context.Context, in *TaskToInProgressRequest, opts ...grpc.CallOption) (*TaskToInProgressResponse, error) {
	out := new(TaskToInProgressResponse)
	err := c.cc.Invoke(ctx, TaskService_TaskToInProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) TaskToDone(ctx context.Context, in *TaskToDoneRequest, opts ...grpc.CallOption) (*TaskToDoneResponse, error) {
	out := new(TaskToDoneResponse)
	err := c.cc.Invoke(ctx, TaskService_TaskToDone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AssignTaskToUser(ctx context.Context, in *AssignTaskToUserRequest, opts ...grpc.CallOption) (*AssignTaskToUserResponse, error) {
	out := new(AssignTaskToUserResponse)
	err := c.cc.Invoke(ctx, TaskService_AssignTaskToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UnassignTaskFromUser(ctx context.Context, in *UnassignTaskFromUserRequest, opts ...grpc.CallOption) (*UnassignTaskFromUserResponse, error) {
	out := new(UnassignTaskFromUserResponse)
	err := c.cc.Invoke(ctx, TaskService_UnassignTaskFromUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	TaskToInProgress(context.Context, *TaskToInProgressRequest) (*TaskToInProgressResponse, error)
	TaskToDone(context.Context, *TaskToDoneRequest) (*TaskToDoneResponse, error)
	AssignTaskToUser(context.Context, *AssignTaskToUserRequest) (*AssignTaskToUserResponse, error)
	UnassignTaskFromUser(context.Context, *UnassignTaskFromUserRequest) (*UnassignTaskFromUserResponse, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServiceServer) TaskToInProgress(context.Context, *TaskToInProgressRequest) (*TaskToInProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskToInProgress not implemented")
}
func (UnimplementedTaskServiceServer) TaskToDone(context.Context, *TaskToDoneRequest) (*TaskToDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskToDone not implemented")
}
func (UnimplementedTaskServiceServer) AssignTaskToUser(context.Context, *AssignTaskToUserRequest) (*AssignTaskToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTaskToUser not implemented")
}
func (UnimplementedTaskServiceServer) UnassignTaskFromUser(context.Context, *UnassignTaskFromUserRequest) (*UnassignTaskFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignTaskFromUser not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_TaskToInProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskToInProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TaskToInProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_TaskToInProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TaskToInProgress(ctx, req.(*TaskToInProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_TaskToDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskToDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TaskToDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_TaskToDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TaskToDone(ctx, req.(*TaskToDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AssignTaskToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTaskToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AssignTaskToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AssignTaskToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AssignTaskToUser(ctx, req.(*AssignTaskToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UnassignTaskFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignTaskFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UnassignTaskFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UnassignTaskFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UnassignTaskFromUser(ctx, req.(*UnassignTaskFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskService_UpdateTask_Handler,
		},
		{
			MethodName: "TaskToInProgress",
			Handler:    _TaskService_TaskToInProgress_Handler,
		},
		{
			MethodName: "TaskToDone",
			Handler:    _TaskService_TaskToDone_Handler,
		},
		{
			MethodName: "AssignTaskToUser",
			Handler:    _TaskService_AssignTaskToUser_Handler,
		},
		{
			MethodName: "UnassignTaskFromUser",
			Handler:    _TaskService_UnassignTaskFromUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/task-svc/task_svc.proto",
}
