# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from services.tasks_svc.v1 import task_svc_pb2 as services_dot_tasks__svc_dot_v1_dot_task__svc__pb2


class TaskServiceStub(object):
    """
    TaskService


    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTask = channel.unary_unary(
                '/services.tasks_svc.v1.TaskService/CreateTask',
                request_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateTaskRequest.SerializeToString,
                response_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateTaskResponse.FromString,
                _registered_method=True)
        self.UpdateTask = channel.unary_unary(
                '/services.tasks_svc.v1.TaskService/UpdateTask',
                request_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateTaskRequest.SerializeToString,
                response_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateTaskResponse.FromString,
                _registered_method=True)
        self.GetTask = channel.unary_unary(
                '/services.tasks_svc.v1.TaskService/GetTask',
                request_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.GetTaskRequest.SerializeToString,
                response_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.GetTaskResponse.FromString,
                _registered_method=True)
        self.AssignTask = channel.unary_unary(
                '/services.tasks_svc.v1.TaskService/AssignTask',
                request_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.AssignTaskRequest.SerializeToString,
                response_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.AssignTaskResponse.FromString,
                _registered_method=True)
        self.UnassignTask = channel.unary_unary(
                '/services.tasks_svc.v1.TaskService/UnassignTask',
                request_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UnassignTaskRequest.SerializeToString,
                response_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UnassignTaskResponse.FromString,
                _registered_method=True)
        self.CreateSubtask = channel.unary_unary(
                '/services.tasks_svc.v1.TaskService/CreateSubtask',
                request_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateSubtaskRequest.SerializeToString,
                response_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateSubtaskResponse.FromString,
                _registered_method=True)
        self.UpdateSubtask = channel.unary_unary(
                '/services.tasks_svc.v1.TaskService/UpdateSubtask',
                request_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateSubtaskRequest.SerializeToString,
                response_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateSubtaskResponse.FromString,
                _registered_method=True)
        self.CompleteSubtask = channel.unary_unary(
                '/services.tasks_svc.v1.TaskService/CompleteSubtask',
                request_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CompleteSubtaskRequest.SerializeToString,
                response_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CompleteSubtaskResponse.FromString,
                _registered_method=True)
        self.UncompleteSubtask = channel.unary_unary(
                '/services.tasks_svc.v1.TaskService/UncompleteSubtask',
                request_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UncompleteSubtaskRequest.SerializeToString,
                response_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UncompleteSubtaskResponse.FromString,
                _registered_method=True)
        self.DeleteSubtask = channel.unary_unary(
                '/services.tasks_svc.v1.TaskService/DeleteSubtask',
                request_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.DeleteSubtaskRequest.SerializeToString,
                response_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.DeleteSubtaskResponse.FromString,
                _registered_method=True)


class TaskServiceServicer(object):
    """
    TaskService


    """

    def CreateTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnassignTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSubtask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSubtask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteSubtask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UncompleteSubtask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSubtask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTask,
                    request_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateTaskRequest.FromString,
                    response_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateTaskResponse.SerializeToString,
            ),
            'UpdateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTask,
                    request_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateTaskRequest.FromString,
                    response_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateTaskResponse.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.GetTaskRequest.FromString,
                    response_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.GetTaskResponse.SerializeToString,
            ),
            'AssignTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignTask,
                    request_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.AssignTaskRequest.FromString,
                    response_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.AssignTaskResponse.SerializeToString,
            ),
            'UnassignTask': grpc.unary_unary_rpc_method_handler(
                    servicer.UnassignTask,
                    request_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UnassignTaskRequest.FromString,
                    response_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UnassignTaskResponse.SerializeToString,
            ),
            'CreateSubtask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSubtask,
                    request_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateSubtaskRequest.FromString,
                    response_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateSubtaskResponse.SerializeToString,
            ),
            'UpdateSubtask': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSubtask,
                    request_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateSubtaskRequest.FromString,
                    response_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateSubtaskResponse.SerializeToString,
            ),
            'CompleteSubtask': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteSubtask,
                    request_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CompleteSubtaskRequest.FromString,
                    response_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CompleteSubtaskResponse.SerializeToString,
            ),
            'UncompleteSubtask': grpc.unary_unary_rpc_method_handler(
                    servicer.UncompleteSubtask,
                    request_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UncompleteSubtaskRequest.FromString,
                    response_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UncompleteSubtaskResponse.SerializeToString,
            ),
            'DeleteSubtask': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSubtask,
                    request_deserializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.DeleteSubtaskRequest.FromString,
                    response_serializer=services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.DeleteSubtaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.tasks_svc.v1.TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('services.tasks_svc.v1.TaskService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """
    TaskService


    """

    @staticmethod
    def CreateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.tasks_svc.v1.TaskService/CreateTask',
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateTaskRequest.SerializeToString,
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.tasks_svc.v1.TaskService/UpdateTask',
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateTaskRequest.SerializeToString,
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.tasks_svc.v1.TaskService/GetTask',
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.GetTaskRequest.SerializeToString,
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.GetTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.tasks_svc.v1.TaskService/AssignTask',
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.AssignTaskRequest.SerializeToString,
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.AssignTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnassignTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.tasks_svc.v1.TaskService/UnassignTask',
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UnassignTaskRequest.SerializeToString,
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UnassignTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSubtask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.tasks_svc.v1.TaskService/CreateSubtask',
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateSubtaskRequest.SerializeToString,
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CreateSubtaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSubtask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.tasks_svc.v1.TaskService/UpdateSubtask',
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateSubtaskRequest.SerializeToString,
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UpdateSubtaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CompleteSubtask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.tasks_svc.v1.TaskService/CompleteSubtask',
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CompleteSubtaskRequest.SerializeToString,
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.CompleteSubtaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UncompleteSubtask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.tasks_svc.v1.TaskService/UncompleteSubtask',
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UncompleteSubtaskRequest.SerializeToString,
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.UncompleteSubtaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSubtask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/services.tasks_svc.v1.TaskService/DeleteSubtask',
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.DeleteSubtaskRequest.SerializeToString,
            services_dot_tasks__svc_dot_v1_dot_task__svc__pb2.DeleteSubtaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
