// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/services/impulse_svc/v1/impulse_svc.proto

package impulse_svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImpulseService_CreateUser_FullMethodName           = "/proto.services.impulse_svc.v1.ImpulseService/CreateUser"
	ImpulseService_UpdateUser_FullMethodName           = "/proto.services.impulse_svc.v1.ImpulseService/UpdateUser"
	ImpulseService_TrackChallenge_FullMethodName       = "/proto.services.impulse_svc.v1.ImpulseService/TrackChallenge"
	ImpulseService_CreateDailyChallenge_FullMethodName = "/proto.services.impulse_svc.v1.ImpulseService/CreateDailyChallenge"
	ImpulseService_CreateQuestChallenge_FullMethodName = "/proto.services.impulse_svc.v1.ImpulseService/CreateQuestChallenge"
	ImpulseService_UpdateChallenge_FullMethodName      = "/proto.services.impulse_svc.v1.ImpulseService/UpdateChallenge"
	ImpulseService_GetChallenges_FullMethodName        = "/proto.services.impulse_svc.v1.ImpulseService/GetChallenges"
)

// ImpulseServiceClient is the client API for ImpulseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImpulseServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	TrackChallenge(ctx context.Context, in *TrackChallengeRequest, opts ...grpc.CallOption) (*TrackChallengeResponse, error)
	CreateDailyChallenge(ctx context.Context, in *CreateDailyChallengeRequest, opts ...grpc.CallOption) (*CreateDailyChallengeResponse, error)
	CreateQuestChallenge(ctx context.Context, in *CreateQuestChallengeRequest, opts ...grpc.CallOption) (*CreateQuestChallengeResponse, error)
	UpdateChallenge(ctx context.Context, in *UpdateChallengeRequest, opts ...grpc.CallOption) (*UpdateChallengeResponse, error)
	GetChallenges(ctx context.Context, in *GetChallengesRequest, opts ...grpc.CallOption) (*GetChallengesResponse, error)
}

type impulseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImpulseServiceClient(cc grpc.ClientConnInterface) ImpulseServiceClient {
	return &impulseServiceClient{cc}
}

func (c *impulseServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, ImpulseService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impulseServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, ImpulseService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impulseServiceClient) TrackChallenge(ctx context.Context, in *TrackChallengeRequest, opts ...grpc.CallOption) (*TrackChallengeResponse, error) {
	out := new(TrackChallengeResponse)
	err := c.cc.Invoke(ctx, ImpulseService_TrackChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impulseServiceClient) CreateDailyChallenge(ctx context.Context, in *CreateDailyChallengeRequest, opts ...grpc.CallOption) (*CreateDailyChallengeResponse, error) {
	out := new(CreateDailyChallengeResponse)
	err := c.cc.Invoke(ctx, ImpulseService_CreateDailyChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impulseServiceClient) CreateQuestChallenge(ctx context.Context, in *CreateQuestChallengeRequest, opts ...grpc.CallOption) (*CreateQuestChallengeResponse, error) {
	out := new(CreateQuestChallengeResponse)
	err := c.cc.Invoke(ctx, ImpulseService_CreateQuestChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impulseServiceClient) UpdateChallenge(ctx context.Context, in *UpdateChallengeRequest, opts ...grpc.CallOption) (*UpdateChallengeResponse, error) {
	out := new(UpdateChallengeResponse)
	err := c.cc.Invoke(ctx, ImpulseService_UpdateChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *impulseServiceClient) GetChallenges(ctx context.Context, in *GetChallengesRequest, opts ...grpc.CallOption) (*GetChallengesResponse, error) {
	out := new(GetChallengesResponse)
	err := c.cc.Invoke(ctx, ImpulseService_GetChallenges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImpulseServiceServer is the server API for ImpulseService service.
// All implementations must embed UnimplementedImpulseServiceServer
// for forward compatibility
type ImpulseServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	TrackChallenge(context.Context, *TrackChallengeRequest) (*TrackChallengeResponse, error)
	CreateDailyChallenge(context.Context, *CreateDailyChallengeRequest) (*CreateDailyChallengeResponse, error)
	CreateQuestChallenge(context.Context, *CreateQuestChallengeRequest) (*CreateQuestChallengeResponse, error)
	UpdateChallenge(context.Context, *UpdateChallengeRequest) (*UpdateChallengeResponse, error)
	GetChallenges(context.Context, *GetChallengesRequest) (*GetChallengesResponse, error)
	mustEmbedUnimplementedImpulseServiceServer()
}

// UnimplementedImpulseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImpulseServiceServer struct {
}

func (UnimplementedImpulseServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedImpulseServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedImpulseServiceServer) TrackChallenge(context.Context, *TrackChallengeRequest) (*TrackChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackChallenge not implemented")
}
func (UnimplementedImpulseServiceServer) CreateDailyChallenge(context.Context, *CreateDailyChallengeRequest) (*CreateDailyChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDailyChallenge not implemented")
}
func (UnimplementedImpulseServiceServer) CreateQuestChallenge(context.Context, *CreateQuestChallengeRequest) (*CreateQuestChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestChallenge not implemented")
}
func (UnimplementedImpulseServiceServer) UpdateChallenge(context.Context, *UpdateChallengeRequest) (*UpdateChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChallenge not implemented")
}
func (UnimplementedImpulseServiceServer) GetChallenges(context.Context, *GetChallengesRequest) (*GetChallengesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenges not implemented")
}
func (UnimplementedImpulseServiceServer) mustEmbedUnimplementedImpulseServiceServer() {}

// UnsafeImpulseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImpulseServiceServer will
// result in compilation errors.
type UnsafeImpulseServiceServer interface {
	mustEmbedUnimplementedImpulseServiceServer()
}

func RegisterImpulseServiceServer(s grpc.ServiceRegistrar, srv ImpulseServiceServer) {
	s.RegisterService(&ImpulseService_ServiceDesc, srv)
}

func _ImpulseService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpulseServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpulseService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpulseServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpulseService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpulseServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpulseService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpulseServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpulseService_TrackChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpulseServiceServer).TrackChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpulseService_TrackChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpulseServiceServer).TrackChallenge(ctx, req.(*TrackChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpulseService_CreateDailyChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDailyChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpulseServiceServer).CreateDailyChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpulseService_CreateDailyChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpulseServiceServer).CreateDailyChallenge(ctx, req.(*CreateDailyChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpulseService_CreateQuestChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpulseServiceServer).CreateQuestChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpulseService_CreateQuestChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpulseServiceServer).CreateQuestChallenge(ctx, req.(*CreateQuestChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpulseService_UpdateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpulseServiceServer).UpdateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpulseService_UpdateChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpulseServiceServer).UpdateChallenge(ctx, req.(*UpdateChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImpulseService_GetChallenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChallengesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImpulseServiceServer).GetChallenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImpulseService_GetChallenges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImpulseServiceServer).GetChallenges(ctx, req.(*GetChallengesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImpulseService_ServiceDesc is the grpc.ServiceDesc for ImpulseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImpulseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.services.impulse_svc.v1.ImpulseService",
	HandlerType: (*ImpulseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _ImpulseService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ImpulseService_UpdateUser_Handler,
		},
		{
			MethodName: "TrackChallenge",
			Handler:    _ImpulseService_TrackChallenge_Handler,
		},
		{
			MethodName: "CreateDailyChallenge",
			Handler:    _ImpulseService_CreateDailyChallenge_Handler,
		},
		{
			MethodName: "CreateQuestChallenge",
			Handler:    _ImpulseService_CreateQuestChallenge_Handler,
		},
		{
			MethodName: "UpdateChallenge",
			Handler:    _ImpulseService_UpdateChallenge_Handler,
		},
		{
			MethodName: "GetChallenges",
			Handler:    _ImpulseService_GetChallenges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/impulse_svc/v1/impulse_svc.proto",
}
