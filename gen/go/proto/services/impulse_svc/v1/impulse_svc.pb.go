// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/services/impulse_svc/v1/impulse_svc.proto

package impulse_svc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChallengeType int32

const (
	ChallengeType_CHALLENGE_TYPE_UNSPECIFIED ChallengeType = 0
	ChallengeType_CHALLENGE_TYPE_DAILY       ChallengeType = 1
	ChallengeType_CHALLENGE_TYPE_QUEST       ChallengeType = 2
)

// Enum value maps for ChallengeType.
var (
	ChallengeType_name = map[int32]string{
		0: "CHALLENGE_TYPE_UNSPECIFIED",
		1: "CHALLENGE_TYPE_DAILY",
		2: "CHALLENGE_TYPE_QUEST",
	}
	ChallengeType_value = map[string]int32{
		"CHALLENGE_TYPE_UNSPECIFIED": 0,
		"CHALLENGE_TYPE_DAILY":       1,
		"CHALLENGE_TYPE_QUEST":       2,
	}
)

func (x ChallengeType) Enum() *ChallengeType {
	p := new(ChallengeType)
	*p = x
	return p
}

func (x ChallengeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes[0].Descriptor()
}

func (ChallengeType) Type() protoreflect.EnumType {
	return &file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes[0]
}

func (x ChallengeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeType.Descriptor instead.
func (ChallengeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{0}
}

type ChallengeCategory int32

const (
	ChallengeCategory_CHALLENGE_CATEGORY_UNSPECIFIED ChallengeCategory = 0
	ChallengeCategory_CHALLENGE_CATEGORY_FOOD        ChallengeCategory = 1
	ChallengeCategory_CHALLENGE_CATEGORY_FITNESS     ChallengeCategory = 2
)

// Enum value maps for ChallengeCategory.
var (
	ChallengeCategory_name = map[int32]string{
		0: "CHALLENGE_CATEGORY_UNSPECIFIED",
		1: "CHALLENGE_CATEGORY_FOOD",
		2: "CHALLENGE_CATEGORY_FITNESS",
	}
	ChallengeCategory_value = map[string]int32{
		"CHALLENGE_CATEGORY_UNSPECIFIED": 0,
		"CHALLENGE_CATEGORY_FOOD":        1,
		"CHALLENGE_CATEGORY_FITNESS":     2,
	}
)

func (x ChallengeCategory) Enum() *ChallengeCategory {
	p := new(ChallengeCategory)
	*p = x
	return p
}

func (x ChallengeCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes[1].Descriptor()
}

func (ChallengeCategory) Type() protoreflect.EnumType {
	return &file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes[1]
}

func (x ChallengeCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeCategory.Descriptor instead.
func (ChallengeCategory) EnumDescriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{1}
}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Gender   string `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Birthday string `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Pal      uint32 `protobuf:"varint,4,opt,name=pal,proto3" json:"pal,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{0}
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *CreateUserRequest) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *CreateUserRequest) GetPal() uint32 {
	if x != nil {
		return x.Pal
	}
	return 0
}

type CreateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Gender   *string `protobuf:"bytes,2,opt,name=gender,proto3,oneof" json:"gender,omitempty"`
	Birthday *string `protobuf:"bytes,3,opt,name=birthday,proto3,oneof" json:"birthday,omitempty"`
	Pal      *uint32 `protobuf:"varint,4,opt,name=pal,proto3,oneof" json:"pal,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserRequest) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *UpdateUserRequest) GetBirthday() string {
	if x != nil && x.Birthday != nil {
		return *x.Birthday
	}
	return ""
}

func (x *UpdateUserRequest) GetPal() uint32 {
	if x != nil && x.Pal != nil {
		return *x.Pal
	}
	return 0
}

type UpdateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Gender   string `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Birthday string `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Pal      uint32 `protobuf:"varint,4,opt,name=pal,proto3" json:"pal,omitempty"`
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserResponse) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UpdateUserResponse) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UpdateUserResponse) GetPal() uint32 {
	if x != nil {
		return x.Pal
	}
	return 0
}

type GetAllTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllTeamsRequest) Reset() {
	*x = GetAllTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTeamsRequest) ProtoMessage() {}

func (x *GetAllTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTeamsRequest.ProtoReflect.Descriptor instead.
func (*GetAllTeamsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{4}
}

type GetAllTeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*GetAllTeamsResponse_Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *GetAllTeamsResponse) Reset() {
	*x = GetAllTeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTeamsResponse) ProtoMessage() {}

func (x *GetAllTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTeamsResponse.ProtoReflect.Descriptor instead.
func (*GetAllTeamsResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllTeamsResponse) GetTeams() []*GetAllTeamsResponse_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type TrackChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score       uint64 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	DoneAt      string `protobuf:"bytes,4,opt,name=done_at,json=doneAt,proto3" json:"done_at,omitempty"`
}

func (x *TrackChallengeRequest) Reset() {
	*x = TrackChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackChallengeRequest) ProtoMessage() {}

func (x *TrackChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackChallengeRequest.ProtoReflect.Descriptor instead.
func (*TrackChallengeRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{6}
}

func (x *TrackChallengeRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *TrackChallengeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackChallengeRequest) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TrackChallengeRequest) GetDoneAt() string {
	if x != nil {
		return x.DoneAt
	}
	return ""
}

type TrackChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (x *TrackChallengeResponse) Reset() {
	*x = TrackChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackChallengeResponse) ProtoMessage() {}

func (x *TrackChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackChallengeResponse.ProtoReflect.Descriptor instead.
func (*TrackChallengeResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{7}
}

func (x *TrackChallengeResponse) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

type GetActiveChallengesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetActiveChallengesRequest) Reset() {
	*x = GetActiveChallengesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveChallengesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveChallengesRequest) ProtoMessage() {}

func (x *GetActiveChallengesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveChallengesRequest.ProtoReflect.Descriptor instead.
func (*GetActiveChallengesRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{8}
}

type GetActiveChallengesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*GetActiveChallengesResponse_Challenge `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *GetActiveChallengesResponse) Reset() {
	*x = GetActiveChallengesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveChallengesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveChallengesResponse) ProtoMessage() {}

func (x *GetActiveChallengesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveChallengesResponse.ProtoReflect.Descriptor instead.
func (*GetActiveChallengesResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{9}
}

func (x *GetActiveChallengesResponse) GetChallenges() []*GetActiveChallengesResponse_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type UpdateChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string             `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Title       *string            `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description *string            `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	StartAt     *string            `protobuf:"bytes,4,opt,name=start_at,json=startAt,proto3,oneof" json:"start_at,omitempty"`
	EndAt       *string            `protobuf:"bytes,5,opt,name=end_at,json=endAt,proto3,oneof" json:"end_at,omitempty"`
	Category    *ChallengeCategory `protobuf:"varint,6,opt,name=category,proto3,enum=proto.services.impulse_svc.v1.ChallengeCategory,oneof" json:"category,omitempty"`
	Threshold   *uint64            `protobuf:"varint,7,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
	Points      *uint64            `protobuf:"varint,8,opt,name=points,proto3,oneof" json:"points,omitempty"`
	Unit        *string            `protobuf:"bytes,9,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
}

func (x *UpdateChallengeRequest) Reset() {
	*x = UpdateChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChallengeRequest) ProtoMessage() {}

func (x *UpdateChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChallengeRequest.ProtoReflect.Descriptor instead.
func (*UpdateChallengeRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateChallengeRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *UpdateChallengeRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateChallengeRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateChallengeRequest) GetStartAt() string {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return ""
}

func (x *UpdateChallengeRequest) GetEndAt() string {
	if x != nil && x.EndAt != nil {
		return *x.EndAt
	}
	return ""
}

func (x *UpdateChallengeRequest) GetCategory() ChallengeCategory {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ChallengeCategory_CHALLENGE_CATEGORY_UNSPECIFIED
}

func (x *UpdateChallengeRequest) GetThreshold() uint64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *UpdateChallengeRequest) GetPoints() uint64 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *UpdateChallengeRequest) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

type UpdateChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string            `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Title       string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartAt     string            `protobuf:"bytes,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt       string            `protobuf:"bytes,5,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Category    ChallengeCategory `protobuf:"varint,6,opt,name=category,proto3,enum=proto.services.impulse_svc.v1.ChallengeCategory" json:"category,omitempty"`
	Type        ChallengeType     `protobuf:"varint,7,opt,name=type,proto3,enum=proto.services.impulse_svc.v1.ChallengeType" json:"type,omitempty"`
	Threshold   uint64            `protobuf:"varint,8,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Points      uint64            `protobuf:"varint,9,opt,name=points,proto3" json:"points,omitempty"`
	Unit        string            `protobuf:"bytes,10,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *UpdateChallengeResponse) Reset() {
	*x = UpdateChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChallengeResponse) ProtoMessage() {}

func (x *UpdateChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChallengeResponse.ProtoReflect.Descriptor instead.
func (*UpdateChallengeResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateChallengeResponse) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *UpdateChallengeResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateChallengeResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateChallengeResponse) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *UpdateChallengeResponse) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *UpdateChallengeResponse) GetCategory() ChallengeCategory {
	if x != nil {
		return x.Category
	}
	return ChallengeCategory_CHALLENGE_CATEGORY_UNSPECIFIED
}

func (x *UpdateChallengeResponse) GetType() ChallengeType {
	if x != nil {
		return x.Type
	}
	return ChallengeType_CHALLENGE_TYPE_UNSPECIFIED
}

func (x *UpdateChallengeResponse) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *UpdateChallengeResponse) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *UpdateChallengeResponse) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type GetScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetScoreRequest) Reset() {
	*x = GetScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScoreRequest) ProtoMessage() {}

func (x *GetScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScoreRequest.ProtoReflect.Descriptor instead.
func (*GetScoreRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{12}
}

func (x *GetScoreRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score uint64 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *GetScoreResponse) Reset() {
	*x = GetScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScoreResponse) ProtoMessage() {}

func (x *GetScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScoreResponse.ProtoReflect.Descriptor instead.
func (*GetScoreResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{13}
}

func (x *GetScoreResponse) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type GetRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (x *GetRewardsRequest) Reset() {
	*x = GetRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsRequest) ProtoMessage() {}

func (x *GetRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsRequest.ProtoReflect.Descriptor instead.
func (*GetRewardsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{14}
}

func (x *GetRewardsRequest) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

type GetRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*GetRewardsResponse_Reward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetRewardsResponse) Reset() {
	*x = GetRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsResponse) ProtoMessage() {}

func (x *GetRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsResponse.ProtoReflect.Descriptor instead.
func (*GetRewardsResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{15}
}

func (x *GetRewardsResponse) GetRewards() []*GetRewardsResponse_Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type GetAllRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllRewardsRequest) Reset() {
	*x = GetAllRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRewardsRequest) ProtoMessage() {}

func (x *GetAllRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRewardsRequest.ProtoReflect.Descriptor instead.
func (*GetAllRewardsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{16}
}

type GetAllRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*GetAllRewardsResponse_Reward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetAllRewardsResponse) Reset() {
	*x = GetAllRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRewardsResponse) ProtoMessage() {}

func (x *GetAllRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRewardsResponse.ProtoReflect.Descriptor instead.
func (*GetAllRewardsResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{17}
}

func (x *GetAllRewardsResponse) GetRewards() []*GetAllRewardsResponse_Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type GetAllTeamsResponse_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId      string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Image       string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *GetAllTeamsResponse_Team) Reset() {
	*x = GetAllTeamsResponse_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTeamsResponse_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTeamsResponse_Team) ProtoMessage() {}

func (x *GetAllTeamsResponse_Team) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTeamsResponse_Team.ProtoReflect.Descriptor instead.
func (*GetAllTeamsResponse_Team) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetAllTeamsResponse_Team) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *GetAllTeamsResponse_Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAllTeamsResponse_Team) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetAllTeamsResponse_Team) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type GetActiveChallengesResponse_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string            `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Title       string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartAt     string            `protobuf:"bytes,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt       string            `protobuf:"bytes,5,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Category    ChallengeCategory `protobuf:"varint,6,opt,name=category,proto3,enum=proto.services.impulse_svc.v1.ChallengeCategory" json:"category,omitempty"`
	Type        ChallengeType     `protobuf:"varint,7,opt,name=type,proto3,enum=proto.services.impulse_svc.v1.ChallengeType" json:"type,omitempty"`
	Threshold   uint64            `protobuf:"varint,8,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Points      uint64            `protobuf:"varint,9,opt,name=points,proto3" json:"points,omitempty"`
	Unit        string            `protobuf:"bytes,10,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *GetActiveChallengesResponse_Challenge) Reset() {
	*x = GetActiveChallengesResponse_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveChallengesResponse_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveChallengesResponse_Challenge) ProtoMessage() {}

func (x *GetActiveChallengesResponse_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveChallengesResponse_Challenge.ProtoReflect.Descriptor instead.
func (*GetActiveChallengesResponse_Challenge) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetActiveChallengesResponse_Challenge) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *GetActiveChallengesResponse_Challenge) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetActiveChallengesResponse_Challenge) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetActiveChallengesResponse_Challenge) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *GetActiveChallengesResponse_Challenge) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *GetActiveChallengesResponse_Challenge) GetCategory() ChallengeCategory {
	if x != nil {
		return x.Category
	}
	return ChallengeCategory_CHALLENGE_CATEGORY_UNSPECIFIED
}

func (x *GetActiveChallengesResponse_Challenge) GetType() ChallengeType {
	if x != nil {
		return x.Type
	}
	return ChallengeType_CHALLENGE_TYPE_UNSPECIFIED
}

func (x *GetActiveChallengesResponse_Challenge) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *GetActiveChallengesResponse_Challenge) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *GetActiveChallengesResponse_Challenge) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type GetRewardsResponse_Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId    string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Points      uint64 `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *GetRewardsResponse_Reward) Reset() {
	*x = GetRewardsResponse_Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsResponse_Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsResponse_Reward) ProtoMessage() {}

func (x *GetRewardsResponse_Reward) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsResponse_Reward.ProtoReflect.Descriptor instead.
func (*GetRewardsResponse_Reward) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GetRewardsResponse_Reward) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

func (x *GetRewardsResponse_Reward) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetRewardsResponse_Reward) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetRewardsResponse_Reward) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

type GetAllRewardsResponse_Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId    string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Points      uint64 `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *GetAllRewardsResponse_Reward) Reset() {
	*x = GetAllRewardsResponse_Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRewardsResponse_Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRewardsResponse_Reward) ProtoMessage() {}

func (x *GetAllRewardsResponse_Reward) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRewardsResponse_Reward.ProtoReflect.Descriptor instead.
func (*GetAllRewardsResponse_Reward) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetAllRewardsResponse_Reward) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

func (x *GetAllRewardsResponse_Reward) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetAllRewardsResponse_Reward) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetAllRewardsResponse_Reward) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

var File_proto_services_impulse_svc_v1_impulse_svc_proto protoreflect.FileDescriptor

var file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x22, 0x75, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x70, 0x61, 0x6c, 0x22, 0x2d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x02, 0x52, 0x03, 0x70, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x61, 0x6c, 0x22, 0x73, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x61, 0x6c, 0x22,
	0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x6b, 0x0a, 0x04,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x22, 0x3b,
	0x0a, 0x16, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf8, 0x03, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x1a,
	0xf2, 0x02, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x22, 0xc6, 0x03, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x51, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x48, 0x04, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x80, 0x03,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x22, 0x2a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x30, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x1a, 0x75, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x1a, 0x75, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2a, 0x63, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41,
	0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x2a,
	0x74, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x46,
	0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x54, 0x4e,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x32, 0xe6, 0x07, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75,
	0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xe7,
	0x01, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x76, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1e, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x75,
	0x6c, 0x73, 0x65, 0x2d, 0x73, 0x76, 0x63, 0xa2, 0x02, 0x03, 0x50, 0x53, 0x49, 0xaa, 0x02, 0x1c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x76, 0x63, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x49, 0x6d,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x76, 0x63, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x28, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x49, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x53, 0x76, 0x63, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x53, 0x76, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescOnce sync.Once
	file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescData = file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDesc
)

func file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP() []byte {
	file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescOnce.Do(func() {
		file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescData)
	})
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescData
}

var file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_services_impulse_svc_v1_impulse_svc_proto_goTypes = []interface{}{
	(ChallengeType)(0),                            // 0: proto.services.impulse_svc.v1.ChallengeType
	(ChallengeCategory)(0),                        // 1: proto.services.impulse_svc.v1.ChallengeCategory
	(*CreateUserRequest)(nil),                     // 2: proto.services.impulse_svc.v1.CreateUserRequest
	(*CreateUserResponse)(nil),                    // 3: proto.services.impulse_svc.v1.CreateUserResponse
	(*UpdateUserRequest)(nil),                     // 4: proto.services.impulse_svc.v1.UpdateUserRequest
	(*UpdateUserResponse)(nil),                    // 5: proto.services.impulse_svc.v1.UpdateUserResponse
	(*GetAllTeamsRequest)(nil),                    // 6: proto.services.impulse_svc.v1.GetAllTeamsRequest
	(*GetAllTeamsResponse)(nil),                   // 7: proto.services.impulse_svc.v1.GetAllTeamsResponse
	(*TrackChallengeRequest)(nil),                 // 8: proto.services.impulse_svc.v1.TrackChallengeRequest
	(*TrackChallengeResponse)(nil),                // 9: proto.services.impulse_svc.v1.TrackChallengeResponse
	(*GetActiveChallengesRequest)(nil),            // 10: proto.services.impulse_svc.v1.GetActiveChallengesRequest
	(*GetActiveChallengesResponse)(nil),           // 11: proto.services.impulse_svc.v1.GetActiveChallengesResponse
	(*UpdateChallengeRequest)(nil),                // 12: proto.services.impulse_svc.v1.UpdateChallengeRequest
	(*UpdateChallengeResponse)(nil),               // 13: proto.services.impulse_svc.v1.UpdateChallengeResponse
	(*GetScoreRequest)(nil),                       // 14: proto.services.impulse_svc.v1.GetScoreRequest
	(*GetScoreResponse)(nil),                      // 15: proto.services.impulse_svc.v1.GetScoreResponse
	(*GetRewardsRequest)(nil),                     // 16: proto.services.impulse_svc.v1.GetRewardsRequest
	(*GetRewardsResponse)(nil),                    // 17: proto.services.impulse_svc.v1.GetRewardsResponse
	(*GetAllRewardsRequest)(nil),                  // 18: proto.services.impulse_svc.v1.GetAllRewardsRequest
	(*GetAllRewardsResponse)(nil),                 // 19: proto.services.impulse_svc.v1.GetAllRewardsResponse
	(*GetAllTeamsResponse_Team)(nil),              // 20: proto.services.impulse_svc.v1.GetAllTeamsResponse.Team
	(*GetActiveChallengesResponse_Challenge)(nil), // 21: proto.services.impulse_svc.v1.GetActiveChallengesResponse.Challenge
	(*GetRewardsResponse_Reward)(nil),             // 22: proto.services.impulse_svc.v1.GetRewardsResponse.Reward
	(*GetAllRewardsResponse_Reward)(nil),          // 23: proto.services.impulse_svc.v1.GetAllRewardsResponse.Reward
}
var file_proto_services_impulse_svc_v1_impulse_svc_proto_depIdxs = []int32{
	20, // 0: proto.services.impulse_svc.v1.GetAllTeamsResponse.teams:type_name -> proto.services.impulse_svc.v1.GetAllTeamsResponse.Team
	21, // 1: proto.services.impulse_svc.v1.GetActiveChallengesResponse.challenges:type_name -> proto.services.impulse_svc.v1.GetActiveChallengesResponse.Challenge
	1,  // 2: proto.services.impulse_svc.v1.UpdateChallengeRequest.category:type_name -> proto.services.impulse_svc.v1.ChallengeCategory
	1,  // 3: proto.services.impulse_svc.v1.UpdateChallengeResponse.category:type_name -> proto.services.impulse_svc.v1.ChallengeCategory
	0,  // 4: proto.services.impulse_svc.v1.UpdateChallengeResponse.type:type_name -> proto.services.impulse_svc.v1.ChallengeType
	22, // 5: proto.services.impulse_svc.v1.GetRewardsResponse.rewards:type_name -> proto.services.impulse_svc.v1.GetRewardsResponse.Reward
	23, // 6: proto.services.impulse_svc.v1.GetAllRewardsResponse.rewards:type_name -> proto.services.impulse_svc.v1.GetAllRewardsResponse.Reward
	1,  // 7: proto.services.impulse_svc.v1.GetActiveChallengesResponse.Challenge.category:type_name -> proto.services.impulse_svc.v1.ChallengeCategory
	0,  // 8: proto.services.impulse_svc.v1.GetActiveChallengesResponse.Challenge.type:type_name -> proto.services.impulse_svc.v1.ChallengeType
	2,  // 9: proto.services.impulse_svc.v1.ImpulseService.CreateUser:input_type -> proto.services.impulse_svc.v1.CreateUserRequest
	4,  // 10: proto.services.impulse_svc.v1.ImpulseService.UpdateUser:input_type -> proto.services.impulse_svc.v1.UpdateUserRequest
	8,  // 11: proto.services.impulse_svc.v1.ImpulseService.TrackChallenge:input_type -> proto.services.impulse_svc.v1.TrackChallengeRequest
	10, // 12: proto.services.impulse_svc.v1.ImpulseService.GetActiveChallenges:input_type -> proto.services.impulse_svc.v1.GetActiveChallengesRequest
	14, // 13: proto.services.impulse_svc.v1.ImpulseService.GetScore:input_type -> proto.services.impulse_svc.v1.GetScoreRequest
	16, // 14: proto.services.impulse_svc.v1.ImpulseService.GetRewards:input_type -> proto.services.impulse_svc.v1.GetRewardsRequest
	18, // 15: proto.services.impulse_svc.v1.ImpulseService.GetAllRewards:input_type -> proto.services.impulse_svc.v1.GetAllRewardsRequest
	6,  // 16: proto.services.impulse_svc.v1.ImpulseService.GetAllTeams:input_type -> proto.services.impulse_svc.v1.GetAllTeamsRequest
	3,  // 17: proto.services.impulse_svc.v1.ImpulseService.CreateUser:output_type -> proto.services.impulse_svc.v1.CreateUserResponse
	5,  // 18: proto.services.impulse_svc.v1.ImpulseService.UpdateUser:output_type -> proto.services.impulse_svc.v1.UpdateUserResponse
	9,  // 19: proto.services.impulse_svc.v1.ImpulseService.TrackChallenge:output_type -> proto.services.impulse_svc.v1.TrackChallengeResponse
	11, // 20: proto.services.impulse_svc.v1.ImpulseService.GetActiveChallenges:output_type -> proto.services.impulse_svc.v1.GetActiveChallengesResponse
	15, // 21: proto.services.impulse_svc.v1.ImpulseService.GetScore:output_type -> proto.services.impulse_svc.v1.GetScoreResponse
	17, // 22: proto.services.impulse_svc.v1.ImpulseService.GetRewards:output_type -> proto.services.impulse_svc.v1.GetRewardsResponse
	19, // 23: proto.services.impulse_svc.v1.ImpulseService.GetAllRewards:output_type -> proto.services.impulse_svc.v1.GetAllRewardsResponse
	7,  // 24: proto.services.impulse_svc.v1.ImpulseService.GetAllTeams:output_type -> proto.services.impulse_svc.v1.GetAllTeamsResponse
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_services_impulse_svc_v1_impulse_svc_proto_init() }
func file_proto_services_impulse_svc_v1_impulse_svc_proto_init() {
	if File_proto_services_impulse_svc_v1_impulse_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveChallengesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveChallengesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTeamsResponse_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveChallengesResponse_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardsResponse_Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRewardsResponse_Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_services_impulse_svc_v1_impulse_svc_proto_goTypes,
		DependencyIndexes: file_proto_services_impulse_svc_v1_impulse_svc_proto_depIdxs,
		EnumInfos:         file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes,
		MessageInfos:      file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes,
	}.Build()
	File_proto_services_impulse_svc_v1_impulse_svc_proto = out.File
	file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDesc = nil
	file_proto_services_impulse_svc_v1_impulse_svc_proto_goTypes = nil
	file_proto_services_impulse_svc_v1_impulse_svc_proto_depIdxs = nil
}
