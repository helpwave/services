// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/services/impulse_svc/v1/impulse_svc.proto

package impulse_svc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChallengeType int32

const (
	ChallengeType_CHALLENGE_TYPE_UNSPECIFIED ChallengeType = 0
	ChallengeType_CHALLENGE_TYPE_DAILY       ChallengeType = 1
	ChallengeType_CHALLENGE_TYPE_QUEST       ChallengeType = 2
)

// Enum value maps for ChallengeType.
var (
	ChallengeType_name = map[int32]string{
		0: "CHALLENGE_TYPE_UNSPECIFIED",
		1: "CHALLENGE_TYPE_DAILY",
		2: "CHALLENGE_TYPE_QUEST",
	}
	ChallengeType_value = map[string]int32{
		"CHALLENGE_TYPE_UNSPECIFIED": 0,
		"CHALLENGE_TYPE_DAILY":       1,
		"CHALLENGE_TYPE_QUEST":       2,
	}
)

func (x ChallengeType) Enum() *ChallengeType {
	p := new(ChallengeType)
	*p = x
	return p
}

func (x ChallengeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes[0].Descriptor()
}

func (ChallengeType) Type() protoreflect.EnumType {
	return &file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes[0]
}

func (x ChallengeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeType.Descriptor instead.
func (ChallengeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{0}
}

type ChallengeCategory int32

const (
	ChallengeCategory_CHALLENGE_CATEGORY_UNSPECIFIED ChallengeCategory = 0
	ChallengeCategory_CHALLENGE_CATEGORY_FOOD        ChallengeCategory = 1
	ChallengeCategory_CHALLENGE_CATEGORY_FITNESS     ChallengeCategory = 2
)

// Enum value maps for ChallengeCategory.
var (
	ChallengeCategory_name = map[int32]string{
		0: "CHALLENGE_CATEGORY_UNSPECIFIED",
		1: "CHALLENGE_CATEGORY_FOOD",
		2: "CHALLENGE_CATEGORY_FITNESS",
	}
	ChallengeCategory_value = map[string]int32{
		"CHALLENGE_CATEGORY_UNSPECIFIED": 0,
		"CHALLENGE_CATEGORY_FOOD":        1,
		"CHALLENGE_CATEGORY_FITNESS":     2,
	}
)

func (x ChallengeCategory) Enum() *ChallengeCategory {
	p := new(ChallengeCategory)
	*p = x
	return p
}

func (x ChallengeCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes[1].Descriptor()
}

func (ChallengeCategory) Type() protoreflect.EnumType {
	return &file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes[1]
}

func (x ChallengeCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeCategory.Descriptor instead.
func (ChallengeCategory) EnumDescriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{1}
}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Sex      string                 `protobuf:"bytes,2,opt,name=sex,proto3" json:"sex,omitempty"`
	Birthday *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Pal      uint32                 `protobuf:"varint,4,opt,name=pal,proto3" json:"pal,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{0}
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *CreateUserRequest) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *CreateUserRequest) GetPal() uint32 {
	if x != nil {
		return x.Pal
	}
	return 0
}

type CreateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sex      *string                `protobuf:"bytes,2,opt,name=sex,proto3,oneof" json:"sex,omitempty"`
	Birthday *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=birthday,proto3,oneof" json:"birthday,omitempty"`
	Pal      *uint32                `protobuf:"varint,4,opt,name=pal,proto3,oneof" json:"pal,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserRequest) GetSex() string {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return ""
}

func (x *UpdateUserRequest) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *UpdateUserRequest) GetPal() uint32 {
	if x != nil && x.Pal != nil {
		return *x.Pal
	}
	return 0
}

type UpdateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sex      string                 `protobuf:"bytes,2,opt,name=sex,proto3" json:"sex,omitempty"`
	Birthday *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Pal      uint32                 `protobuf:"varint,4,opt,name=pal,proto3" json:"pal,omitempty"`
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateUserResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserResponse) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *UpdateUserResponse) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *UpdateUserResponse) GetPal() uint32 {
	if x != nil {
		return x.Pal
	}
	return 0
}

type TrackChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string                 `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	UserId      string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score       uint64                 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	DoneAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=done_at,json=doneAt,proto3" json:"done_at,omitempty"`
}

func (x *TrackChallengeRequest) Reset() {
	*x = TrackChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackChallengeRequest) ProtoMessage() {}

func (x *TrackChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackChallengeRequest.ProtoReflect.Descriptor instead.
func (*TrackChallengeRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{4}
}

func (x *TrackChallengeRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *TrackChallengeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackChallengeRequest) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TrackChallengeRequest) GetDoneAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DoneAt
	}
	return nil
}

type TrackChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TrackChallengeResponse) Reset() {
	*x = TrackChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackChallengeResponse) ProtoMessage() {}

func (x *TrackChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackChallengeResponse.ProtoReflect.Descriptor instead.
func (*TrackChallengeResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{5}
}

func (x *TrackChallengeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateDailyChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Category    ChallengeCategory `protobuf:"varint,3,opt,name=category,proto3,enum=proto.services.impulse_svc.v1.ChallengeCategory" json:"category,omitempty"`
	Threshold   uint64            `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Points      uint64            `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *CreateDailyChallengeRequest) Reset() {
	*x = CreateDailyChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDailyChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDailyChallengeRequest) ProtoMessage() {}

func (x *CreateDailyChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDailyChallengeRequest.ProtoReflect.Descriptor instead.
func (*CreateDailyChallengeRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{6}
}

func (x *CreateDailyChallengeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateDailyChallengeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateDailyChallengeRequest) GetCategory() ChallengeCategory {
	if x != nil {
		return x.Category
	}
	return ChallengeCategory_CHALLENGE_CATEGORY_UNSPECIFIED
}

func (x *CreateDailyChallengeRequest) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *CreateDailyChallengeRequest) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

type CreateDailyChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateDailyChallengeResponse) Reset() {
	*x = CreateDailyChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDailyChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDailyChallengeResponse) ProtoMessage() {}

func (x *CreateDailyChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDailyChallengeResponse.ProtoReflect.Descriptor instead.
func (*CreateDailyChallengeResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{7}
}

func (x *CreateDailyChallengeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateQuestChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	StartAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Category    ChallengeCategory      `protobuf:"varint,5,opt,name=category,proto3,enum=proto.services.impulse_svc.v1.ChallengeCategory" json:"category,omitempty"`
	Threshold   uint64                 `protobuf:"varint,6,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Points      uint64                 `protobuf:"varint,7,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *CreateQuestChallengeRequest) Reset() {
	*x = CreateQuestChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestChallengeRequest) ProtoMessage() {}

func (x *CreateQuestChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestChallengeRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestChallengeRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{8}
}

func (x *CreateQuestChallengeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateQuestChallengeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateQuestChallengeRequest) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CreateQuestChallengeRequest) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CreateQuestChallengeRequest) GetCategory() ChallengeCategory {
	if x != nil {
		return x.Category
	}
	return ChallengeCategory_CHALLENGE_CATEGORY_UNSPECIFIED
}

func (x *CreateQuestChallengeRequest) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *CreateQuestChallengeRequest) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

type CreateQuestChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateQuestChallengeResponse) Reset() {
	*x = CreateQuestChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestChallengeResponse) ProtoMessage() {}

func (x *CreateQuestChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestChallengeResponse.ProtoReflect.Descriptor instead.
func (*CreateQuestChallengeResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{9}
}

func (x *CreateQuestChallengeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetChallengesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetChallengesRequest) Reset() {
	*x = GetChallengesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengesRequest) ProtoMessage() {}

func (x *GetChallengesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengesRequest.ProtoReflect.Descriptor instead.
func (*GetChallengesRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{10}
}

type GetChallengesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*GetChallengesResponse_Challenge `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *GetChallengesResponse) Reset() {
	*x = GetChallengesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengesResponse) ProtoMessage() {}

func (x *GetChallengesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengesResponse.ProtoReflect.Descriptor instead.
func (*GetChallengesResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{11}
}

func (x *GetChallengesResponse) GetChallenges() []*GetChallengesResponse_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type UpdateChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       *string                `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	StartAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_at,json=startAt,proto3,oneof" json:"start_at,omitempty"`
	EndAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_at,json=endAt,proto3,oneof" json:"end_at,omitempty"`
	Category    *ChallengeCategory     `protobuf:"varint,6,opt,name=category,proto3,enum=proto.services.impulse_svc.v1.ChallengeCategory,oneof" json:"category,omitempty"`
	Threshold   *uint64                `protobuf:"varint,7,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
	Points      *uint64                `protobuf:"varint,8,opt,name=points,proto3,oneof" json:"points,omitempty"`
}

func (x *UpdateChallengeRequest) Reset() {
	*x = UpdateChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChallengeRequest) ProtoMessage() {}

func (x *UpdateChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChallengeRequest.ProtoReflect.Descriptor instead.
func (*UpdateChallengeRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateChallengeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateChallengeRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateChallengeRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateChallengeRequest) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UpdateChallengeRequest) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UpdateChallengeRequest) GetCategory() ChallengeCategory {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ChallengeCategory_CHALLENGE_CATEGORY_UNSPECIFIED
}

func (x *UpdateChallengeRequest) GetThreshold() uint64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *UpdateChallengeRequest) GetPoints() uint64 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type UpdateChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Category    ChallengeCategory      `protobuf:"varint,6,opt,name=category,proto3,enum=proto.services.impulse_svc.v1.ChallengeCategory" json:"category,omitempty"`
	Type        ChallengeType          `protobuf:"varint,7,opt,name=type,proto3,enum=proto.services.impulse_svc.v1.ChallengeType" json:"type,omitempty"`
	Threshold   uint64                 `protobuf:"varint,8,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Points      uint64                 `protobuf:"varint,9,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *UpdateChallengeResponse) Reset() {
	*x = UpdateChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChallengeResponse) ProtoMessage() {}

func (x *UpdateChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChallengeResponse.ProtoReflect.Descriptor instead.
func (*UpdateChallengeResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateChallengeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateChallengeResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateChallengeResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateChallengeResponse) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UpdateChallengeResponse) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UpdateChallengeResponse) GetCategory() ChallengeCategory {
	if x != nil {
		return x.Category
	}
	return ChallengeCategory_CHALLENGE_CATEGORY_UNSPECIFIED
}

func (x *UpdateChallengeResponse) GetType() ChallengeType {
	if x != nil {
		return x.Type
	}
	return ChallengeType_CHALLENGE_TYPE_UNSPECIFIED
}

func (x *UpdateChallengeResponse) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *UpdateChallengeResponse) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

type GetChallengesResponse_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Category    ChallengeCategory      `protobuf:"varint,6,opt,name=category,proto3,enum=proto.services.impulse_svc.v1.ChallengeCategory" json:"category,omitempty"`
	Type        ChallengeType          `protobuf:"varint,7,opt,name=type,proto3,enum=proto.services.impulse_svc.v1.ChallengeType" json:"type,omitempty"`
	Threshold   uint64                 `protobuf:"varint,8,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Points      uint64                 `protobuf:"varint,9,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *GetChallengesResponse_Challenge) Reset() {
	*x = GetChallengesResponse_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengesResponse_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengesResponse_Challenge) ProtoMessage() {}

func (x *GetChallengesResponse_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengesResponse_Challenge.ProtoReflect.Descriptor instead.
func (*GetChallengesResponse_Challenge) Descriptor() ([]byte, []int) {
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetChallengesResponse_Challenge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetChallengesResponse_Challenge) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetChallengesResponse_Challenge) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetChallengesResponse_Challenge) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetChallengesResponse_Challenge) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetChallengesResponse_Challenge) GetCategory() ChallengeCategory {
	if x != nil {
		return x.Category
	}
	return ChallengeCategory_CHALLENGE_CATEGORY_UNSPECIFIED
}

func (x *GetChallengesResponse_Challenge) GetType() ChallengeType {
	if x != nil {
		return x.Type
	}
	return ChallengeType_CHALLENGE_TYPE_UNSPECIFIED
}

func (x *GetChallengesResponse_Challenge) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *GetChallengesResponse_Challenge) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

var File_proto_services_impulse_svc_v1_impulse_svc_proto protoreflect.FileDescriptor

var file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x61, 0x6c, 0x22,
	0x24, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x01, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x03,
	0x70, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x65, 0x78, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x70, 0x61, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x08,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x70, 0x61, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x22, 0x28, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xd9, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x2e, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc3, 0x02,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x4c, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x83, 0x03, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xc9, 0x03, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x48, 0x04, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x06, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x03, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2a, 0x63, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02,
	0x2a, 0x74, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x46, 0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x54,
	0x4e, 0x45, 0x53, 0x53, 0x10, 0x02, 0x32, 0xa6, 0x07, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0xe7, 0x01, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x76,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1e, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x2d, 0x73, 0x76, 0x63, 0xa2, 0x02, 0x03, 0x50, 0x53, 0x49, 0xaa, 0x02,
	0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x76, 0x63, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x49,
	0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x76, 0x63, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x28, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x49, 0x6d,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x76, 0x63, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x3a,
	0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x49, 0x6d, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x53, 0x76, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescOnce sync.Once
	file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescData = file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDesc
)

func file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescGZIP() []byte {
	file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescOnce.Do(func() {
		file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescData)
	})
	return file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDescData
}

var file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_services_impulse_svc_v1_impulse_svc_proto_goTypes = []interface{}{
	(ChallengeType)(0),                      // 0: proto.services.impulse_svc.v1.ChallengeType
	(ChallengeCategory)(0),                  // 1: proto.services.impulse_svc.v1.ChallengeCategory
	(*CreateUserRequest)(nil),               // 2: proto.services.impulse_svc.v1.CreateUserRequest
	(*CreateUserResponse)(nil),              // 3: proto.services.impulse_svc.v1.CreateUserResponse
	(*UpdateUserRequest)(nil),               // 4: proto.services.impulse_svc.v1.UpdateUserRequest
	(*UpdateUserResponse)(nil),              // 5: proto.services.impulse_svc.v1.UpdateUserResponse
	(*TrackChallengeRequest)(nil),           // 6: proto.services.impulse_svc.v1.TrackChallengeRequest
	(*TrackChallengeResponse)(nil),          // 7: proto.services.impulse_svc.v1.TrackChallengeResponse
	(*CreateDailyChallengeRequest)(nil),     // 8: proto.services.impulse_svc.v1.CreateDailyChallengeRequest
	(*CreateDailyChallengeResponse)(nil),    // 9: proto.services.impulse_svc.v1.CreateDailyChallengeResponse
	(*CreateQuestChallengeRequest)(nil),     // 10: proto.services.impulse_svc.v1.CreateQuestChallengeRequest
	(*CreateQuestChallengeResponse)(nil),    // 11: proto.services.impulse_svc.v1.CreateQuestChallengeResponse
	(*GetChallengesRequest)(nil),            // 12: proto.services.impulse_svc.v1.GetChallengesRequest
	(*GetChallengesResponse)(nil),           // 13: proto.services.impulse_svc.v1.GetChallengesResponse
	(*UpdateChallengeRequest)(nil),          // 14: proto.services.impulse_svc.v1.UpdateChallengeRequest
	(*UpdateChallengeResponse)(nil),         // 15: proto.services.impulse_svc.v1.UpdateChallengeResponse
	(*GetChallengesResponse_Challenge)(nil), // 16: proto.services.impulse_svc.v1.GetChallengesResponse.Challenge
	(*timestamppb.Timestamp)(nil),           // 17: google.protobuf.Timestamp
}
var file_proto_services_impulse_svc_v1_impulse_svc_proto_depIdxs = []int32{
	17, // 0: proto.services.impulse_svc.v1.CreateUserRequest.birthday:type_name -> google.protobuf.Timestamp
	17, // 1: proto.services.impulse_svc.v1.UpdateUserRequest.birthday:type_name -> google.protobuf.Timestamp
	17, // 2: proto.services.impulse_svc.v1.UpdateUserResponse.birthday:type_name -> google.protobuf.Timestamp
	17, // 3: proto.services.impulse_svc.v1.TrackChallengeRequest.done_at:type_name -> google.protobuf.Timestamp
	1,  // 4: proto.services.impulse_svc.v1.CreateDailyChallengeRequest.category:type_name -> proto.services.impulse_svc.v1.ChallengeCategory
	17, // 5: proto.services.impulse_svc.v1.CreateQuestChallengeRequest.start_at:type_name -> google.protobuf.Timestamp
	17, // 6: proto.services.impulse_svc.v1.CreateQuestChallengeRequest.end_at:type_name -> google.protobuf.Timestamp
	1,  // 7: proto.services.impulse_svc.v1.CreateQuestChallengeRequest.category:type_name -> proto.services.impulse_svc.v1.ChallengeCategory
	16, // 8: proto.services.impulse_svc.v1.GetChallengesResponse.challenges:type_name -> proto.services.impulse_svc.v1.GetChallengesResponse.Challenge
	17, // 9: proto.services.impulse_svc.v1.UpdateChallengeRequest.start_at:type_name -> google.protobuf.Timestamp
	17, // 10: proto.services.impulse_svc.v1.UpdateChallengeRequest.end_at:type_name -> google.protobuf.Timestamp
	1,  // 11: proto.services.impulse_svc.v1.UpdateChallengeRequest.category:type_name -> proto.services.impulse_svc.v1.ChallengeCategory
	17, // 12: proto.services.impulse_svc.v1.UpdateChallengeResponse.start_at:type_name -> google.protobuf.Timestamp
	17, // 13: proto.services.impulse_svc.v1.UpdateChallengeResponse.end_at:type_name -> google.protobuf.Timestamp
	1,  // 14: proto.services.impulse_svc.v1.UpdateChallengeResponse.category:type_name -> proto.services.impulse_svc.v1.ChallengeCategory
	0,  // 15: proto.services.impulse_svc.v1.UpdateChallengeResponse.type:type_name -> proto.services.impulse_svc.v1.ChallengeType
	17, // 16: proto.services.impulse_svc.v1.GetChallengesResponse.Challenge.start_at:type_name -> google.protobuf.Timestamp
	17, // 17: proto.services.impulse_svc.v1.GetChallengesResponse.Challenge.end_at:type_name -> google.protobuf.Timestamp
	1,  // 18: proto.services.impulse_svc.v1.GetChallengesResponse.Challenge.category:type_name -> proto.services.impulse_svc.v1.ChallengeCategory
	0,  // 19: proto.services.impulse_svc.v1.GetChallengesResponse.Challenge.type:type_name -> proto.services.impulse_svc.v1.ChallengeType
	2,  // 20: proto.services.impulse_svc.v1.ImpulseService.CreateUser:input_type -> proto.services.impulse_svc.v1.CreateUserRequest
	4,  // 21: proto.services.impulse_svc.v1.ImpulseService.UpdateUser:input_type -> proto.services.impulse_svc.v1.UpdateUserRequest
	6,  // 22: proto.services.impulse_svc.v1.ImpulseService.TrackChallenge:input_type -> proto.services.impulse_svc.v1.TrackChallengeRequest
	8,  // 23: proto.services.impulse_svc.v1.ImpulseService.CreateDailyChallenge:input_type -> proto.services.impulse_svc.v1.CreateDailyChallengeRequest
	10, // 24: proto.services.impulse_svc.v1.ImpulseService.CreateQuestChallenge:input_type -> proto.services.impulse_svc.v1.CreateQuestChallengeRequest
	14, // 25: proto.services.impulse_svc.v1.ImpulseService.UpdateChallenge:input_type -> proto.services.impulse_svc.v1.UpdateChallengeRequest
	12, // 26: proto.services.impulse_svc.v1.ImpulseService.GetChallenges:input_type -> proto.services.impulse_svc.v1.GetChallengesRequest
	3,  // 27: proto.services.impulse_svc.v1.ImpulseService.CreateUser:output_type -> proto.services.impulse_svc.v1.CreateUserResponse
	5,  // 28: proto.services.impulse_svc.v1.ImpulseService.UpdateUser:output_type -> proto.services.impulse_svc.v1.UpdateUserResponse
	7,  // 29: proto.services.impulse_svc.v1.ImpulseService.TrackChallenge:output_type -> proto.services.impulse_svc.v1.TrackChallengeResponse
	9,  // 30: proto.services.impulse_svc.v1.ImpulseService.CreateDailyChallenge:output_type -> proto.services.impulse_svc.v1.CreateDailyChallengeResponse
	11, // 31: proto.services.impulse_svc.v1.ImpulseService.CreateQuestChallenge:output_type -> proto.services.impulse_svc.v1.CreateQuestChallengeResponse
	15, // 32: proto.services.impulse_svc.v1.ImpulseService.UpdateChallenge:output_type -> proto.services.impulse_svc.v1.UpdateChallengeResponse
	13, // 33: proto.services.impulse_svc.v1.ImpulseService.GetChallenges:output_type -> proto.services.impulse_svc.v1.GetChallengesResponse
	27, // [27:34] is the sub-list for method output_type
	20, // [20:27] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_services_impulse_svc_v1_impulse_svc_proto_init() }
func file_proto_services_impulse_svc_v1_impulse_svc_proto_init() {
	if File_proto_services_impulse_svc_v1_impulse_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDailyChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDailyChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuestChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuestChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengesResponse_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_services_impulse_svc_v1_impulse_svc_proto_goTypes,
		DependencyIndexes: file_proto_services_impulse_svc_v1_impulse_svc_proto_depIdxs,
		EnumInfos:         file_proto_services_impulse_svc_v1_impulse_svc_proto_enumTypes,
		MessageInfos:      file_proto_services_impulse_svc_v1_impulse_svc_proto_msgTypes,
	}.Build()
	File_proto_services_impulse_svc_v1_impulse_svc_proto = out.File
	file_proto_services_impulse_svc_v1_impulse_svc_proto_rawDesc = nil
	file_proto_services_impulse_svc_v1_impulse_svc_proto_goTypes = nil
	file_proto_services_impulse_svc_v1_impulse_svc_proto_depIdxs = nil
}
