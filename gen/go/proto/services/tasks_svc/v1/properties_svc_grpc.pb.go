// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/services/tasks_svc/v1/properties_svc.proto

package tasks_svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PropertiesService_CreateProperty_FullMethodName            = "/proto.services.tasks_svc.v1.PropertiesService/CreateProperty"
	PropertiesService_GetProperty_FullMethodName               = "/proto.services.tasks_svc.v1.PropertiesService/GetProperty"
	PropertiesService_GetProperties_FullMethodName             = "/proto.services.tasks_svc.v1.PropertiesService/GetProperties"
	PropertiesService_UpdateProperty_FullMethodName            = "/proto.services.tasks_svc.v1.PropertiesService/UpdateProperty"
	PropertiesService_AttachPropertyValue_FullMethodName       = "/proto.services.tasks_svc.v1.PropertiesService/AttachPropertyValue"
	PropertiesService_GetAttachedPropertyValues_FullMethodName = "/proto.services.tasks_svc.v1.PropertiesService/GetAttachedPropertyValues"
)

// PropertiesServiceClient is the client API for PropertiesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertiesServiceClient interface {
	CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*CreatePropertyResponse, error)
	GetProperty(ctx context.Context, in *GetPropertyRequest, opts ...grpc.CallOption) (*GetPropertyResponse, error)
	GetProperties(ctx context.Context, in *GetPropertiesRequest, opts ...grpc.CallOption) (*GetPropertiesResponse, error)
	UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error)
	AttachPropertyValue(ctx context.Context, in *AttachPropertyValueRequest, opts ...grpc.CallOption) (*AttachPropertyValueResponse, error)
	GetAttachedPropertyValues(ctx context.Context, in *GetAttachedPropertyValuesRequest, opts ...grpc.CallOption) (*GetAttachedPropertyValuesResponse, error)
}

type propertiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertiesServiceClient(cc grpc.ClientConnInterface) PropertiesServiceClient {
	return &propertiesServiceClient{cc}
}

func (c *propertiesServiceClient) CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*CreatePropertyResponse, error) {
	out := new(CreatePropertyResponse)
	err := c.cc.Invoke(ctx, PropertiesService_CreateProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertiesServiceClient) GetProperty(ctx context.Context, in *GetPropertyRequest, opts ...grpc.CallOption) (*GetPropertyResponse, error) {
	out := new(GetPropertyResponse)
	err := c.cc.Invoke(ctx, PropertiesService_GetProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertiesServiceClient) GetProperties(ctx context.Context, in *GetPropertiesRequest, opts ...grpc.CallOption) (*GetPropertiesResponse, error) {
	out := new(GetPropertiesResponse)
	err := c.cc.Invoke(ctx, PropertiesService_GetProperties_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertiesServiceClient) UpdateProperty(ctx context.Context, in *UpdatePropertyRequest, opts ...grpc.CallOption) (*UpdatePropertyResponse, error) {
	out := new(UpdatePropertyResponse)
	err := c.cc.Invoke(ctx, PropertiesService_UpdateProperty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertiesServiceClient) AttachPropertyValue(ctx context.Context, in *AttachPropertyValueRequest, opts ...grpc.CallOption) (*AttachPropertyValueResponse, error) {
	out := new(AttachPropertyValueResponse)
	err := c.cc.Invoke(ctx, PropertiesService_AttachPropertyValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertiesServiceClient) GetAttachedPropertyValues(ctx context.Context, in *GetAttachedPropertyValuesRequest, opts ...grpc.CallOption) (*GetAttachedPropertyValuesResponse, error) {
	out := new(GetAttachedPropertyValuesResponse)
	err := c.cc.Invoke(ctx, PropertiesService_GetAttachedPropertyValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertiesServiceServer is the server API for PropertiesService service.
// All implementations must embed UnimplementedPropertiesServiceServer
// for forward compatibility
type PropertiesServiceServer interface {
	CreateProperty(context.Context, *CreatePropertyRequest) (*CreatePropertyResponse, error)
	GetProperty(context.Context, *GetPropertyRequest) (*GetPropertyResponse, error)
	GetProperties(context.Context, *GetPropertiesRequest) (*GetPropertiesResponse, error)
	UpdateProperty(context.Context, *UpdatePropertyRequest) (*UpdatePropertyResponse, error)
	AttachPropertyValue(context.Context, *AttachPropertyValueRequest) (*AttachPropertyValueResponse, error)
	GetAttachedPropertyValues(context.Context, *GetAttachedPropertyValuesRequest) (*GetAttachedPropertyValuesResponse, error)
	mustEmbedUnimplementedPropertiesServiceServer()
}

// UnimplementedPropertiesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPropertiesServiceServer struct {
}

func (UnimplementedPropertiesServiceServer) CreateProperty(context.Context, *CreatePropertyRequest) (*CreatePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProperty not implemented")
}
func (UnimplementedPropertiesServiceServer) GetProperty(context.Context, *GetPropertyRequest) (*GetPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperty not implemented")
}
func (UnimplementedPropertiesServiceServer) GetProperties(context.Context, *GetPropertiesRequest) (*GetPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperties not implemented")
}
func (UnimplementedPropertiesServiceServer) UpdateProperty(context.Context, *UpdatePropertyRequest) (*UpdatePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProperty not implemented")
}
func (UnimplementedPropertiesServiceServer) AttachPropertyValue(context.Context, *AttachPropertyValueRequest) (*AttachPropertyValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachPropertyValue not implemented")
}
func (UnimplementedPropertiesServiceServer) GetAttachedPropertyValues(context.Context, *GetAttachedPropertyValuesRequest) (*GetAttachedPropertyValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachedPropertyValues not implemented")
}
func (UnimplementedPropertiesServiceServer) mustEmbedUnimplementedPropertiesServiceServer() {}

// UnsafePropertiesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertiesServiceServer will
// result in compilation errors.
type UnsafePropertiesServiceServer interface {
	mustEmbedUnimplementedPropertiesServiceServer()
}

func RegisterPropertiesServiceServer(s grpc.ServiceRegistrar, srv PropertiesServiceServer) {
	s.RegisterService(&PropertiesService_ServiceDesc, srv)
}

func _PropertiesService_CreateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertiesServiceServer).CreateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertiesService_CreateProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertiesServiceServer).CreateProperty(ctx, req.(*CreatePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertiesService_GetProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertiesServiceServer).GetProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertiesService_GetProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertiesServiceServer).GetProperty(ctx, req.(*GetPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertiesService_GetProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertiesServiceServer).GetProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertiesService_GetProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertiesServiceServer).GetProperties(ctx, req.(*GetPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertiesService_UpdateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertiesServiceServer).UpdateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertiesService_UpdateProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertiesServiceServer).UpdateProperty(ctx, req.(*UpdatePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertiesService_AttachPropertyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachPropertyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertiesServiceServer).AttachPropertyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertiesService_AttachPropertyValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertiesServiceServer).AttachPropertyValue(ctx, req.(*AttachPropertyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertiesService_GetAttachedPropertyValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachedPropertyValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertiesServiceServer).GetAttachedPropertyValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertiesService_GetAttachedPropertyValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertiesServiceServer).GetAttachedPropertyValues(ctx, req.(*GetAttachedPropertyValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertiesService_ServiceDesc is the grpc.ServiceDesc for PropertiesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertiesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.services.tasks_svc.v1.PropertiesService",
	HandlerType: (*PropertiesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProperty",
			Handler:    _PropertiesService_CreateProperty_Handler,
		},
		{
			MethodName: "GetProperty",
			Handler:    _PropertiesService_GetProperty_Handler,
		},
		{
			MethodName: "GetProperties",
			Handler:    _PropertiesService_GetProperties_Handler,
		},
		{
			MethodName: "UpdateProperty",
			Handler:    _PropertiesService_UpdateProperty_Handler,
		},
		{
			MethodName: "AttachPropertyValue",
			Handler:    _PropertiesService_AttachPropertyValue_Handler,
		},
		{
			MethodName: "GetAttachedPropertyValues",
			Handler:    _PropertiesService_GetAttachedPropertyValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/tasks_svc/v1/properties_svc.proto",
}
