// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: proto/services/properties_svc/v1/properties_svc.proto

package properties_svc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreatePropertySetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Properties []string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" validate:"dive,uuid4"` // @gotags: validate:"dive,uuid4"
}

func (x *CreatePropertySetRequest) Reset() {
	*x = CreatePropertySetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertySetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertySetRequest) ProtoMessage() {}

func (x *CreatePropertySetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertySetRequest.ProtoReflect.Descriptor instead.
func (*CreatePropertySetRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePropertySetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePropertySetRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CreatePropertySetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertySetId string `protobuf:"bytes,1,opt,name=property_set_id,json=propertySetId,proto3" json:"property_set_id,omitempty"`
}

func (x *CreatePropertySetResponse) Reset() {
	*x = CreatePropertySetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertySetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertySetResponse) ProtoMessage() {}

func (x *CreatePropertySetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertySetResponse.ProtoReflect.Descriptor instead.
func (*CreatePropertySetResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePropertySetResponse) GetPropertySetId() string {
	if x != nil {
		return x.PropertySetId
	}
	return ""
}

type UpdatePropertySetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId             string   `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty" validate:"uuid4"`                                          // @gotags: validate:"uuid4"
	Name              *string  `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`                                                                    // TODO: add validation
	AddedProperties   []string `protobuf:"bytes,3,rep,name=added_properties,json=addedProperties,proto3" json:"added_properties,omitempty" validate:"dive,uuid4"`       // @gotags: validate:"dive,uuid4"
	RemovedProperties []string `protobuf:"bytes,4,rep,name=removed_properties,json=removedProperties,proto3" json:"removed_properties,omitempty" validate:"dive,uuid4"` // @gotags: validate:"dive,uuid4"
}

func (x *UpdatePropertySetRequest) Reset() {
	*x = UpdatePropertySetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertySetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertySetRequest) ProtoMessage() {}

func (x *UpdatePropertySetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertySetRequest.ProtoReflect.Descriptor instead.
func (*UpdatePropertySetRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{2}
}

func (x *UpdatePropertySetRequest) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *UpdatePropertySetRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdatePropertySetRequest) GetAddedProperties() []string {
	if x != nil {
		return x.AddedProperties
	}
	return nil
}

func (x *UpdatePropertySetRequest) GetRemovedProperties() []string {
	if x != nil {
		return x.RemovedProperties
	}
	return nil
}

type UpdatePropertySetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePropertySetResponse) Reset() {
	*x = UpdatePropertySetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertySetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertySetResponse) ProtoMessage() {}

func (x *UpdatePropertySetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertySetResponse.ProtoReflect.Descriptor instead.
func (*UpdatePropertySetResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{3}
}

type DeletePropertySetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId string `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty" validate:"uuid4"` // @gotags: validate:"uuid4"
}

func (x *DeletePropertySetRequest) Reset() {
	*x = DeletePropertySetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePropertySetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePropertySetRequest) ProtoMessage() {}

func (x *DeletePropertySetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePropertySetRequest.ProtoReflect.Descriptor instead.
func (*DeletePropertySetRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{4}
}

func (x *DeletePropertySetRequest) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

type DeletePropertySetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePropertySetResponse) Reset() {
	*x = DeletePropertySetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePropertySetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePropertySetResponse) ProtoMessage() {}

func (x *DeletePropertySetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePropertySetResponse.ProtoReflect.Descriptor instead.
func (*DeletePropertySetResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{5}
}

type CreatePropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context     ViewContext `protobuf:"varint,1,opt,name=context,proto3,enum=proto.services.properties_svc.v1.ViewContext" json:"context,omitempty"`
	SubjectType SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=proto.services.properties_svc.v1.SubjectType" json:"subject_type,omitempty"` // TODO: add validation here (not-unspecified check)
	FieldType   FieldType   `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=proto.services.properties_svc.v1.FieldType" json:"field_type,omitempty"`         // TODO: add validation here (not-unspecified check)
	Name        string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                                     // TODO: add validation (at least non-empty checks)
	Description *string     `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`                                                                 // TODO: add validation, if needed
	// ID of set this Property should belong to
	SetId                          *string `protobuf:"bytes,6,opt,name=set_id,json=setId,proto3,oneof" json:"set_id,omitempty"`
	AlwaysIncludeForCurrentContext *bool   `protobuf:"varint,7,opt,name=always_include_for_current_context,json=alwaysIncludeForCurrentContext,proto3,oneof" json:"always_include_for_current_context,omitempty"`
	// Types that are assignable to FieldTypeData:
	//
	//	*CreatePropertyRequest_None
	//	*CreatePropertyRequest_SelectData_
	FieldTypeData isCreatePropertyRequest_FieldTypeData `protobuf_oneof:"field_type_data"`
}

func (x *CreatePropertyRequest) Reset() {
	*x = CreatePropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertyRequest) ProtoMessage() {}

func (x *CreatePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertyRequest.ProtoReflect.Descriptor instead.
func (*CreatePropertyRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePropertyRequest) GetContext() ViewContext {
	if x != nil {
		return x.Context
	}
	return ViewContext_VIEW_CONTEXT_UNSPECIFIED
}

func (x *CreatePropertyRequest) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

func (x *CreatePropertyRequest) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FIELD_TYPE_UNSPECIFIED
}

func (x *CreatePropertyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePropertyRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreatePropertyRequest) GetSetId() string {
	if x != nil && x.SetId != nil {
		return *x.SetId
	}
	return ""
}

func (x *CreatePropertyRequest) GetAlwaysIncludeForCurrentContext() bool {
	if x != nil && x.AlwaysIncludeForCurrentContext != nil {
		return *x.AlwaysIncludeForCurrentContext
	}
	return false
}

func (m *CreatePropertyRequest) GetFieldTypeData() isCreatePropertyRequest_FieldTypeData {
	if m != nil {
		return m.FieldTypeData
	}
	return nil
}

func (x *CreatePropertyRequest) GetNone() bool {
	if x, ok := x.GetFieldTypeData().(*CreatePropertyRequest_None); ok {
		return x.None
	}
	return false
}

func (x *CreatePropertyRequest) GetSelectData() *CreatePropertyRequest_SelectData {
	if x, ok := x.GetFieldTypeData().(*CreatePropertyRequest_SelectData_); ok {
		return x.SelectData
	}
	return nil
}

type isCreatePropertyRequest_FieldTypeData interface {
	isCreatePropertyRequest_FieldTypeData()
}

type CreatePropertyRequest_None struct {
	None bool `protobuf:"varint,8,opt,name=none,proto3,oneof"`
}

type CreatePropertyRequest_SelectData_ struct {
	SelectData *CreatePropertyRequest_SelectData `protobuf:"bytes,9,opt,name=select_data,json=selectData,proto3,oneof"`
}

func (*CreatePropertyRequest_None) isCreatePropertyRequest_FieldTypeData() {}

func (*CreatePropertyRequest_SelectData_) isCreatePropertyRequest_FieldTypeData() {}

type CreatePropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyId string `protobuf:"bytes,1,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
}

func (x *CreatePropertyResponse) Reset() {
	*x = CreatePropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertyResponse) ProtoMessage() {}

func (x *CreatePropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertyResponse.ProtoReflect.Descriptor instead.
func (*CreatePropertyResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{7}
}

func (x *CreatePropertyResponse) GetPropertyId() string {
	if x != nil {
		return x.PropertyId
	}
	return ""
}

type GetPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"uuid4"` // @gotags: validate:"uuid4"
	Context ViewContext `protobuf:"varint,2,opt,name=context,proto3,enum=proto.services.properties_svc.v1.ViewContext" json:"context,omitempty"`
}

func (x *GetPropertyRequest) Reset() {
	*x = GetPropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyRequest) ProtoMessage() {}

func (x *GetPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyRequest.ProtoReflect.Descriptor instead.
func (*GetPropertyRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{8}
}

func (x *GetPropertyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPropertyRequest) GetContext() ViewContext {
	if x != nil {
		return x.Context
	}
	return ViewContext_VIEW_CONTEXT_UNSPECIFIED
}

type GetPropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubjectType SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=proto.services.properties_svc.v1.SubjectType" json:"subject_type,omitempty"`
	FieldType   FieldType   `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=proto.services.properties_svc.v1.FieldType" json:"field_type,omitempty"`
	Name        string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description *string     `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsArchived  bool        `protobuf:"varint,6,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
	// ID of set this Property should belong to
	SetId *string `protobuf:"bytes,8,opt,name=set_id,json=setId,proto3,oneof" json:"set_id,omitempty"`
	// Types that are assignable to FieldTypeData:
	//
	//	*GetPropertyResponse_None
	//	*GetPropertyResponse_SelectData_
	FieldTypeData                  isGetPropertyResponse_FieldTypeData `protobuf_oneof:"field_type_data"`
	AlwaysIncludeForCurrentContext *bool                               `protobuf:"varint,11,opt,name=always_include_for_current_context,json=alwaysIncludeForCurrentContext,proto3,oneof" json:"always_include_for_current_context,omitempty"`
}

func (x *GetPropertyResponse) Reset() {
	*x = GetPropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyResponse) ProtoMessage() {}

func (x *GetPropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyResponse.ProtoReflect.Descriptor instead.
func (*GetPropertyResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{9}
}

func (x *GetPropertyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPropertyResponse) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

func (x *GetPropertyResponse) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FIELD_TYPE_UNSPECIFIED
}

func (x *GetPropertyResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPropertyResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GetPropertyResponse) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *GetPropertyResponse) GetSetId() string {
	if x != nil && x.SetId != nil {
		return *x.SetId
	}
	return ""
}

func (m *GetPropertyResponse) GetFieldTypeData() isGetPropertyResponse_FieldTypeData {
	if m != nil {
		return m.FieldTypeData
	}
	return nil
}

func (x *GetPropertyResponse) GetNone() bool {
	if x, ok := x.GetFieldTypeData().(*GetPropertyResponse_None); ok {
		return x.None
	}
	return false
}

func (x *GetPropertyResponse) GetSelectData() *GetPropertyResponse_SelectData {
	if x, ok := x.GetFieldTypeData().(*GetPropertyResponse_SelectData_); ok {
		return x.SelectData
	}
	return nil
}

func (x *GetPropertyResponse) GetAlwaysIncludeForCurrentContext() bool {
	if x != nil && x.AlwaysIncludeForCurrentContext != nil {
		return *x.AlwaysIncludeForCurrentContext
	}
	return false
}

type isGetPropertyResponse_FieldTypeData interface {
	isGetPropertyResponse_FieldTypeData()
}

type GetPropertyResponse_None struct {
	None bool `protobuf:"varint,9,opt,name=none,proto3,oneof"`
}

type GetPropertyResponse_SelectData_ struct {
	SelectData *GetPropertyResponse_SelectData `protobuf:"bytes,10,opt,name=select_data,json=selectData,proto3,oneof"`
}

func (*GetPropertyResponse_None) isGetPropertyResponse_FieldTypeData() {}

func (*GetPropertyResponse_SelectData_) isGetPropertyResponse_FieldTypeData() {}

type GetPropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId       *string      `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3,oneof" json:"set_id,omitempty" validate:"uuid4"` // @gotags: validate:"uuid4"
	SubjectType *SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=proto.services.properties_svc.v1.SubjectType,oneof" json:"subject_type,omitempty"`
}

func (x *GetPropertiesRequest) Reset() {
	*x = GetPropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertiesRequest) ProtoMessage() {}

func (x *GetPropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertiesRequest.ProtoReflect.Descriptor instead.
func (*GetPropertiesRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{10}
}

func (x *GetPropertiesRequest) GetSetId() string {
	if x != nil && x.SetId != nil {
		return *x.SetId
	}
	return ""
}

func (x *GetPropertiesRequest) GetSubjectType() SubjectType {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

type GetPropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties []*GetPropertiesResponse_Property `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *GetPropertiesResponse) Reset() {
	*x = GetPropertiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertiesResponse) ProtoMessage() {}

func (x *GetPropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertiesResponse.ProtoReflect.Descriptor instead.
func (*GetPropertiesResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{11}
}

func (x *GetPropertiesResponse) GetProperties() []*GetPropertiesResponse_Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

type UpdatePropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubjectType *SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=proto.services.properties_svc.v1.SubjectType,oneof" json:"subject_type,omitempty"`
	FieldType   *FieldType   `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=proto.services.properties_svc.v1.FieldType,oneof" json:"field_type,omitempty"`
	Name        *string      `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`               // TODO: validation
	Description *string      `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"` // TODO: validation
	IsArchived  *bool        `protobuf:"varint,6,opt,name=is_archived,json=isArchived,proto3,oneof" json:"is_archived,omitempty"`
	// ID of set this Property should belong to
	SetId *string `protobuf:"bytes,8,opt,name=set_id,json=setId,proto3,oneof" json:"set_id,omitempty"`
	// Types that are assignable to FieldTypeData:
	//
	//	*UpdatePropertyRequest_None
	//	*UpdatePropertyRequest_SelectData_
	FieldTypeData isUpdatePropertyRequest_FieldTypeData `protobuf_oneof:"field_type_data"`
}

func (x *UpdatePropertyRequest) Reset() {
	*x = UpdatePropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertyRequest) ProtoMessage() {}

func (x *UpdatePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePropertyRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{12}
}

func (x *UpdatePropertyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePropertyRequest) GetSubjectType() SubjectType {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

func (x *UpdatePropertyRequest) GetFieldType() FieldType {
	if x != nil && x.FieldType != nil {
		return *x.FieldType
	}
	return FieldType_FIELD_TYPE_UNSPECIFIED
}

func (x *UpdatePropertyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdatePropertyRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdatePropertyRequest) GetIsArchived() bool {
	if x != nil && x.IsArchived != nil {
		return *x.IsArchived
	}
	return false
}

func (x *UpdatePropertyRequest) GetSetId() string {
	if x != nil && x.SetId != nil {
		return *x.SetId
	}
	return ""
}

func (m *UpdatePropertyRequest) GetFieldTypeData() isUpdatePropertyRequest_FieldTypeData {
	if m != nil {
		return m.FieldTypeData
	}
	return nil
}

func (x *UpdatePropertyRequest) GetNone() bool {
	if x, ok := x.GetFieldTypeData().(*UpdatePropertyRequest_None); ok {
		return x.None
	}
	return false
}

func (x *UpdatePropertyRequest) GetSelectData() *UpdatePropertyRequest_SelectData {
	if x, ok := x.GetFieldTypeData().(*UpdatePropertyRequest_SelectData_); ok {
		return x.SelectData
	}
	return nil
}

type isUpdatePropertyRequest_FieldTypeData interface {
	isUpdatePropertyRequest_FieldTypeData()
}

type UpdatePropertyRequest_None struct {
	None bool `protobuf:"varint,9,opt,name=none,proto3,oneof"`
}

type UpdatePropertyRequest_SelectData_ struct {
	SelectData *UpdatePropertyRequest_SelectData `protobuf:"bytes,10,opt,name=select_data,json=selectData,proto3,oneof"`
}

func (*UpdatePropertyRequest_None) isUpdatePropertyRequest_FieldTypeData() {}

func (*UpdatePropertyRequest_SelectData_) isUpdatePropertyRequest_FieldTypeData() {}

type UpdatePropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePropertyResponse) Reset() {
	*x = UpdatePropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertyResponse) ProtoMessage() {}

func (x *UpdatePropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePropertyResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{13}
}

// attach the same property again to update
type AttachPropertyValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId   string      `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty" validate:"uuid4"`                                         // @gotags: validate:"uuid4"
	SubjectType SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=proto.services.properties_svc.v1.SubjectType" json:"subject_type,omitempty"` // TODO: validation (not 0)
	PropertyId  string      `protobuf:"bytes,3,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty" validate:"uuid4"`                                      // @gotags: validate:"uuid4"
	// Types that are assignable to Value:
	//
	//	*AttachPropertyValueRequest_IsUndefined
	//	*AttachPropertyValueRequest_TextValue
	//	*AttachPropertyValueRequest_NumberValue
	//	*AttachPropertyValueRequest_BoolValue
	//	*AttachPropertyValueRequest_DateValue
	//	*AttachPropertyValueRequest_DateTimeValue
	//	*AttachPropertyValueRequest_SelectValue
	Value isAttachPropertyValueRequest_Value `protobuf_oneof:"value"`
}

func (x *AttachPropertyValueRequest) Reset() {
	*x = AttachPropertyValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachPropertyValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachPropertyValueRequest) ProtoMessage() {}

func (x *AttachPropertyValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachPropertyValueRequest.ProtoReflect.Descriptor instead.
func (*AttachPropertyValueRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{14}
}

func (x *AttachPropertyValueRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *AttachPropertyValueRequest) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

func (x *AttachPropertyValueRequest) GetPropertyId() string {
	if x != nil {
		return x.PropertyId
	}
	return ""
}

func (m *AttachPropertyValueRequest) GetValue() isAttachPropertyValueRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AttachPropertyValueRequest) GetIsUndefined() bool {
	if x, ok := x.GetValue().(*AttachPropertyValueRequest_IsUndefined); ok {
		return x.IsUndefined
	}
	return false
}

func (x *AttachPropertyValueRequest) GetTextValue() string {
	if x, ok := x.GetValue().(*AttachPropertyValueRequest_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (x *AttachPropertyValueRequest) GetNumberValue() float32 {
	if x, ok := x.GetValue().(*AttachPropertyValueRequest_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *AttachPropertyValueRequest) GetBoolValue() bool {
	if x, ok := x.GetValue().(*AttachPropertyValueRequest_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *AttachPropertyValueRequest) GetDateValue() string {
	if x, ok := x.GetValue().(*AttachPropertyValueRequest_DateValue); ok {
		return x.DateValue
	}
	return ""
}

func (x *AttachPropertyValueRequest) GetDateTimeValue() string {
	if x, ok := x.GetValue().(*AttachPropertyValueRequest_DateTimeValue); ok {
		return x.DateTimeValue
	}
	return ""
}

func (x *AttachPropertyValueRequest) GetSelectValue() string {
	if x, ok := x.GetValue().(*AttachPropertyValueRequest_SelectValue); ok {
		return x.SelectValue
	}
	return ""
}

type isAttachPropertyValueRequest_Value interface {
	isAttachPropertyValueRequest_Value()
}

type AttachPropertyValueRequest_IsUndefined struct {
	IsUndefined bool `protobuf:"varint,4,opt,name=is_undefined,json=isUndefined,proto3,oneof"` // if it exists, it should be true
}

type AttachPropertyValueRequest_TextValue struct {
	TextValue string `protobuf:"bytes,5,opt,name=text_value,json=textValue,proto3,oneof"` // FIELD_TYPE_TEXT
}

type AttachPropertyValueRequest_NumberValue struct {
	NumberValue float32 `protobuf:"fixed32,6,opt,name=number_value,json=numberValue,proto3,oneof"` // FIELD_TYPE_NUMBER
}

type AttachPropertyValueRequest_BoolValue struct {
	BoolValue bool `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3,oneof"` // FIELD_TYPE_CHECKBOX
}

type AttachPropertyValueRequest_DateValue struct {
	DateValue string `protobuf:"bytes,8,opt,name=date_value,json=dateValue,proto3,oneof"` // FIELD_TYPE_DATE TODO: is there a proto date type?
}

type AttachPropertyValueRequest_DateTimeValue struct {
	DateTimeValue string `protobuf:"bytes,9,opt,name=date_time_value,json=dateTimeValue,proto3,oneof"` // FIELD_TYPE_DATE_TIME
}

type AttachPropertyValueRequest_SelectValue struct {
	SelectValue string `protobuf:"bytes,10,opt,name=select_value,json=selectValue,proto3,oneof"` // FIELD_TYPE_SELECT, id of option
}

func (*AttachPropertyValueRequest_IsUndefined) isAttachPropertyValueRequest_Value() {}

func (*AttachPropertyValueRequest_TextValue) isAttachPropertyValueRequest_Value() {}

func (*AttachPropertyValueRequest_NumberValue) isAttachPropertyValueRequest_Value() {}

func (*AttachPropertyValueRequest_BoolValue) isAttachPropertyValueRequest_Value() {}

func (*AttachPropertyValueRequest_DateValue) isAttachPropertyValueRequest_Value() {}

func (*AttachPropertyValueRequest_DateTimeValue) isAttachPropertyValueRequest_Value() {}

func (*AttachPropertyValueRequest_SelectValue) isAttachPropertyValueRequest_Value() {}

type AttachPropertyValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyValueId string `protobuf:"bytes,1,opt,name=property_value_id,json=propertyValueId,proto3" json:"property_value_id,omitempty"`
}

func (x *AttachPropertyValueResponse) Reset() {
	*x = AttachPropertyValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachPropertyValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachPropertyValueResponse) ProtoMessage() {}

func (x *AttachPropertyValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachPropertyValueResponse.ProtoReflect.Descriptor instead.
func (*AttachPropertyValueResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{15}
}

func (x *AttachPropertyValueResponse) GetPropertyValueId() string {
	if x != nil {
		return x.PropertyValueId
	}
	return ""
}

type GetAttachedPropertyValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty" validate:"uuid4"` // @gotags: validate:"uuid4"
}

func (x *GetAttachedPropertyValuesRequest) Reset() {
	*x = GetAttachedPropertyValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttachedPropertyValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttachedPropertyValuesRequest) ProtoMessage() {}

func (x *GetAttachedPropertyValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttachedPropertyValuesRequest.ProtoReflect.Descriptor instead.
func (*GetAttachedPropertyValuesRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{16}
}

func (x *GetAttachedPropertyValuesRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

type GetAttachedPropertyValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*GetAttachedPropertyValuesResponse_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"` // TODO: TBD: Property Information for Values
}

func (x *GetAttachedPropertyValuesResponse) Reset() {
	*x = GetAttachedPropertyValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttachedPropertyValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttachedPropertyValuesResponse) ProtoMessage() {}

func (x *GetAttachedPropertyValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttachedPropertyValuesResponse.ProtoReflect.Descriptor instead.
func (*GetAttachedPropertyValuesResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{17}
}

func (x *GetAttachedPropertyValuesResponse) GetValues() []*GetAttachedPropertyValuesResponse_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type UpdatePatientPropertyViewRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// matchers
	WardId    *string `protobuf:"bytes,1,opt,name=ward_id,json=wardId,proto3,oneof" json:"ward_id,omitempty"`
	PatientId *string `protobuf:"bytes,2,opt,name=patient_id,json=patientId,proto3,oneof" json:"patient_id,omitempty"`
	// Types that are assignable to SoftRequired:
	//
	//	*UpdatePatientPropertyViewRuleRequest_ResetSoftRequired
	//	*UpdatePatientPropertyViewRuleRequest_SetSoftRequired
	SoftRequired isUpdatePatientPropertyViewRuleRequest_SoftRequired `protobuf_oneof:"soft_required"`
	// append property_id to the always_include list
	// this means the property is shown, unless a more specific rule
	// puts it in its dont_always_include list
	AppendToAlwaysInclude *string `protobuf:"bytes,5,opt,name=append_to_always_include,json=appendToAlwaysInclude,proto3,oneof" json:"append_to_always_include,omitempty"`
	// remove property_id to the always_include list, also see append_to_always_include
	RemoveFromAlwaysInclude *string `protobuf:"bytes,6,opt,name=remove_from_always_include,json=removeFromAlwaysInclude,proto3,oneof" json:"remove_from_always_include,omitempty"`
	// append property_id to the dont_always_include list, also see append_to_always_include
	AppendToDontAlwaysInclude *string `protobuf:"bytes,7,opt,name=append_to_dont_always_include,json=appendToDontAlwaysInclude,proto3,oneof" json:"append_to_dont_always_include,omitempty"`
	// remove property_id to the dont_always_include list, also see append_to_always_include
	RemoveFromDontAlwaysInclude *string `protobuf:"bytes,8,opt,name=remove_from_dont_always_include,json=removeFromDontAlwaysInclude,proto3,oneof" json:"remove_from_dont_always_include,omitempty"`
}

func (x *UpdatePatientPropertyViewRuleRequest) Reset() {
	*x = UpdatePatientPropertyViewRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePatientPropertyViewRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePatientPropertyViewRuleRequest) ProtoMessage() {}

func (x *UpdatePatientPropertyViewRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePatientPropertyViewRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdatePatientPropertyViewRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{18}
}

func (x *UpdatePatientPropertyViewRuleRequest) GetWardId() string {
	if x != nil && x.WardId != nil {
		return *x.WardId
	}
	return ""
}

func (x *UpdatePatientPropertyViewRuleRequest) GetPatientId() string {
	if x != nil && x.PatientId != nil {
		return *x.PatientId
	}
	return ""
}

func (m *UpdatePatientPropertyViewRuleRequest) GetSoftRequired() isUpdatePatientPropertyViewRuleRequest_SoftRequired {
	if m != nil {
		return m.SoftRequired
	}
	return nil
}

func (x *UpdatePatientPropertyViewRuleRequest) GetResetSoftRequired() bool {
	if x, ok := x.GetSoftRequired().(*UpdatePatientPropertyViewRuleRequest_ResetSoftRequired); ok {
		return x.ResetSoftRequired
	}
	return false
}

func (x *UpdatePatientPropertyViewRuleRequest) GetSetSoftRequired() bool {
	if x, ok := x.GetSoftRequired().(*UpdatePatientPropertyViewRuleRequest_SetSoftRequired); ok {
		return x.SetSoftRequired
	}
	return false
}

func (x *UpdatePatientPropertyViewRuleRequest) GetAppendToAlwaysInclude() string {
	if x != nil && x.AppendToAlwaysInclude != nil {
		return *x.AppendToAlwaysInclude
	}
	return ""
}

func (x *UpdatePatientPropertyViewRuleRequest) GetRemoveFromAlwaysInclude() string {
	if x != nil && x.RemoveFromAlwaysInclude != nil {
		return *x.RemoveFromAlwaysInclude
	}
	return ""
}

func (x *UpdatePatientPropertyViewRuleRequest) GetAppendToDontAlwaysInclude() string {
	if x != nil && x.AppendToDontAlwaysInclude != nil {
		return *x.AppendToDontAlwaysInclude
	}
	return ""
}

func (x *UpdatePatientPropertyViewRuleRequest) GetRemoveFromDontAlwaysInclude() string {
	if x != nil && x.RemoveFromDontAlwaysInclude != nil {
		return *x.RemoveFromDontAlwaysInclude
	}
	return ""
}

type isUpdatePatientPropertyViewRuleRequest_SoftRequired interface {
	isUpdatePatientPropertyViewRuleRequest_SoftRequired()
}

type UpdatePatientPropertyViewRuleRequest_ResetSoftRequired struct {
	ResetSoftRequired bool `protobuf:"varint,3,opt,name=reset_soft_required,json=resetSoftRequired,proto3,oneof"` // sets soft_required to null for this matcher, when true
}

type UpdatePatientPropertyViewRuleRequest_SetSoftRequired struct {
	SetSoftRequired bool `protobuf:"varint,4,opt,name=set_soft_required,json=setSoftRequired,proto3,oneof"` // sets the value of the soft_required filter for this matcher
}

func (*UpdatePatientPropertyViewRuleRequest_ResetSoftRequired) isUpdatePatientPropertyViewRuleRequest_SoftRequired() {
}

func (*UpdatePatientPropertyViewRuleRequest_SetSoftRequired) isUpdatePatientPropertyViewRuleRequest_SoftRequired() {
}

type UpdatePatientPropertyViewRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePatientPropertyViewRuleResponse) Reset() {
	*x = UpdatePatientPropertyViewRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePatientPropertyViewRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePatientPropertyViewRuleResponse) ProtoMessage() {}

func (x *UpdatePatientPropertyViewRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePatientPropertyViewRuleResponse.ProtoReflect.Descriptor instead.
func (*UpdatePatientPropertyViewRuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{19}
}

type UpdateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the property that we "move"
	PropertyId string `protobuf:"bytes,1,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
	// the id of the property with an id just before the property that you are moving
	// when left blank this means it's moved to the very top
	PrevNeighbor *string `protobuf:"bytes,2,opt,name=prev_neighbor,json=prevNeighbor,proto3,oneof" json:"prev_neighbor,omitempty"`
}

func (x *UpdateOrderRequest) Reset() {
	*x = UpdateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderRequest) ProtoMessage() {}

func (x *UpdateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateOrderRequest) GetPropertyId() string {
	if x != nil {
		return x.PropertyId
	}
	return ""
}

func (x *UpdateOrderRequest) GetPrevNeighbor() string {
	if x != nil && x.PrevNeighbor != nil {
		return *x.PrevNeighbor
	}
	return ""
}

type UpdateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrderResponse) Reset() {
	*x = UpdateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderResponse) ProtoMessage() {}

func (x *UpdateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{21}
}

type CreatePropertyRequest_SelectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowFreetext *bool                                            `protobuf:"varint,1,opt,name=allow_freetext,json=allowFreetext,proto3,oneof" json:"allow_freetext,omitempty"`
	Options       []*CreatePropertyRequest_SelectData_SelectOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreatePropertyRequest_SelectData) Reset() {
	*x = CreatePropertyRequest_SelectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertyRequest_SelectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertyRequest_SelectData) ProtoMessage() {}

func (x *CreatePropertyRequest_SelectData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertyRequest_SelectData.ProtoReflect.Descriptor instead.
func (*CreatePropertyRequest_SelectData) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CreatePropertyRequest_SelectData) GetAllowFreetext() bool {
	if x != nil && x.AllowFreetext != nil {
		return *x.AllowFreetext
	}
	return false
}

func (x *CreatePropertyRequest_SelectData) GetOptions() []*CreatePropertyRequest_SelectData_SelectOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreatePropertyRequest_SelectData_SelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                     // TODO: add validation (at least non-empty checks)
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"` // TODO: add validation, if needed
}

func (x *CreatePropertyRequest_SelectData_SelectOption) Reset() {
	*x = CreatePropertyRequest_SelectData_SelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertyRequest_SelectData_SelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertyRequest_SelectData_SelectOption) ProtoMessage() {}

func (x *CreatePropertyRequest_SelectData_SelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertyRequest_SelectData_SelectOption.ProtoReflect.Descriptor instead.
func (*CreatePropertyRequest_SelectData_SelectOption) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *CreatePropertyRequest_SelectData_SelectOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePropertyRequest_SelectData_SelectOption) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type GetPropertyResponse_SelectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowFreetext *bool                                          `protobuf:"varint,1,opt,name=allow_freetext,json=allowFreetext,proto3,oneof" json:"allow_freetext,omitempty"`
	Options       []*GetPropertyResponse_SelectData_SelectOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *GetPropertyResponse_SelectData) Reset() {
	*x = GetPropertyResponse_SelectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyResponse_SelectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyResponse_SelectData) ProtoMessage() {}

func (x *GetPropertyResponse_SelectData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyResponse_SelectData.ProtoReflect.Descriptor instead.
func (*GetPropertyResponse_SelectData) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetPropertyResponse_SelectData) GetAllowFreetext() bool {
	if x != nil && x.AllowFreetext != nil {
		return *x.AllowFreetext
	}
	return false
}

func (x *GetPropertyResponse_SelectData) GetOptions() []*GetPropertyResponse_SelectData_SelectOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetPropertyResponse_SelectData_SelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *GetPropertyResponse_SelectData_SelectOption) Reset() {
	*x = GetPropertyResponse_SelectData_SelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyResponse_SelectData_SelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyResponse_SelectData_SelectOption) ProtoMessage() {}

func (x *GetPropertyResponse_SelectData_SelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyResponse_SelectData_SelectOption.ProtoReflect.Descriptor instead.
func (*GetPropertyResponse_SelectData_SelectOption) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{9, 0, 0}
}

func (x *GetPropertyResponse_SelectData_SelectOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPropertyResponse_SelectData_SelectOption) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type GetPropertiesResponse_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubjectType SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=proto.services.properties_svc.v1.SubjectType" json:"subject_type,omitempty"`
	FieldType   FieldType   `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=proto.services.properties_svc.v1.FieldType" json:"field_type,omitempty"`
	Name        string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description *string     `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsArchived  bool        `protobuf:"varint,6,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
	// ID of set this Property should belong to
	SetId *string `protobuf:"bytes,8,opt,name=set_id,json=setId,proto3,oneof" json:"set_id,omitempty"`
	// Types that are assignable to FieldTypeData:
	//
	//	*GetPropertiesResponse_Property_None
	//	*GetPropertiesResponse_Property_SelectData_
	FieldTypeData                  isGetPropertiesResponse_Property_FieldTypeData `protobuf_oneof:"field_type_data"`
	AlwaysIncludeForCurrentContext *bool                                          `protobuf:"varint,11,opt,name=always_include_for_current_context,json=alwaysIncludeForCurrentContext,proto3,oneof" json:"always_include_for_current_context,omitempty"`
}

func (x *GetPropertiesResponse_Property) Reset() {
	*x = GetPropertiesResponse_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertiesResponse_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertiesResponse_Property) ProtoMessage() {}

func (x *GetPropertiesResponse_Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertiesResponse_Property.ProtoReflect.Descriptor instead.
func (*GetPropertiesResponse_Property) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetPropertiesResponse_Property) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPropertiesResponse_Property) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

func (x *GetPropertiesResponse_Property) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FIELD_TYPE_UNSPECIFIED
}

func (x *GetPropertiesResponse_Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPropertiesResponse_Property) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GetPropertiesResponse_Property) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *GetPropertiesResponse_Property) GetSetId() string {
	if x != nil && x.SetId != nil {
		return *x.SetId
	}
	return ""
}

func (m *GetPropertiesResponse_Property) GetFieldTypeData() isGetPropertiesResponse_Property_FieldTypeData {
	if m != nil {
		return m.FieldTypeData
	}
	return nil
}

func (x *GetPropertiesResponse_Property) GetNone() bool {
	if x, ok := x.GetFieldTypeData().(*GetPropertiesResponse_Property_None); ok {
		return x.None
	}
	return false
}

func (x *GetPropertiesResponse_Property) GetSelectData() *GetPropertiesResponse_Property_SelectData {
	if x, ok := x.GetFieldTypeData().(*GetPropertiesResponse_Property_SelectData_); ok {
		return x.SelectData
	}
	return nil
}

func (x *GetPropertiesResponse_Property) GetAlwaysIncludeForCurrentContext() bool {
	if x != nil && x.AlwaysIncludeForCurrentContext != nil {
		return *x.AlwaysIncludeForCurrentContext
	}
	return false
}

type isGetPropertiesResponse_Property_FieldTypeData interface {
	isGetPropertiesResponse_Property_FieldTypeData()
}

type GetPropertiesResponse_Property_None struct {
	None bool `protobuf:"varint,9,opt,name=none,proto3,oneof"`
}

type GetPropertiesResponse_Property_SelectData_ struct {
	SelectData *GetPropertiesResponse_Property_SelectData `protobuf:"bytes,10,opt,name=select_data,json=selectData,proto3,oneof"`
}

func (*GetPropertiesResponse_Property_None) isGetPropertiesResponse_Property_FieldTypeData() {}

func (*GetPropertiesResponse_Property_SelectData_) isGetPropertiesResponse_Property_FieldTypeData() {}

type GetPropertiesResponse_Property_SelectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowFreetext *bool                                                     `protobuf:"varint,1,opt,name=allow_freetext,json=allowFreetext,proto3,oneof" json:"allow_freetext,omitempty"`
	Options       []*GetPropertiesResponse_Property_SelectData_SelectOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *GetPropertiesResponse_Property_SelectData) Reset() {
	*x = GetPropertiesResponse_Property_SelectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertiesResponse_Property_SelectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertiesResponse_Property_SelectData) ProtoMessage() {}

func (x *GetPropertiesResponse_Property_SelectData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertiesResponse_Property_SelectData.ProtoReflect.Descriptor instead.
func (*GetPropertiesResponse_Property_SelectData) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{11, 0, 0}
}

func (x *GetPropertiesResponse_Property_SelectData) GetAllowFreetext() bool {
	if x != nil && x.AllowFreetext != nil {
		return *x.AllowFreetext
	}
	return false
}

func (x *GetPropertiesResponse_Property_SelectData) GetOptions() []*GetPropertiesResponse_Property_SelectData_SelectOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetPropertiesResponse_Property_SelectData_SelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsCustom    bool    `protobuf:"varint,3,opt,name=is_custom,json=isCustom,proto3" json:"is_custom,omitempty"`
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) Reset() {
	*x = GetPropertiesResponse_Property_SelectData_SelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertiesResponse_Property_SelectData_SelectOption) ProtoMessage() {}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertiesResponse_Property_SelectData_SelectOption.ProtoReflect.Descriptor instead.
func (*GetPropertiesResponse_Property_SelectData_SelectOption) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{11, 0, 0, 0}
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) GetIsCustom() bool {
	if x != nil {
		return x.IsCustom
	}
	return false
}

type UpdatePropertyRequest_SelectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowFreetext *bool                                            `protobuf:"varint,1,opt,name=allow_freetext,json=allowFreetext,proto3,oneof" json:"allow_freetext,omitempty"`
	RemoveOptions []string                                         `protobuf:"bytes,2,rep,name=remove_options,json=removeOptions,proto3" json:"remove_options,omitempty" validate:"dive,uuid4"` // @gotags: validate:"dive,uuid4"
	UpsertOptions []*UpdatePropertyRequest_SelectData_SelectOption `protobuf:"bytes,3,rep,name=upsert_options,json=upsertOptions,proto3" json:"upsert_options,omitempty"`
}

func (x *UpdatePropertyRequest_SelectData) Reset() {
	*x = UpdatePropertyRequest_SelectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertyRequest_SelectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertyRequest_SelectData) ProtoMessage() {}

func (x *UpdatePropertyRequest_SelectData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertyRequest_SelectData.ProtoReflect.Descriptor instead.
func (*UpdatePropertyRequest_SelectData) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{12, 0}
}

func (x *UpdatePropertyRequest_SelectData) GetAllowFreetext() bool {
	if x != nil && x.AllowFreetext != nil {
		return *x.AllowFreetext
	}
	return false
}

func (x *UpdatePropertyRequest_SelectData) GetRemoveOptions() []string {
	if x != nil {
		return x.RemoveOptions
	}
	return nil
}

func (x *UpdatePropertyRequest_SelectData) GetUpsertOptions() []*UpdatePropertyRequest_SelectData_SelectOption {
	if x != nil {
		return x.UpsertOptions
	}
	return nil
}

type UpdatePropertyRequest_SelectData_SelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsCustom    *bool   `protobuf:"varint,4,opt,name=is_custom,json=isCustom,proto3,oneof" json:"is_custom,omitempty"`
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) Reset() {
	*x = UpdatePropertyRequest_SelectData_SelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertyRequest_SelectData_SelectOption) ProtoMessage() {}

func (x *UpdatePropertyRequest_SelectData_SelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertyRequest_SelectData_SelectOption.ProtoReflect.Descriptor instead.
func (*UpdatePropertyRequest_SelectData_SelectOption) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) GetIsCustom() bool {
	if x != nil && x.IsCustom != nil {
		return *x.IsCustom
	}
	return false
}

type GetAttachedPropertyValuesResponse_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyId  string                                       `protobuf:"bytes,1,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
	FieldType   FieldType                                    `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=proto.services.properties_svc.v1.FieldType" json:"field_type,omitempty"`
	Name        string                                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description *string                                      `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsArchived  bool                                         `protobuf:"varint,5,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
	Set         *GetAttachedPropertyValuesResponse_Value_Set `protobuf:"bytes,7,opt,name=set,proto3,oneof" json:"set,omitempty"`
	// Types that are assignable to Value:
	//
	//	*GetAttachedPropertyValuesResponse_Value_IsUndefined
	//	*GetAttachedPropertyValuesResponse_Value_TextValue
	//	*GetAttachedPropertyValuesResponse_Value_NumberValue
	//	*GetAttachedPropertyValuesResponse_Value_BoolValue
	//	*GetAttachedPropertyValuesResponse_Value_DateValue
	//	*GetAttachedPropertyValuesResponse_Value_DateTimeValue
	//	*GetAttachedPropertyValuesResponse_Value_SelectValue
	Value isGetAttachedPropertyValuesResponse_Value_Value `protobuf_oneof:"value"`
}

func (x *GetAttachedPropertyValuesResponse_Value) Reset() {
	*x = GetAttachedPropertyValuesResponse_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttachedPropertyValuesResponse_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttachedPropertyValuesResponse_Value) ProtoMessage() {}

func (x *GetAttachedPropertyValuesResponse_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttachedPropertyValuesResponse_Value.ProtoReflect.Descriptor instead.
func (*GetAttachedPropertyValuesResponse_Value) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetAttachedPropertyValuesResponse_Value) GetPropertyId() string {
	if x != nil {
		return x.PropertyId
	}
	return ""
}

func (x *GetAttachedPropertyValuesResponse_Value) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FIELD_TYPE_UNSPECIFIED
}

func (x *GetAttachedPropertyValuesResponse_Value) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAttachedPropertyValuesResponse_Value) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GetAttachedPropertyValuesResponse_Value) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *GetAttachedPropertyValuesResponse_Value) GetSet() *GetAttachedPropertyValuesResponse_Value_Set {
	if x != nil {
		return x.Set
	}
	return nil
}

func (m *GetAttachedPropertyValuesResponse_Value) GetValue() isGetAttachedPropertyValuesResponse_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *GetAttachedPropertyValuesResponse_Value) GetIsUndefined() bool {
	if x, ok := x.GetValue().(*GetAttachedPropertyValuesResponse_Value_IsUndefined); ok {
		return x.IsUndefined
	}
	return false
}

func (x *GetAttachedPropertyValuesResponse_Value) GetTextValue() string {
	if x, ok := x.GetValue().(*GetAttachedPropertyValuesResponse_Value_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (x *GetAttachedPropertyValuesResponse_Value) GetNumberValue() float32 {
	if x, ok := x.GetValue().(*GetAttachedPropertyValuesResponse_Value_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *GetAttachedPropertyValuesResponse_Value) GetBoolValue() bool {
	if x, ok := x.GetValue().(*GetAttachedPropertyValuesResponse_Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *GetAttachedPropertyValuesResponse_Value) GetDateValue() string {
	if x, ok := x.GetValue().(*GetAttachedPropertyValuesResponse_Value_DateValue); ok {
		return x.DateValue
	}
	return ""
}

func (x *GetAttachedPropertyValuesResponse_Value) GetDateTimeValue() string {
	if x, ok := x.GetValue().(*GetAttachedPropertyValuesResponse_Value_DateTimeValue); ok {
		return x.DateTimeValue
	}
	return ""
}

func (x *GetAttachedPropertyValuesResponse_Value) GetSelectValue() string {
	if x, ok := x.GetValue().(*GetAttachedPropertyValuesResponse_Value_SelectValue); ok {
		return x.SelectValue
	}
	return ""
}

type isGetAttachedPropertyValuesResponse_Value_Value interface {
	isGetAttachedPropertyValuesResponse_Value_Value()
}

type GetAttachedPropertyValuesResponse_Value_IsUndefined struct {
	IsUndefined bool `protobuf:"varint,8,opt,name=is_undefined,json=isUndefined,proto3,oneof"` // if it exists, it's true
}

type GetAttachedPropertyValuesResponse_Value_TextValue struct {
	TextValue string `protobuf:"bytes,9,opt,name=text_value,json=textValue,proto3,oneof"` // FIELD_TYPE_TEXT
}

type GetAttachedPropertyValuesResponse_Value_NumberValue struct {
	NumberValue float32 `protobuf:"fixed32,10,opt,name=number_value,json=numberValue,proto3,oneof"` // FIELD_TYPE_NUMBER
}

type GetAttachedPropertyValuesResponse_Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,11,opt,name=bool_value,json=boolValue,proto3,oneof"` // FIELD_TYPE_CHECKBOX
}

type GetAttachedPropertyValuesResponse_Value_DateValue struct {
	DateValue string `protobuf:"bytes,12,opt,name=date_value,json=dateValue,proto3,oneof"` // FIELD_TYPE_DATE TODO: is there a proto date type?
}

type GetAttachedPropertyValuesResponse_Value_DateTimeValue struct {
	DateTimeValue string `protobuf:"bytes,13,opt,name=date_time_value,json=dateTimeValue,proto3,oneof"` // FIELD_TYPE_DATE_TIME
}

type GetAttachedPropertyValuesResponse_Value_SelectValue struct {
	SelectValue string `protobuf:"bytes,14,opt,name=select_value,json=selectValue,proto3,oneof"` // FIELD_TYPE_SELECT, id of option
}

func (*GetAttachedPropertyValuesResponse_Value_IsUndefined) isGetAttachedPropertyValuesResponse_Value_Value() {
}

func (*GetAttachedPropertyValuesResponse_Value_TextValue) isGetAttachedPropertyValuesResponse_Value_Value() {
}

func (*GetAttachedPropertyValuesResponse_Value_NumberValue) isGetAttachedPropertyValuesResponse_Value_Value() {
}

func (*GetAttachedPropertyValuesResponse_Value_BoolValue) isGetAttachedPropertyValuesResponse_Value_Value() {
}

func (*GetAttachedPropertyValuesResponse_Value_DateValue) isGetAttachedPropertyValuesResponse_Value_Value() {
}

func (*GetAttachedPropertyValuesResponse_Value_DateTimeValue) isGetAttachedPropertyValuesResponse_Value_Value() {
}

func (*GetAttachedPropertyValuesResponse_Value_SelectValue) isGetAttachedPropertyValuesResponse_Value_Value() {
}

type GetAttachedPropertyValuesResponse_Value_Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAttachedPropertyValuesResponse_Value_Set) Reset() {
	*x = GetAttachedPropertyValuesResponse_Value_Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttachedPropertyValuesResponse_Value_Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttachedPropertyValuesResponse_Value_Set) ProtoMessage() {}

func (x *GetAttachedPropertyValuesResponse_Value_Set) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttachedPropertyValuesResponse_Value_Set.ProtoReflect.Descriptor instead.
func (*GetAttachedPropertyValuesResponse_Value_Set) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP(), []int{17, 0, 0}
}

func (x *GetAttachedPropertyValuesResponse_Value_Set) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAttachedPropertyValuesResponse_Value_Set) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_proto_services_properties_svc_v1_properties_svc_proto protoreflect.FileDescriptor

var file_proto_services_properties_svc_v1_properties_svc_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x07, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x50, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x4f, 0x0a, 0x22, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x1e, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x6f,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x65, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x91, 0x02, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46,
	0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x59, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74,
	0x65, 0x78, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x39, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xee, 0x06, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x14, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x63, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x22, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x1e, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x8f, 0x02, 0x0a,
	0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x65,
	0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x59, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23,
	0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x06,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x92, 0x08, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x96, 0x07, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65,
	0x12, 0x6e, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4f, 0x0a, 0x22, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x1e,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x6f, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0xb7, 0x02, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x46, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x72, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x76, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xcc, 0x07, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x01, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x02, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x65, 0x0a, 0x0b, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x94, 0x03, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x46, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x0e, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x0c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x08, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x03, 0x0a, 0x1a, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x49, 0x0a, 0x1b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x87, 0x06,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xfe, 0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x03, 0x73, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x02, 0x52, 0x03, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x29, 0x0a, 0x03, 0x53,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x73, 0x65, 0x74, 0x22, 0x88, 0x05, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x15, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x19, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x44, 0x6f, 0x6e, 0x74, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x44, 0x6f, 0x6e, 0x74, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x20, 0x0a, 0x1e,
	0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x22,
	0x0a, 0x20, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64,
	0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x76, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x22, 0x15,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xcc, 0x0c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85,
	0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x37, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x94, 0x01, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xb2, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0xfc, 0x01, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x76, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x21, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2d, 0x73, 0x76, 0x63, 0xa2, 0x02, 0x03, 0x50, 0x53, 0x50, 0xaa, 0x02, 0x1f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x76, 0x63, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x76, 0x63, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x2b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x76, 0x63, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x22, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x76, 0x63, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_services_properties_svc_v1_properties_svc_proto_rawDescOnce sync.Once
	file_proto_services_properties_svc_v1_properties_svc_proto_rawDescData = file_proto_services_properties_svc_v1_properties_svc_proto_rawDesc
)

func file_proto_services_properties_svc_v1_properties_svc_proto_rawDescGZIP() []byte {
	file_proto_services_properties_svc_v1_properties_svc_proto_rawDescOnce.Do(func() {
		file_proto_services_properties_svc_v1_properties_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_services_properties_svc_v1_properties_svc_proto_rawDescData)
	})
	return file_proto_services_properties_svc_v1_properties_svc_proto_rawDescData
}

var file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_proto_services_properties_svc_v1_properties_svc_proto_goTypes = []interface{}{
	(*CreatePropertySetRequest)(nil),                               // 0: proto.services.properties_svc.v1.CreatePropertySetRequest
	(*CreatePropertySetResponse)(nil),                              // 1: proto.services.properties_svc.v1.CreatePropertySetResponse
	(*UpdatePropertySetRequest)(nil),                               // 2: proto.services.properties_svc.v1.UpdatePropertySetRequest
	(*UpdatePropertySetResponse)(nil),                              // 3: proto.services.properties_svc.v1.UpdatePropertySetResponse
	(*DeletePropertySetRequest)(nil),                               // 4: proto.services.properties_svc.v1.DeletePropertySetRequest
	(*DeletePropertySetResponse)(nil),                              // 5: proto.services.properties_svc.v1.DeletePropertySetResponse
	(*CreatePropertyRequest)(nil),                                  // 6: proto.services.properties_svc.v1.CreatePropertyRequest
	(*CreatePropertyResponse)(nil),                                 // 7: proto.services.properties_svc.v1.CreatePropertyResponse
	(*GetPropertyRequest)(nil),                                     // 8: proto.services.properties_svc.v1.GetPropertyRequest
	(*GetPropertyResponse)(nil),                                    // 9: proto.services.properties_svc.v1.GetPropertyResponse
	(*GetPropertiesRequest)(nil),                                   // 10: proto.services.properties_svc.v1.GetPropertiesRequest
	(*GetPropertiesResponse)(nil),                                  // 11: proto.services.properties_svc.v1.GetPropertiesResponse
	(*UpdatePropertyRequest)(nil),                                  // 12: proto.services.properties_svc.v1.UpdatePropertyRequest
	(*UpdatePropertyResponse)(nil),                                 // 13: proto.services.properties_svc.v1.UpdatePropertyResponse
	(*AttachPropertyValueRequest)(nil),                             // 14: proto.services.properties_svc.v1.AttachPropertyValueRequest
	(*AttachPropertyValueResponse)(nil),                            // 15: proto.services.properties_svc.v1.AttachPropertyValueResponse
	(*GetAttachedPropertyValuesRequest)(nil),                       // 16: proto.services.properties_svc.v1.GetAttachedPropertyValuesRequest
	(*GetAttachedPropertyValuesResponse)(nil),                      // 17: proto.services.properties_svc.v1.GetAttachedPropertyValuesResponse
	(*UpdatePatientPropertyViewRuleRequest)(nil),                   // 18: proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest
	(*UpdatePatientPropertyViewRuleResponse)(nil),                  // 19: proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse
	(*UpdateOrderRequest)(nil),                                     // 20: proto.services.properties_svc.v1.UpdateOrderRequest
	(*UpdateOrderResponse)(nil),                                    // 21: proto.services.properties_svc.v1.UpdateOrderResponse
	(*CreatePropertyRequest_SelectData)(nil),                       // 22: proto.services.properties_svc.v1.CreatePropertyRequest.SelectData
	(*CreatePropertyRequest_SelectData_SelectOption)(nil),          // 23: proto.services.properties_svc.v1.CreatePropertyRequest.SelectData.SelectOption
	(*GetPropertyResponse_SelectData)(nil),                         // 24: proto.services.properties_svc.v1.GetPropertyResponse.SelectData
	(*GetPropertyResponse_SelectData_SelectOption)(nil),            // 25: proto.services.properties_svc.v1.GetPropertyResponse.SelectData.SelectOption
	(*GetPropertiesResponse_Property)(nil),                         // 26: proto.services.properties_svc.v1.GetPropertiesResponse.Property
	(*GetPropertiesResponse_Property_SelectData)(nil),              // 27: proto.services.properties_svc.v1.GetPropertiesResponse.Property.SelectData
	(*GetPropertiesResponse_Property_SelectData_SelectOption)(nil), // 28: proto.services.properties_svc.v1.GetPropertiesResponse.Property.SelectData.SelectOption
	(*UpdatePropertyRequest_SelectData)(nil),                       // 29: proto.services.properties_svc.v1.UpdatePropertyRequest.SelectData
	(*UpdatePropertyRequest_SelectData_SelectOption)(nil),          // 30: proto.services.properties_svc.v1.UpdatePropertyRequest.SelectData.SelectOption
	(*GetAttachedPropertyValuesResponse_Value)(nil),                // 31: proto.services.properties_svc.v1.GetAttachedPropertyValuesResponse.Value
	(*GetAttachedPropertyValuesResponse_Value_Set)(nil),            // 32: proto.services.properties_svc.v1.GetAttachedPropertyValuesResponse.Value.Set
	(ViewContext)(0),                                               // 33: proto.services.properties_svc.v1.ViewContext
	(SubjectType)(0),                                               // 34: proto.services.properties_svc.v1.SubjectType
	(FieldType)(0),                                                 // 35: proto.services.properties_svc.v1.FieldType
}
var file_proto_services_properties_svc_v1_properties_svc_proto_depIdxs = []int32{
	33, // 0: proto.services.properties_svc.v1.CreatePropertyRequest.context:type_name -> proto.services.properties_svc.v1.ViewContext
	34, // 1: proto.services.properties_svc.v1.CreatePropertyRequest.subject_type:type_name -> proto.services.properties_svc.v1.SubjectType
	35, // 2: proto.services.properties_svc.v1.CreatePropertyRequest.field_type:type_name -> proto.services.properties_svc.v1.FieldType
	22, // 3: proto.services.properties_svc.v1.CreatePropertyRequest.select_data:type_name -> proto.services.properties_svc.v1.CreatePropertyRequest.SelectData
	33, // 4: proto.services.properties_svc.v1.GetPropertyRequest.context:type_name -> proto.services.properties_svc.v1.ViewContext
	34, // 5: proto.services.properties_svc.v1.GetPropertyResponse.subject_type:type_name -> proto.services.properties_svc.v1.SubjectType
	35, // 6: proto.services.properties_svc.v1.GetPropertyResponse.field_type:type_name -> proto.services.properties_svc.v1.FieldType
	24, // 7: proto.services.properties_svc.v1.GetPropertyResponse.select_data:type_name -> proto.services.properties_svc.v1.GetPropertyResponse.SelectData
	34, // 8: proto.services.properties_svc.v1.GetPropertiesRequest.subject_type:type_name -> proto.services.properties_svc.v1.SubjectType
	26, // 9: proto.services.properties_svc.v1.GetPropertiesResponse.properties:type_name -> proto.services.properties_svc.v1.GetPropertiesResponse.Property
	34, // 10: proto.services.properties_svc.v1.UpdatePropertyRequest.subject_type:type_name -> proto.services.properties_svc.v1.SubjectType
	35, // 11: proto.services.properties_svc.v1.UpdatePropertyRequest.field_type:type_name -> proto.services.properties_svc.v1.FieldType
	29, // 12: proto.services.properties_svc.v1.UpdatePropertyRequest.select_data:type_name -> proto.services.properties_svc.v1.UpdatePropertyRequest.SelectData
	34, // 13: proto.services.properties_svc.v1.AttachPropertyValueRequest.subject_type:type_name -> proto.services.properties_svc.v1.SubjectType
	31, // 14: proto.services.properties_svc.v1.GetAttachedPropertyValuesResponse.values:type_name -> proto.services.properties_svc.v1.GetAttachedPropertyValuesResponse.Value
	23, // 15: proto.services.properties_svc.v1.CreatePropertyRequest.SelectData.options:type_name -> proto.services.properties_svc.v1.CreatePropertyRequest.SelectData.SelectOption
	25, // 16: proto.services.properties_svc.v1.GetPropertyResponse.SelectData.options:type_name -> proto.services.properties_svc.v1.GetPropertyResponse.SelectData.SelectOption
	34, // 17: proto.services.properties_svc.v1.GetPropertiesResponse.Property.subject_type:type_name -> proto.services.properties_svc.v1.SubjectType
	35, // 18: proto.services.properties_svc.v1.GetPropertiesResponse.Property.field_type:type_name -> proto.services.properties_svc.v1.FieldType
	27, // 19: proto.services.properties_svc.v1.GetPropertiesResponse.Property.select_data:type_name -> proto.services.properties_svc.v1.GetPropertiesResponse.Property.SelectData
	28, // 20: proto.services.properties_svc.v1.GetPropertiesResponse.Property.SelectData.options:type_name -> proto.services.properties_svc.v1.GetPropertiesResponse.Property.SelectData.SelectOption
	30, // 21: proto.services.properties_svc.v1.UpdatePropertyRequest.SelectData.upsert_options:type_name -> proto.services.properties_svc.v1.UpdatePropertyRequest.SelectData.SelectOption
	35, // 22: proto.services.properties_svc.v1.GetAttachedPropertyValuesResponse.Value.field_type:type_name -> proto.services.properties_svc.v1.FieldType
	32, // 23: proto.services.properties_svc.v1.GetAttachedPropertyValuesResponse.Value.set:type_name -> proto.services.properties_svc.v1.GetAttachedPropertyValuesResponse.Value.Set
	0,  // 24: proto.services.properties_svc.v1.PropertiesService.CreatePropertySet:input_type -> proto.services.properties_svc.v1.CreatePropertySetRequest
	2,  // 25: proto.services.properties_svc.v1.PropertiesService.UpdatePropertySet:input_type -> proto.services.properties_svc.v1.UpdatePropertySetRequest
	4,  // 26: proto.services.properties_svc.v1.PropertiesService.DeletePropertySet:input_type -> proto.services.properties_svc.v1.DeletePropertySetRequest
	6,  // 27: proto.services.properties_svc.v1.PropertiesService.CreateProperty:input_type -> proto.services.properties_svc.v1.CreatePropertyRequest
	8,  // 28: proto.services.properties_svc.v1.PropertiesService.GetProperty:input_type -> proto.services.properties_svc.v1.GetPropertyRequest
	10, // 29: proto.services.properties_svc.v1.PropertiesService.GetProperties:input_type -> proto.services.properties_svc.v1.GetPropertiesRequest
	12, // 30: proto.services.properties_svc.v1.PropertiesService.UpdateProperty:input_type -> proto.services.properties_svc.v1.UpdatePropertyRequest
	14, // 31: proto.services.properties_svc.v1.PropertiesService.AttachPropertyValue:input_type -> proto.services.properties_svc.v1.AttachPropertyValueRequest
	16, // 32: proto.services.properties_svc.v1.PropertiesService.GetAttachedPropertyValues:input_type -> proto.services.properties_svc.v1.GetAttachedPropertyValuesRequest
	18, // 33: proto.services.properties_svc.v1.PropertiesService.UpdatePatientPropertyViewRule:input_type -> proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest
	20, // 34: proto.services.properties_svc.v1.PropertiesService.UpdateOrder:input_type -> proto.services.properties_svc.v1.UpdateOrderRequest
	1,  // 35: proto.services.properties_svc.v1.PropertiesService.CreatePropertySet:output_type -> proto.services.properties_svc.v1.CreatePropertySetResponse
	3,  // 36: proto.services.properties_svc.v1.PropertiesService.UpdatePropertySet:output_type -> proto.services.properties_svc.v1.UpdatePropertySetResponse
	5,  // 37: proto.services.properties_svc.v1.PropertiesService.DeletePropertySet:output_type -> proto.services.properties_svc.v1.DeletePropertySetResponse
	7,  // 38: proto.services.properties_svc.v1.PropertiesService.CreateProperty:output_type -> proto.services.properties_svc.v1.CreatePropertyResponse
	9,  // 39: proto.services.properties_svc.v1.PropertiesService.GetProperty:output_type -> proto.services.properties_svc.v1.GetPropertyResponse
	11, // 40: proto.services.properties_svc.v1.PropertiesService.GetProperties:output_type -> proto.services.properties_svc.v1.GetPropertiesResponse
	13, // 41: proto.services.properties_svc.v1.PropertiesService.UpdateProperty:output_type -> proto.services.properties_svc.v1.UpdatePropertyResponse
	15, // 42: proto.services.properties_svc.v1.PropertiesService.AttachPropertyValue:output_type -> proto.services.properties_svc.v1.AttachPropertyValueResponse
	17, // 43: proto.services.properties_svc.v1.PropertiesService.GetAttachedPropertyValues:output_type -> proto.services.properties_svc.v1.GetAttachedPropertyValuesResponse
	19, // 44: proto.services.properties_svc.v1.PropertiesService.UpdatePatientPropertyViewRule:output_type -> proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse
	21, // 45: proto.services.properties_svc.v1.PropertiesService.UpdateOrder:output_type -> proto.services.properties_svc.v1.UpdateOrderResponse
	35, // [35:46] is the sub-list for method output_type
	24, // [24:35] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_proto_services_properties_svc_v1_properties_svc_proto_init() }
func file_proto_services_properties_svc_v1_properties_svc_proto_init() {
	if File_proto_services_properties_svc_v1_properties_svc_proto != nil {
		return
	}
	file_proto_services_properties_svc_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertySetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertySetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertySetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertySetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePropertySetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePropertySetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachPropertyValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachPropertyValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttachedPropertyValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttachedPropertyValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePatientPropertyViewRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePatientPropertyViewRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertyRequest_SelectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertyRequest_SelectData_SelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyResponse_SelectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyResponse_SelectData_SelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertiesResponse_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertiesResponse_Property_SelectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertiesResponse_Property_SelectData_SelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertyRequest_SelectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertyRequest_SelectData_SelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttachedPropertyValuesResponse_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttachedPropertyValuesResponse_Value_Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*CreatePropertyRequest_None)(nil),
		(*CreatePropertyRequest_SelectData_)(nil),
	}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*GetPropertyResponse_None)(nil),
		(*GetPropertyResponse_SelectData_)(nil),
	}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*UpdatePropertyRequest_None)(nil),
		(*UpdatePropertyRequest_SelectData_)(nil),
	}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*AttachPropertyValueRequest_IsUndefined)(nil),
		(*AttachPropertyValueRequest_TextValue)(nil),
		(*AttachPropertyValueRequest_NumberValue)(nil),
		(*AttachPropertyValueRequest_BoolValue)(nil),
		(*AttachPropertyValueRequest_DateValue)(nil),
		(*AttachPropertyValueRequest_DateTimeValue)(nil),
		(*AttachPropertyValueRequest_SelectValue)(nil),
	}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*UpdatePatientPropertyViewRuleRequest_ResetSoftRequired)(nil),
		(*UpdatePatientPropertyViewRuleRequest_SetSoftRequired)(nil),
	}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*GetPropertiesResponse_Property_None)(nil),
		(*GetPropertiesResponse_Property_SelectData_)(nil),
	}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*GetAttachedPropertyValuesResponse_Value_IsUndefined)(nil),
		(*GetAttachedPropertyValuesResponse_Value_TextValue)(nil),
		(*GetAttachedPropertyValuesResponse_Value_NumberValue)(nil),
		(*GetAttachedPropertyValuesResponse_Value_BoolValue)(nil),
		(*GetAttachedPropertyValuesResponse_Value_DateValue)(nil),
		(*GetAttachedPropertyValuesResponse_Value_DateTimeValue)(nil),
		(*GetAttachedPropertyValuesResponse_Value_SelectValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_services_properties_svc_v1_properties_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_services_properties_svc_v1_properties_svc_proto_goTypes,
		DependencyIndexes: file_proto_services_properties_svc_v1_properties_svc_proto_depIdxs,
		MessageInfos:      file_proto_services_properties_svc_v1_properties_svc_proto_msgTypes,
	}.Build()
	File_proto_services_properties_svc_v1_properties_svc_proto = out.File
	file_proto_services_properties_svc_v1_properties_svc_proto_rawDesc = nil
	file_proto_services_properties_svc_v1_properties_svc_proto_goTypes = nil
	file_proto_services_properties_svc_v1_properties_svc_proto_depIdxs = nil
}
