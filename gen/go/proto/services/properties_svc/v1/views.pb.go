// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: proto/services/properties_svc/v1/views.proto

package properties_svc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdatePatientPropertyViewRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// matchers
	WardId    *string `protobuf:"bytes,1,opt,name=ward_id,json=wardId,proto3,oneof" json:"ward_id,omitempty"`
	PatientId *string `protobuf:"bytes,2,opt,name=patient_id,json=patientId,proto3,oneof" json:"patient_id,omitempty"`
	// Types that are assignable to SoftRequired:
	//
	//	*UpdatePatientPropertyViewRuleRequest_ResetSoftRequired
	//	*UpdatePatientPropertyViewRuleRequest_SetSoftRequired
	SoftRequired isUpdatePatientPropertyViewRuleRequest_SoftRequired `protobuf_oneof:"soft_required"`
	// append property_id to the always_include list
	// this means the property is shown, unless a more specific rule
	// puts it in its dont_always_include list
	AppendToAlwaysInclude *string `protobuf:"bytes,5,opt,name=append_to_always_include,json=appendToAlwaysInclude,proto3,oneof" json:"append_to_always_include,omitempty"`
	// remove property_id to the always_include list, also see append_to_always_include
	RemoveFromAlwaysInclude *string `protobuf:"bytes,6,opt,name=remove_from_always_include,json=removeFromAlwaysInclude,proto3,oneof" json:"remove_from_always_include,omitempty"`
	// append property_id to the dont_always_include list, also see append_to_always_include
	AppendToDontAlwaysInclude *string `protobuf:"bytes,7,opt,name=append_to_dont_always_include,json=appendToDontAlwaysInclude,proto3,oneof" json:"append_to_dont_always_include,omitempty"`
	// remove property_id to the dont_always_include list, also see append_to_always_include
	RemoveFromDontAlwaysInclude *string `protobuf:"bytes,8,opt,name=remove_from_dont_always_include,json=removeFromDontAlwaysInclude,proto3,oneof" json:"remove_from_dont_always_include,omitempty"`
}

func (x *UpdatePatientPropertyViewRuleRequest) Reset() {
	*x = UpdatePatientPropertyViewRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_views_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePatientPropertyViewRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePatientPropertyViewRuleRequest) ProtoMessage() {}

func (x *UpdatePatientPropertyViewRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_views_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePatientPropertyViewRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdatePatientPropertyViewRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_views_proto_rawDescGZIP(), []int{0}
}

func (x *UpdatePatientPropertyViewRuleRequest) GetWardId() string {
	if x != nil && x.WardId != nil {
		return *x.WardId
	}
	return ""
}

func (x *UpdatePatientPropertyViewRuleRequest) GetPatientId() string {
	if x != nil && x.PatientId != nil {
		return *x.PatientId
	}
	return ""
}

func (m *UpdatePatientPropertyViewRuleRequest) GetSoftRequired() isUpdatePatientPropertyViewRuleRequest_SoftRequired {
	if m != nil {
		return m.SoftRequired
	}
	return nil
}

func (x *UpdatePatientPropertyViewRuleRequest) GetResetSoftRequired() bool {
	if x, ok := x.GetSoftRequired().(*UpdatePatientPropertyViewRuleRequest_ResetSoftRequired); ok {
		return x.ResetSoftRequired
	}
	return false
}

func (x *UpdatePatientPropertyViewRuleRequest) GetSetSoftRequired() bool {
	if x, ok := x.GetSoftRequired().(*UpdatePatientPropertyViewRuleRequest_SetSoftRequired); ok {
		return x.SetSoftRequired
	}
	return false
}

func (x *UpdatePatientPropertyViewRuleRequest) GetAppendToAlwaysInclude() string {
	if x != nil && x.AppendToAlwaysInclude != nil {
		return *x.AppendToAlwaysInclude
	}
	return ""
}

func (x *UpdatePatientPropertyViewRuleRequest) GetRemoveFromAlwaysInclude() string {
	if x != nil && x.RemoveFromAlwaysInclude != nil {
		return *x.RemoveFromAlwaysInclude
	}
	return ""
}

func (x *UpdatePatientPropertyViewRuleRequest) GetAppendToDontAlwaysInclude() string {
	if x != nil && x.AppendToDontAlwaysInclude != nil {
		return *x.AppendToDontAlwaysInclude
	}
	return ""
}

func (x *UpdatePatientPropertyViewRuleRequest) GetRemoveFromDontAlwaysInclude() string {
	if x != nil && x.RemoveFromDontAlwaysInclude != nil {
		return *x.RemoveFromDontAlwaysInclude
	}
	return ""
}

type isUpdatePatientPropertyViewRuleRequest_SoftRequired interface {
	isUpdatePatientPropertyViewRuleRequest_SoftRequired()
}

type UpdatePatientPropertyViewRuleRequest_ResetSoftRequired struct {
	ResetSoftRequired bool `protobuf:"varint,3,opt,name=reset_soft_required,json=resetSoftRequired,proto3,oneof"` // sets soft_required to null for this matcher, when true
}

type UpdatePatientPropertyViewRuleRequest_SetSoftRequired struct {
	SetSoftRequired bool `protobuf:"varint,4,opt,name=set_soft_required,json=setSoftRequired,proto3,oneof"` // sets the value of the soft_required filter for this matcher
}

func (*UpdatePatientPropertyViewRuleRequest_ResetSoftRequired) isUpdatePatientPropertyViewRuleRequest_SoftRequired() {
}

func (*UpdatePatientPropertyViewRuleRequest_SetSoftRequired) isUpdatePatientPropertyViewRuleRequest_SoftRequired() {
}

type UpdatePatientPropertyViewRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePatientPropertyViewRuleResponse) Reset() {
	*x = UpdatePatientPropertyViewRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_views_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePatientPropertyViewRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePatientPropertyViewRuleResponse) ProtoMessage() {}

func (x *UpdatePatientPropertyViewRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_views_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePatientPropertyViewRuleResponse.ProtoReflect.Descriptor instead.
func (*UpdatePatientPropertyViewRuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_views_proto_rawDescGZIP(), []int{1}
}

type UpdateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the property that we "move"
	PropertyId string `protobuf:"bytes,1,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
	// the id of the property with an id just before the property that you are moving
	// when left blank this means it's moved to the very top
	PrevNeighbor *string `protobuf:"bytes,2,opt,name=prev_neighbor,json=prevNeighbor,proto3,oneof" json:"prev_neighbor,omitempty"`
}

func (x *UpdateOrderRequest) Reset() {
	*x = UpdateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_views_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderRequest) ProtoMessage() {}

func (x *UpdateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_views_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_views_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateOrderRequest) GetPropertyId() string {
	if x != nil {
		return x.PropertyId
	}
	return ""
}

func (x *UpdateOrderRequest) GetPrevNeighbor() string {
	if x != nil && x.PrevNeighbor != nil {
		return *x.PrevNeighbor
	}
	return ""
}

type UpdateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrderResponse) Reset() {
	*x = UpdateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_properties_svc_v1_views_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderResponse) ProtoMessage() {}

func (x *UpdateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_properties_svc_v1_views_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_properties_svc_v1_views_proto_rawDescGZIP(), []int{3}
}

var File_proto_services_properties_svc_v1_views_proto protoreflect.FileDescriptor

var file_proto_services_properties_svc_v1_views_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x22, 0x88, 0x05, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x53,
	0x6f, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x18, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x15, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x19, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x44, 0x6f,
	0x6e, 0x74, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x1f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x1b, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x6f, 0x6e, 0x74, 0x41, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x27, 0x0a, 0x25, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc9,
	0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xf4, 0x01, 0x0a, 0x24, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x76, 0x31, 0x42, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x21, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x2d, 0x73, 0x76, 0x63, 0xa2, 0x02, 0x03, 0x50, 0x53, 0x50, 0xaa, 0x02, 0x1f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x76, 0x63, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x76, 0x63, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x2b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x76, 0x63, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x76, 0x63, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_services_properties_svc_v1_views_proto_rawDescOnce sync.Once
	file_proto_services_properties_svc_v1_views_proto_rawDescData = file_proto_services_properties_svc_v1_views_proto_rawDesc
)

func file_proto_services_properties_svc_v1_views_proto_rawDescGZIP() []byte {
	file_proto_services_properties_svc_v1_views_proto_rawDescOnce.Do(func() {
		file_proto_services_properties_svc_v1_views_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_services_properties_svc_v1_views_proto_rawDescData)
	})
	return file_proto_services_properties_svc_v1_views_proto_rawDescData
}

var file_proto_services_properties_svc_v1_views_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_services_properties_svc_v1_views_proto_goTypes = []interface{}{
	(*UpdatePatientPropertyViewRuleRequest)(nil),  // 0: proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest
	(*UpdatePatientPropertyViewRuleResponse)(nil), // 1: proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse
	(*UpdateOrderRequest)(nil),                    // 2: proto.services.properties_svc.v1.UpdateOrderRequest
	(*UpdateOrderResponse)(nil),                   // 3: proto.services.properties_svc.v1.UpdateOrderResponse
}
var file_proto_services_properties_svc_v1_views_proto_depIdxs = []int32{
	0, // 0: proto.services.properties_svc.v1.PropertyViewsService.UpdatePatientPropertyViewRule:input_type -> proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest
	2, // 1: proto.services.properties_svc.v1.PropertyViewsService.UpdateOrder:input_type -> proto.services.properties_svc.v1.UpdateOrderRequest
	1, // 2: proto.services.properties_svc.v1.PropertyViewsService.UpdatePatientPropertyViewRule:output_type -> proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse
	3, // 3: proto.services.properties_svc.v1.PropertyViewsService.UpdateOrder:output_type -> proto.services.properties_svc.v1.UpdateOrderResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_services_properties_svc_v1_views_proto_init() }
func file_proto_services_properties_svc_v1_views_proto_init() {
	if File_proto_services_properties_svc_v1_views_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_services_properties_svc_v1_views_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePatientPropertyViewRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_views_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePatientPropertyViewRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_views_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_properties_svc_v1_views_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_services_properties_svc_v1_views_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*UpdatePatientPropertyViewRuleRequest_ResetSoftRequired)(nil),
		(*UpdatePatientPropertyViewRuleRequest_SetSoftRequired)(nil),
	}
	file_proto_services_properties_svc_v1_views_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_services_properties_svc_v1_views_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_services_properties_svc_v1_views_proto_goTypes,
		DependencyIndexes: file_proto_services_properties_svc_v1_views_proto_depIdxs,
		MessageInfos:      file_proto_services_properties_svc_v1_views_proto_msgTypes,
	}.Build()
	File_proto_services_properties_svc_v1_views_proto = out.File
	file_proto_services_properties_svc_v1_views_proto_rawDesc = nil
	file_proto_services_properties_svc_v1_views_proto_goTypes = nil
	file_proto_services_properties_svc_v1_views_proto_depIdxs = nil
}
