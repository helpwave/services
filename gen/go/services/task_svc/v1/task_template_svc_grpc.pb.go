// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/task_svc/v1/task_template_svc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TaskTemplateService_CreateTaskTemplate_FullMethodName           = "/services.task_svc.v1.TaskTemplateService/CreateTaskTemplate"
	TaskTemplateService_GetAllTaskTemplates_FullMethodName          = "/services.task_svc.v1.TaskTemplateService/GetAllTaskTemplates"
	TaskTemplateService_DeleteTaskTemplate_FullMethodName           = "/services.task_svc.v1.TaskTemplateService/DeleteTaskTemplate"
	TaskTemplateService_DeleteTaskTemplateSubTask_FullMethodName    = "/services.task_svc.v1.TaskTemplateService/DeleteTaskTemplateSubTask"
	TaskTemplateService_UpdateTaskTemplate_FullMethodName           = "/services.task_svc.v1.TaskTemplateService/UpdateTaskTemplate"
	TaskTemplateService_UpdateTaskTemplateSubTask_FullMethodName    = "/services.task_svc.v1.TaskTemplateService/UpdateTaskTemplateSubTask"
	TaskTemplateService_CreateTaskTemplateSubTask_FullMethodName    = "/services.task_svc.v1.TaskTemplateService/CreateTaskTemplateSubTask"
	TaskTemplateService_GetAllTaskTemplatesByCreator_FullMethodName = "/services.task_svc.v1.TaskTemplateService/GetAllTaskTemplatesByCreator"
	TaskTemplateService_GetAllTaskTemplatesByWard_FullMethodName    = "/services.task_svc.v1.TaskTemplateService/GetAllTaskTemplatesByWard"
)

// TaskTemplateServiceClient is the client API for TaskTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskTemplateServiceClient interface {
	CreateTaskTemplate(ctx context.Context, in *CreateTaskTemplateRequest, opts ...grpc.CallOption) (*CreateTaskTemplateResponse, error)
	GetAllTaskTemplates(ctx context.Context, in *GetAllTaskTemplatesRequest, opts ...grpc.CallOption) (*GetAllTaskTemplatesResponse, error)
	DeleteTaskTemplate(ctx context.Context, in *DeleteTaskTemplateRequest, opts ...grpc.CallOption) (*DeleteTaskTemplateResponse, error)
	DeleteTaskTemplateSubTask(ctx context.Context, in *DeleteTaskTemplateSubTaskRequest, opts ...grpc.CallOption) (*DeleteTaskTemplateSubTaskResponse, error)
	UpdateTaskTemplate(ctx context.Context, in *UpdateTaskTemplateRequest, opts ...grpc.CallOption) (*UpdateTaskTemplateResponse, error)
	UpdateTaskTemplateSubTask(ctx context.Context, in *UpdateTaskTemplateSubTaskRequest, opts ...grpc.CallOption) (*UpdateTaskTemplateSubTaskResponse, error)
	CreateTaskTemplateSubTask(ctx context.Context, in *CreateTaskTemplateSubTaskRequest, opts ...grpc.CallOption) (*CreateTaskTemplateSubTaskResponse, error)
	GetAllTaskTemplatesByCreator(ctx context.Context, in *GetAllTaskTemplatesByCreatorRequest, opts ...grpc.CallOption) (*GetAllTaskTemplatesByCreatorResponse, error)
	GetAllTaskTemplatesByWard(ctx context.Context, in *GetAllTaskTemplatesByWardRequest, opts ...grpc.CallOption) (*GetAllTaskTemplatesByWardResponse, error)
}

type taskTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskTemplateServiceClient(cc grpc.ClientConnInterface) TaskTemplateServiceClient {
	return &taskTemplateServiceClient{cc}
}

func (c *taskTemplateServiceClient) CreateTaskTemplate(ctx context.Context, in *CreateTaskTemplateRequest, opts ...grpc.CallOption) (*CreateTaskTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskTemplateResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_CreateTaskTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) GetAllTaskTemplates(ctx context.Context, in *GetAllTaskTemplatesRequest, opts ...grpc.CallOption) (*GetAllTaskTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTaskTemplatesResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_GetAllTaskTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) DeleteTaskTemplate(ctx context.Context, in *DeleteTaskTemplateRequest, opts ...grpc.CallOption) (*DeleteTaskTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskTemplateResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_DeleteTaskTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) DeleteTaskTemplateSubTask(ctx context.Context, in *DeleteTaskTemplateSubTaskRequest, opts ...grpc.CallOption) (*DeleteTaskTemplateSubTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskTemplateSubTaskResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_DeleteTaskTemplateSubTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) UpdateTaskTemplate(ctx context.Context, in *UpdateTaskTemplateRequest, opts ...grpc.CallOption) (*UpdateTaskTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskTemplateResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_UpdateTaskTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) UpdateTaskTemplateSubTask(ctx context.Context, in *UpdateTaskTemplateSubTaskRequest, opts ...grpc.CallOption) (*UpdateTaskTemplateSubTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskTemplateSubTaskResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_UpdateTaskTemplateSubTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) CreateTaskTemplateSubTask(ctx context.Context, in *CreateTaskTemplateSubTaskRequest, opts ...grpc.CallOption) (*CreateTaskTemplateSubTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskTemplateSubTaskResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_CreateTaskTemplateSubTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) GetAllTaskTemplatesByCreator(ctx context.Context, in *GetAllTaskTemplatesByCreatorRequest, opts ...grpc.CallOption) (*GetAllTaskTemplatesByCreatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTaskTemplatesByCreatorResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_GetAllTaskTemplatesByCreator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) GetAllTaskTemplatesByWard(ctx context.Context, in *GetAllTaskTemplatesByWardRequest, opts ...grpc.CallOption) (*GetAllTaskTemplatesByWardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTaskTemplatesByWardResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_GetAllTaskTemplatesByWard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskTemplateServiceServer is the server API for TaskTemplateService service.
// All implementations must embed UnimplementedTaskTemplateServiceServer
// for forward compatibility
type TaskTemplateServiceServer interface {
	CreateTaskTemplate(context.Context, *CreateTaskTemplateRequest) (*CreateTaskTemplateResponse, error)
	GetAllTaskTemplates(context.Context, *GetAllTaskTemplatesRequest) (*GetAllTaskTemplatesResponse, error)
	DeleteTaskTemplate(context.Context, *DeleteTaskTemplateRequest) (*DeleteTaskTemplateResponse, error)
	DeleteTaskTemplateSubTask(context.Context, *DeleteTaskTemplateSubTaskRequest) (*DeleteTaskTemplateSubTaskResponse, error)
	UpdateTaskTemplate(context.Context, *UpdateTaskTemplateRequest) (*UpdateTaskTemplateResponse, error)
	UpdateTaskTemplateSubTask(context.Context, *UpdateTaskTemplateSubTaskRequest) (*UpdateTaskTemplateSubTaskResponse, error)
	CreateTaskTemplateSubTask(context.Context, *CreateTaskTemplateSubTaskRequest) (*CreateTaskTemplateSubTaskResponse, error)
	GetAllTaskTemplatesByCreator(context.Context, *GetAllTaskTemplatesByCreatorRequest) (*GetAllTaskTemplatesByCreatorResponse, error)
	GetAllTaskTemplatesByWard(context.Context, *GetAllTaskTemplatesByWardRequest) (*GetAllTaskTemplatesByWardResponse, error)
	mustEmbedUnimplementedTaskTemplateServiceServer()
}

// UnimplementedTaskTemplateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskTemplateServiceServer struct {
}

func (UnimplementedTaskTemplateServiceServer) CreateTaskTemplate(context.Context, *CreateTaskTemplateRequest) (*CreateTaskTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskTemplate not implemented")
}
func (UnimplementedTaskTemplateServiceServer) GetAllTaskTemplates(context.Context, *GetAllTaskTemplatesRequest) (*GetAllTaskTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTaskTemplates not implemented")
}
func (UnimplementedTaskTemplateServiceServer) DeleteTaskTemplate(context.Context, *DeleteTaskTemplateRequest) (*DeleteTaskTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskTemplate not implemented")
}
func (UnimplementedTaskTemplateServiceServer) DeleteTaskTemplateSubTask(context.Context, *DeleteTaskTemplateSubTaskRequest) (*DeleteTaskTemplateSubTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskTemplateSubTask not implemented")
}
func (UnimplementedTaskTemplateServiceServer) UpdateTaskTemplate(context.Context, *UpdateTaskTemplateRequest) (*UpdateTaskTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskTemplate not implemented")
}
func (UnimplementedTaskTemplateServiceServer) UpdateTaskTemplateSubTask(context.Context, *UpdateTaskTemplateSubTaskRequest) (*UpdateTaskTemplateSubTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskTemplateSubTask not implemented")
}
func (UnimplementedTaskTemplateServiceServer) CreateTaskTemplateSubTask(context.Context, *CreateTaskTemplateSubTaskRequest) (*CreateTaskTemplateSubTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskTemplateSubTask not implemented")
}
func (UnimplementedTaskTemplateServiceServer) GetAllTaskTemplatesByCreator(context.Context, *GetAllTaskTemplatesByCreatorRequest) (*GetAllTaskTemplatesByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTaskTemplatesByCreator not implemented")
}
func (UnimplementedTaskTemplateServiceServer) GetAllTaskTemplatesByWard(context.Context, *GetAllTaskTemplatesByWardRequest) (*GetAllTaskTemplatesByWardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTaskTemplatesByWard not implemented")
}
func (UnimplementedTaskTemplateServiceServer) mustEmbedUnimplementedTaskTemplateServiceServer() {}

// UnsafeTaskTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskTemplateServiceServer will
// result in compilation errors.
type UnsafeTaskTemplateServiceServer interface {
	mustEmbedUnimplementedTaskTemplateServiceServer()
}

func RegisterTaskTemplateServiceServer(s grpc.ServiceRegistrar, srv TaskTemplateServiceServer) {
	s.RegisterService(&TaskTemplateService_ServiceDesc, srv)
}

func _TaskTemplateService_CreateTaskTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).CreateTaskTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_CreateTaskTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).CreateTaskTemplate(ctx, req.(*CreateTaskTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_GetAllTaskTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTaskTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).GetAllTaskTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_GetAllTaskTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).GetAllTaskTemplates(ctx, req.(*GetAllTaskTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_DeleteTaskTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).DeleteTaskTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_DeleteTaskTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).DeleteTaskTemplate(ctx, req.(*DeleteTaskTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_DeleteTaskTemplateSubTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskTemplateSubTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).DeleteTaskTemplateSubTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_DeleteTaskTemplateSubTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).DeleteTaskTemplateSubTask(ctx, req.(*DeleteTaskTemplateSubTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_UpdateTaskTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).UpdateTaskTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_UpdateTaskTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).UpdateTaskTemplate(ctx, req.(*UpdateTaskTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_UpdateTaskTemplateSubTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskTemplateSubTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).UpdateTaskTemplateSubTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_UpdateTaskTemplateSubTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).UpdateTaskTemplateSubTask(ctx, req.(*UpdateTaskTemplateSubTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_CreateTaskTemplateSubTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskTemplateSubTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).CreateTaskTemplateSubTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_CreateTaskTemplateSubTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).CreateTaskTemplateSubTask(ctx, req.(*CreateTaskTemplateSubTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_GetAllTaskTemplatesByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTaskTemplatesByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).GetAllTaskTemplatesByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_GetAllTaskTemplatesByCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).GetAllTaskTemplatesByCreator(ctx, req.(*GetAllTaskTemplatesByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_GetAllTaskTemplatesByWard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTaskTemplatesByWardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).GetAllTaskTemplatesByWard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_GetAllTaskTemplatesByWard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).GetAllTaskTemplatesByWard(ctx, req.(*GetAllTaskTemplatesByWardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskTemplateService_ServiceDesc is the grpc.ServiceDesc for TaskTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.task_svc.v1.TaskTemplateService",
	HandlerType: (*TaskTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTaskTemplate",
			Handler:    _TaskTemplateService_CreateTaskTemplate_Handler,
		},
		{
			MethodName: "GetAllTaskTemplates",
			Handler:    _TaskTemplateService_GetAllTaskTemplates_Handler,
		},
		{
			MethodName: "DeleteTaskTemplate",
			Handler:    _TaskTemplateService_DeleteTaskTemplate_Handler,
		},
		{
			MethodName: "DeleteTaskTemplateSubTask",
			Handler:    _TaskTemplateService_DeleteTaskTemplateSubTask_Handler,
		},
		{
			MethodName: "UpdateTaskTemplate",
			Handler:    _TaskTemplateService_UpdateTaskTemplate_Handler,
		},
		{
			MethodName: "UpdateTaskTemplateSubTask",
			Handler:    _TaskTemplateService_UpdateTaskTemplateSubTask_Handler,
		},
		{
			MethodName: "CreateTaskTemplateSubTask",
			Handler:    _TaskTemplateService_CreateTaskTemplateSubTask_Handler,
		},
		{
			MethodName: "GetAllTaskTemplatesByCreator",
			Handler:    _TaskTemplateService_GetAllTaskTemplatesByCreator_Handler,
		},
		{
			MethodName: "GetAllTaskTemplatesByWard",
			Handler:    _TaskTemplateService_GetAllTaskTemplatesByWard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/task_svc/v1/task_template_svc.proto",
}
