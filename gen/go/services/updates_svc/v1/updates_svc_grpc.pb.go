// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/updates_svc/v1/updates_svc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UpdatesService_ReceiveUpdates_FullMethodName = "/services.updates_svc.v1.UpdatesService/ReceiveUpdates"
)

// UpdatesServiceClient is the client API for UpdatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdatesServiceClient interface {
	// This endpoint directly exposes all enables our clients to hook into our event stream
	ReceiveUpdates(ctx context.Context, in *ReceiveUpdatesRequest, opts ...grpc.CallOption) (UpdatesService_ReceiveUpdatesClient, error)
}

type updatesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdatesServiceClient(cc grpc.ClientConnInterface) UpdatesServiceClient {
	return &updatesServiceClient{cc}
}

func (c *updatesServiceClient) ReceiveUpdates(ctx context.Context, in *ReceiveUpdatesRequest, opts ...grpc.CallOption) (UpdatesService_ReceiveUpdatesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UpdatesService_ServiceDesc.Streams[0], UpdatesService_ReceiveUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &updatesServiceReceiveUpdatesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdatesService_ReceiveUpdatesClient interface {
	Recv() (*ReceiveUpdatesResponse, error)
	grpc.ClientStream
}

type updatesServiceReceiveUpdatesClient struct {
	grpc.ClientStream
}

func (x *updatesServiceReceiveUpdatesClient) Recv() (*ReceiveUpdatesResponse, error) {
	m := new(ReceiveUpdatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdatesServiceServer is the server API for UpdatesService service.
// All implementations must embed UnimplementedUpdatesServiceServer
// for forward compatibility
type UpdatesServiceServer interface {
	// This endpoint directly exposes all enables our clients to hook into our event stream
	ReceiveUpdates(*ReceiveUpdatesRequest, UpdatesService_ReceiveUpdatesServer) error
	mustEmbedUnimplementedUpdatesServiceServer()
}

// UnimplementedUpdatesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpdatesServiceServer struct {
}

func (UnimplementedUpdatesServiceServer) ReceiveUpdates(*ReceiveUpdatesRequest, UpdatesService_ReceiveUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveUpdates not implemented")
}
func (UnimplementedUpdatesServiceServer) mustEmbedUnimplementedUpdatesServiceServer() {}

// UnsafeUpdatesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdatesServiceServer will
// result in compilation errors.
type UnsafeUpdatesServiceServer interface {
	mustEmbedUnimplementedUpdatesServiceServer()
}

func RegisterUpdatesServiceServer(s grpc.ServiceRegistrar, srv UpdatesServiceServer) {
	s.RegisterService(&UpdatesService_ServiceDesc, srv)
}

func _UpdatesService_ReceiveUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdatesServiceServer).ReceiveUpdates(m, &updatesServiceReceiveUpdatesServer{ServerStream: stream})
}

type UpdatesService_ReceiveUpdatesServer interface {
	Send(*ReceiveUpdatesResponse) error
	grpc.ServerStream
}

type updatesServiceReceiveUpdatesServer struct {
	grpc.ServerStream
}

func (x *updatesServiceReceiveUpdatesServer) Send(m *ReceiveUpdatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UpdatesService_ServiceDesc is the grpc.ServiceDesc for UpdatesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdatesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.updates_svc.v1.UpdatesService",
	HandlerType: (*UpdatesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveUpdates",
			Handler:       _UpdatesService_ReceiveUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/updates_svc/v1/updates_svc.proto",
}
