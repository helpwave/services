// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/property_svc/v1/property_views_svc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PropertyViewsService_UpdatePropertyViewRule_FullMethodName = "/services.property_svc.v1.PropertyViewsService/UpdatePropertyViewRule"
)

// PropertyViewsServiceClient is the client API for PropertyViewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyViewsServiceClient interface {
	UpdatePropertyViewRule(ctx context.Context, in *UpdatePropertyViewRuleRequest, opts ...grpc.CallOption) (*UpdatePropertyViewRuleResponse, error)
}

type propertyViewsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyViewsServiceClient(cc grpc.ClientConnInterface) PropertyViewsServiceClient {
	return &propertyViewsServiceClient{cc}
}

func (c *propertyViewsServiceClient) UpdatePropertyViewRule(ctx context.Context, in *UpdatePropertyViewRuleRequest, opts ...grpc.CallOption) (*UpdatePropertyViewRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePropertyViewRuleResponse)
	err := c.cc.Invoke(ctx, PropertyViewsService_UpdatePropertyViewRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyViewsServiceServer is the server API for PropertyViewsService service.
// All implementations must embed UnimplementedPropertyViewsServiceServer
// for forward compatibility
type PropertyViewsServiceServer interface {
	UpdatePropertyViewRule(context.Context, *UpdatePropertyViewRuleRequest) (*UpdatePropertyViewRuleResponse, error)
	mustEmbedUnimplementedPropertyViewsServiceServer()
}

// UnimplementedPropertyViewsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPropertyViewsServiceServer struct {
}

func (UnimplementedPropertyViewsServiceServer) UpdatePropertyViewRule(context.Context, *UpdatePropertyViewRuleRequest) (*UpdatePropertyViewRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePropertyViewRule not implemented")
}
func (UnimplementedPropertyViewsServiceServer) mustEmbedUnimplementedPropertyViewsServiceServer() {}

// UnsafePropertyViewsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyViewsServiceServer will
// result in compilation errors.
type UnsafePropertyViewsServiceServer interface {
	mustEmbedUnimplementedPropertyViewsServiceServer()
}

func RegisterPropertyViewsServiceServer(s grpc.ServiceRegistrar, srv PropertyViewsServiceServer) {
	s.RegisterService(&PropertyViewsService_ServiceDesc, srv)
}

func _PropertyViewsService_UpdatePropertyViewRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePropertyViewRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyViewsServiceServer).UpdatePropertyViewRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertyViewsService_UpdatePropertyViewRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyViewsServiceServer).UpdatePropertyViewRule(ctx, req.(*UpdatePropertyViewRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertyViewsService_ServiceDesc is the grpc.ServiceDesc for PropertyViewsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertyViewsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.property_svc.v1.PropertyViewsService",
	HandlerType: (*PropertyViewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePropertyViewRule",
			Handler:    _PropertyViewsService_UpdatePropertyViewRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/property_svc/v1/property_views_svc.proto",
}
