// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: services/property_svc/v1/property_views_svc.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// append property_id to the always_include list
	// this means the property is shown, unless a more specific rule (including itself)
	// puts it in its dont_always_include list
	AppendToAlwaysInclude []string `protobuf:"bytes,1,rep,name=append_to_always_include,json=appendToAlwaysInclude,proto3" json:"append_to_always_include,omitempty" validate:"dive,uuid4"` // @gotags: validate:"dive,uuid4"
	// remove property_id to the always_include list, also see append_to_always_include
	RemoveFromAlwaysInclude []string `protobuf:"bytes,2,rep,name=remove_from_always_include,json=removeFromAlwaysInclude,proto3" json:"remove_from_always_include,omitempty" validate:"dive,uuid4"` // @gotags: validate:"dive,uuid4"
	// append property_id to the dont_always_include list, also see append_to_always_include
	AppendToDontAlwaysInclude []string `protobuf:"bytes,3,rep,name=append_to_dont_always_include,json=appendToDontAlwaysInclude,proto3" json:"append_to_dont_always_include,omitempty" validate:"dive,uuid4"` // @gotags: validate:"dive,uuid4"
	// remove property_id to the dont_always_include list, also see append_to_always_include
	RemoveFromDontAlwaysInclude []string `protobuf:"bytes,4,rep,name=remove_from_dont_always_include,json=removeFromDontAlwaysInclude,proto3" json:"remove_from_dont_always_include,omitempty" validate:"dive,uuid4"` // @gotags: validate:"dive,uuid4"
}

func (x *FilterUpdate) Reset() {
	*x = FilterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_views_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterUpdate) ProtoMessage() {}

func (x *FilterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_views_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterUpdate.ProtoReflect.Descriptor instead.
func (*FilterUpdate) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_views_svc_proto_rawDescGZIP(), []int{0}
}

func (x *FilterUpdate) GetAppendToAlwaysInclude() []string {
	if x != nil {
		return x.AppendToAlwaysInclude
	}
	return nil
}

func (x *FilterUpdate) GetRemoveFromAlwaysInclude() []string {
	if x != nil {
		return x.RemoveFromAlwaysInclude
	}
	return nil
}

func (x *FilterUpdate) GetAppendToDontAlwaysInclude() []string {
	if x != nil {
		return x.AppendToDontAlwaysInclude
	}
	return nil
}

func (x *FilterUpdate) GetRemoveFromDontAlwaysInclude() []string {
	if x != nil {
		return x.RemoveFromDontAlwaysInclude
	}
	return nil
}

type UpdatePropertyViewRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterUpdate *FilterUpdate `protobuf:"bytes,1,opt,name=filter_update,json=filterUpdate,proto3" json:"filter_update,omitempty" validate:"required"` // @gotags: validate:"required"
	// Types that are assignable to Matcher:
	//
	//	*UpdatePropertyViewRuleRequest_TaskMatcher
	//	*UpdatePropertyViewRuleRequest_PatientMatcher
	Matcher isUpdatePropertyViewRuleRequest_Matcher `protobuf_oneof:"matcher"`
}

func (x *UpdatePropertyViewRuleRequest) Reset() {
	*x = UpdatePropertyViewRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_views_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertyViewRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertyViewRuleRequest) ProtoMessage() {}

func (x *UpdatePropertyViewRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_views_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertyViewRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdatePropertyViewRuleRequest) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_views_svc_proto_rawDescGZIP(), []int{1}
}

func (x *UpdatePropertyViewRuleRequest) GetFilterUpdate() *FilterUpdate {
	if x != nil {
		return x.FilterUpdate
	}
	return nil
}

func (m *UpdatePropertyViewRuleRequest) GetMatcher() isUpdatePropertyViewRuleRequest_Matcher {
	if m != nil {
		return m.Matcher
	}
	return nil
}

func (x *UpdatePropertyViewRuleRequest) GetTaskMatcher() *TaskPropertyMatcher {
	if x, ok := x.GetMatcher().(*UpdatePropertyViewRuleRequest_TaskMatcher); ok {
		return x.TaskMatcher
	}
	return nil
}

func (x *UpdatePropertyViewRuleRequest) GetPatientMatcher() *PatientPropertyMatcher {
	if x, ok := x.GetMatcher().(*UpdatePropertyViewRuleRequest_PatientMatcher); ok {
		return x.PatientMatcher
	}
	return nil
}

type isUpdatePropertyViewRuleRequest_Matcher interface {
	isUpdatePropertyViewRuleRequest_Matcher()
}

type UpdatePropertyViewRuleRequest_TaskMatcher struct {
	TaskMatcher *TaskPropertyMatcher `protobuf:"bytes,2,opt,name=task_matcher,json=taskMatcher,proto3,oneof"`
}

type UpdatePropertyViewRuleRequest_PatientMatcher struct {
	PatientMatcher *PatientPropertyMatcher `protobuf:"bytes,3,opt,name=patient_matcher,json=patientMatcher,proto3,oneof"`
}

func (*UpdatePropertyViewRuleRequest_TaskMatcher) isUpdatePropertyViewRuleRequest_Matcher() {}

func (*UpdatePropertyViewRuleRequest_PatientMatcher) isUpdatePropertyViewRuleRequest_Matcher() {}

type UpdatePropertyViewRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePropertyViewRuleResponse) Reset() {
	*x = UpdatePropertyViewRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_views_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertyViewRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertyViewRuleResponse) ProtoMessage() {}

func (x *UpdatePropertyViewRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_views_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertyViewRuleResponse.ProtoReflect.Descriptor instead.
func (*UpdatePropertyViewRuleResponse) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_views_svc_proto_rawDescGZIP(), []int{2}
}

var File_services_property_svc_v1_property_views_svc_proto protoreflect.FileDescriptor

var file_services_property_svc_v1_property_views_svc_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x31, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8c, 0x02, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x41, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x44, 0x6f, 0x6e, 0x74, 0x41, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x6f,
	0x6e, 0x74, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22,
	0xa8, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x52,
	0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0e, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa6, 0x01, 0x0a,
	0x14, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x37, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xd1, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x56, 0x69, 0x65, 0x77, 0x73, 0x53, 0x76, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x1c, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x53, 0x50, 0x58, 0xaa, 0x02, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x76, 0x63, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x17,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x53, 0x76, 0x63, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x23, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x76, 0x63, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x53, 0x76, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_services_property_svc_v1_property_views_svc_proto_rawDescOnce sync.Once
	file_services_property_svc_v1_property_views_svc_proto_rawDescData = file_services_property_svc_v1_property_views_svc_proto_rawDesc
)

func file_services_property_svc_v1_property_views_svc_proto_rawDescGZIP() []byte {
	file_services_property_svc_v1_property_views_svc_proto_rawDescOnce.Do(func() {
		file_services_property_svc_v1_property_views_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_property_svc_v1_property_views_svc_proto_rawDescData)
	})
	return file_services_property_svc_v1_property_views_svc_proto_rawDescData
}

var file_services_property_svc_v1_property_views_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_services_property_svc_v1_property_views_svc_proto_goTypes = []interface{}{
	(*FilterUpdate)(nil),                   // 0: services.property_svc.v1.FilterUpdate
	(*UpdatePropertyViewRuleRequest)(nil),  // 1: services.property_svc.v1.UpdatePropertyViewRuleRequest
	(*UpdatePropertyViewRuleResponse)(nil), // 2: services.property_svc.v1.UpdatePropertyViewRuleResponse
	(*TaskPropertyMatcher)(nil),            // 3: services.property_svc.v1.TaskPropertyMatcher
	(*PatientPropertyMatcher)(nil),         // 4: services.property_svc.v1.PatientPropertyMatcher
}
var file_services_property_svc_v1_property_views_svc_proto_depIdxs = []int32{
	0, // 0: services.property_svc.v1.UpdatePropertyViewRuleRequest.filter_update:type_name -> services.property_svc.v1.FilterUpdate
	3, // 1: services.property_svc.v1.UpdatePropertyViewRuleRequest.task_matcher:type_name -> services.property_svc.v1.TaskPropertyMatcher
	4, // 2: services.property_svc.v1.UpdatePropertyViewRuleRequest.patient_matcher:type_name -> services.property_svc.v1.PatientPropertyMatcher
	1, // 3: services.property_svc.v1.PropertyViewsService.UpdatePropertyViewRule:input_type -> services.property_svc.v1.UpdatePropertyViewRuleRequest
	2, // 4: services.property_svc.v1.PropertyViewsService.UpdatePropertyViewRule:output_type -> services.property_svc.v1.UpdatePropertyViewRuleResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_services_property_svc_v1_property_views_svc_proto_init() }
func file_services_property_svc_v1_property_views_svc_proto_init() {
	if File_services_property_svc_v1_property_views_svc_proto != nil {
		return
	}
	file_services_property_svc_v1_property_value_svc_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_services_property_svc_v1_property_views_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_views_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertyViewRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_views_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertyViewRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_services_property_svc_v1_property_views_svc_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*UpdatePropertyViewRuleRequest_TaskMatcher)(nil),
		(*UpdatePropertyViewRuleRequest_PatientMatcher)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_property_svc_v1_property_views_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_property_svc_v1_property_views_svc_proto_goTypes,
		DependencyIndexes: file_services_property_svc_v1_property_views_svc_proto_depIdxs,
		MessageInfos:      file_services_property_svc_v1_property_views_svc_proto_msgTypes,
	}.Build()
	File_services_property_svc_v1_property_views_svc_proto = out.File
	file_services_property_svc_v1_property_views_svc_proto_rawDesc = nil
	file_services_property_svc_v1_property_views_svc_proto_goTypes = nil
	file_services_property_svc_v1_property_views_svc_proto_depIdxs = nil
}
