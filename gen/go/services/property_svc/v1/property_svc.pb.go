// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: services/property_svc/v1/property_svc.proto

package v1

import (
	v1 "gen/libs/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Creates a new Property
type CreatePropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectType SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=services.property_svc.v1.SubjectType" json:"subject_type,omitempty" validate:"required"` // What kind of subject does this property belong to @gotags: validate:"required"
	FieldType   FieldType   `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=services.property_svc.v1.FieldType" json:"field_type,omitempty" validate:"required"`         // What kind of data can be attached using this Property? @gotags: validate:"required"
	Name        string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" validate:"required"`                                                                             // readable identifier for this property (should, but does not have to be unique) @gotags: validate:"required"
	Description *string     `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`                                                                             // Optional field for more context
	// ID of set this Property should belong to
	SetId *string `protobuf:"bytes,6,opt,name=set_id,json=setId,proto3,oneof" json:"set_id,omitempty"` // Not implemented yet
	// some field types can be or must be configured further
	//
	// Types that are assignable to FieldTypeData:
	//
	//	*CreatePropertyRequest_SelectData_
	FieldTypeData isCreatePropertyRequest_FieldTypeData `protobuf_oneof:"field_type_data"`
}

func (x *CreatePropertyRequest) Reset() {
	*x = CreatePropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertyRequest) ProtoMessage() {}

func (x *CreatePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertyRequest.ProtoReflect.Descriptor instead.
func (*CreatePropertyRequest) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePropertyRequest) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

func (x *CreatePropertyRequest) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FIELD_TYPE_UNSPECIFIED
}

func (x *CreatePropertyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePropertyRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreatePropertyRequest) GetSetId() string {
	if x != nil && x.SetId != nil {
		return *x.SetId
	}
	return ""
}

func (m *CreatePropertyRequest) GetFieldTypeData() isCreatePropertyRequest_FieldTypeData {
	if m != nil {
		return m.FieldTypeData
	}
	return nil
}

func (x *CreatePropertyRequest) GetSelectData() *CreatePropertyRequest_SelectData {
	if x, ok := x.GetFieldTypeData().(*CreatePropertyRequest_SelectData_); ok {
		return x.SelectData
	}
	return nil
}

type isCreatePropertyRequest_FieldTypeData interface {
	isCreatePropertyRequest_FieldTypeData()
}

type CreatePropertyRequest_SelectData_ struct {
	SelectData *CreatePropertyRequest_SelectData `protobuf:"bytes,9,opt,name=select_data,json=selectData,proto3,oneof"`
}

func (*CreatePropertyRequest_SelectData_) isCreatePropertyRequest_FieldTypeData() {}

type CreatePropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyId  string `protobuf:"bytes,1,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"` // uuid of the property
	Consistency string `protobuf:"bytes,2,opt,name=consistency,proto3" json:"consistency,omitempty"`
}

func (x *CreatePropertyResponse) Reset() {
	*x = CreatePropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertyResponse) ProtoMessage() {}

func (x *CreatePropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertyResponse.ProtoReflect.Descriptor instead.
func (*CreatePropertyResponse) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePropertyResponse) GetPropertyId() string {
	if x != nil {
		return x.PropertyId
	}
	return ""
}

func (x *CreatePropertyResponse) GetConsistency() string {
	if x != nil {
		return x.Consistency
	}
	return ""
}

type GetPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"uuid4"` // @gotags: validate:"uuid4"
	// describes from which View (global, ward, ...) the property is accessed from
	// The attribute "always_include_for_current_context" depends on this ViewSource
	ViewSource *GetPropertyRequest_ViewSource `protobuf:"bytes,2,opt,name=view_source,json=viewSource,proto3,oneof" json:"view_source,omitempty"`
}

func (x *GetPropertyRequest) Reset() {
	*x = GetPropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyRequest) ProtoMessage() {}

func (x *GetPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyRequest.ProtoReflect.Descriptor instead.
func (*GetPropertyRequest) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{2}
}

func (x *GetPropertyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPropertyRequest) GetViewSource() *GetPropertyRequest_ViewSource {
	if x != nil {
		return x.ViewSource
	}
	return nil
}

type GetPropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubjectType SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=services.property_svc.v1.SubjectType" json:"subject_type,omitempty"`
	FieldType   FieldType   `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=services.property_svc.v1.FieldType" json:"field_type,omitempty"`
	Name        string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description *string     `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsArchived  bool        `protobuf:"varint,6,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
	// id of set this Property should belong to
	SetId *string `protobuf:"bytes,8,opt,name=set_id,json=setId,proto3,oneof" json:"set_id,omitempty"`
	// Types that are assignable to FieldTypeData:
	//
	//	*GetPropertyResponse_SelectData_
	FieldTypeData              isGetPropertyResponse_FieldTypeData `protobuf_oneof:"field_type_data"`
	AlwaysIncludeForViewSource *bool                               `protobuf:"varint,11,opt,name=always_include_for_view_source,json=alwaysIncludeForViewSource,proto3,oneof" json:"always_include_for_view_source,omitempty"` // This value is dependend on the ViewSource
	Consistency                string                              `protobuf:"bytes,12,opt,name=consistency,proto3" json:"consistency,omitempty"`
}

func (x *GetPropertyResponse) Reset() {
	*x = GetPropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyResponse) ProtoMessage() {}

func (x *GetPropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyResponse.ProtoReflect.Descriptor instead.
func (*GetPropertyResponse) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{3}
}

func (x *GetPropertyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPropertyResponse) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

func (x *GetPropertyResponse) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FIELD_TYPE_UNSPECIFIED
}

func (x *GetPropertyResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPropertyResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GetPropertyResponse) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *GetPropertyResponse) GetSetId() string {
	if x != nil && x.SetId != nil {
		return *x.SetId
	}
	return ""
}

func (m *GetPropertyResponse) GetFieldTypeData() isGetPropertyResponse_FieldTypeData {
	if m != nil {
		return m.FieldTypeData
	}
	return nil
}

func (x *GetPropertyResponse) GetSelectData() *GetPropertyResponse_SelectData {
	if x, ok := x.GetFieldTypeData().(*GetPropertyResponse_SelectData_); ok {
		return x.SelectData
	}
	return nil
}

func (x *GetPropertyResponse) GetAlwaysIncludeForViewSource() bool {
	if x != nil && x.AlwaysIncludeForViewSource != nil {
		return *x.AlwaysIncludeForViewSource
	}
	return false
}

func (x *GetPropertyResponse) GetConsistency() string {
	if x != nil {
		return x.Consistency
	}
	return ""
}

type isGetPropertyResponse_FieldTypeData interface {
	isGetPropertyResponse_FieldTypeData()
}

type GetPropertyResponse_SelectData_ struct {
	SelectData *GetPropertyResponse_SelectData `protobuf:"bytes,10,opt,name=select_data,json=selectData,proto3,oneof"`
}

func (*GetPropertyResponse_SelectData_) isGetPropertyResponse_FieldTypeData() {}

type UpdatePropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"uuid4"` // @gotags: validate:"uuid4"
	SubjectType *SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=services.property_svc.v1.SubjectType,oneof" json:"subject_type,omitempty"`
	Name        *string      `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string      `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsArchived  *bool        `protobuf:"varint,6,opt,name=is_archived,json=isArchived,proto3,oneof" json:"is_archived,omitempty"`
	// ID of set this Property should belong to
	SetId *string `protobuf:"bytes,8,opt,name=set_id,json=setId,proto3,oneof" json:"set_id,omitempty"`
	// Types that are assignable to FieldTypeData:
	//
	//	*UpdatePropertyRequest_SelectData_
	FieldTypeData isUpdatePropertyRequest_FieldTypeData `protobuf_oneof:"field_type_data"`
	Consistency   *string                               `protobuf:"bytes,11,opt,name=consistency,proto3,oneof" json:"consistency,omitempty"` // no conflict detection, if not provided
}

func (x *UpdatePropertyRequest) Reset() {
	*x = UpdatePropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertyRequest) ProtoMessage() {}

func (x *UpdatePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePropertyRequest) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePropertyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePropertyRequest) GetSubjectType() SubjectType {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

func (x *UpdatePropertyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdatePropertyRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdatePropertyRequest) GetIsArchived() bool {
	if x != nil && x.IsArchived != nil {
		return *x.IsArchived
	}
	return false
}

func (x *UpdatePropertyRequest) GetSetId() string {
	if x != nil && x.SetId != nil {
		return *x.SetId
	}
	return ""
}

func (m *UpdatePropertyRequest) GetFieldTypeData() isUpdatePropertyRequest_FieldTypeData {
	if m != nil {
		return m.FieldTypeData
	}
	return nil
}

func (x *UpdatePropertyRequest) GetSelectData() *UpdatePropertyRequest_SelectData {
	if x, ok := x.GetFieldTypeData().(*UpdatePropertyRequest_SelectData_); ok {
		return x.SelectData
	}
	return nil
}

func (x *UpdatePropertyRequest) GetConsistency() string {
	if x != nil && x.Consistency != nil {
		return *x.Consistency
	}
	return ""
}

type isUpdatePropertyRequest_FieldTypeData interface {
	isUpdatePropertyRequest_FieldTypeData()
}

type UpdatePropertyRequest_SelectData_ struct {
	SelectData *UpdatePropertyRequest_SelectData `protobuf:"bytes,10,opt,name=select_data,json=selectData,proto3,oneof"`
}

func (*UpdatePropertyRequest_SelectData_) isUpdatePropertyRequest_FieldTypeData() {}

type UpdatePropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conflict    *v1.Conflict `protobuf:"bytes,1,opt,name=conflict,proto3,oneof" json:"conflict,omitempty"`
	Consistency string       `protobuf:"bytes,2,opt,name=consistency,proto3" json:"consistency,omitempty"`
}

func (x *UpdatePropertyResponse) Reset() {
	*x = UpdatePropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertyResponse) ProtoMessage() {}

func (x *UpdatePropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePropertyResponse) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{5}
}

func (x *UpdatePropertyResponse) GetConflict() *v1.Conflict {
	if x != nil {
		return x.Conflict
	}
	return nil
}

func (x *UpdatePropertyResponse) GetConsistency() string {
	if x != nil {
		return x.Consistency
	}
	return ""
}

type GetPropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectType *SubjectType `protobuf:"varint,1,opt,name=subject_type,json=subjectType,proto3,enum=services.property_svc.v1.SubjectType,oneof" json:"subject_type,omitempty"`
}

func (x *GetPropertiesRequest) Reset() {
	*x = GetPropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertiesRequest) ProtoMessage() {}

func (x *GetPropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertiesRequest.ProtoReflect.Descriptor instead.
func (*GetPropertiesRequest) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{6}
}

func (x *GetPropertiesRequest) GetSubjectType() SubjectType {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

type GetPropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties []*GetPropertiesResponse_Property `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *GetPropertiesResponse) Reset() {
	*x = GetPropertiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertiesResponse) ProtoMessage() {}

func (x *GetPropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertiesResponse.ProtoReflect.Descriptor instead.
func (*GetPropertiesResponse) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{7}
}

func (x *GetPropertiesResponse) GetProperties() []*GetPropertiesResponse_Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

// the select field type requires an (initial) set of options (possible values)
type CreatePropertyRequest_SelectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowFreetext *bool                                            `protobuf:"varint,1,opt,name=allow_freetext,json=allowFreetext,proto3,oneof" json:"allow_freetext,omitempty"` // allows admins to allow or prevent users of using select fields like free-text fields, this means unknown options will be added to the option set when entered.
	Options       []*CreatePropertyRequest_SelectData_SelectOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty" validate:"dive"`                         // @gotags: validate:"dive"
}

func (x *CreatePropertyRequest_SelectData) Reset() {
	*x = CreatePropertyRequest_SelectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertyRequest_SelectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertyRequest_SelectData) ProtoMessage() {}

func (x *CreatePropertyRequest_SelectData) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertyRequest_SelectData.ProtoReflect.Descriptor instead.
func (*CreatePropertyRequest_SelectData) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CreatePropertyRequest_SelectData) GetAllowFreetext() bool {
	if x != nil && x.AllowFreetext != nil {
		return *x.AllowFreetext
	}
	return false
}

func (x *CreatePropertyRequest_SelectData) GetOptions() []*CreatePropertyRequest_SelectData_SelectOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreatePropertyRequest_SelectData_SelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"required"` // @gotags: validate:"required"
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *CreatePropertyRequest_SelectData_SelectOption) Reset() {
	*x = CreatePropertyRequest_SelectData_SelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertyRequest_SelectData_SelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertyRequest_SelectData_SelectOption) ProtoMessage() {}

func (x *CreatePropertyRequest_SelectData_SelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertyRequest_SelectData_SelectOption.ProtoReflect.Descriptor instead.
func (*CreatePropertyRequest_SelectData_SelectOption) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *CreatePropertyRequest_SelectData_SelectOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePropertyRequest_SelectData_SelectOption) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type GetPropertyRequest_ViewSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*GetPropertyRequest_ViewSource_Global
	//	*GetPropertyRequest_ViewSource_WardId
	Value isGetPropertyRequest_ViewSource_Value `protobuf_oneof:"value"`
}

func (x *GetPropertyRequest_ViewSource) Reset() {
	*x = GetPropertyRequest_ViewSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyRequest_ViewSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyRequest_ViewSource) ProtoMessage() {}

func (x *GetPropertyRequest_ViewSource) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyRequest_ViewSource.ProtoReflect.Descriptor instead.
func (*GetPropertyRequest_ViewSource) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{2, 0}
}

func (m *GetPropertyRequest_ViewSource) GetValue() isGetPropertyRequest_ViewSource_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *GetPropertyRequest_ViewSource) GetGlobal() bool {
	if x, ok := x.GetValue().(*GetPropertyRequest_ViewSource_Global); ok {
		return x.Global
	}
	return false
}

func (x *GetPropertyRequest_ViewSource) GetWardId() string {
	if x, ok := x.GetValue().(*GetPropertyRequest_ViewSource_WardId); ok {
		return x.WardId
	}
	return ""
}

type isGetPropertyRequest_ViewSource_Value interface {
	isGetPropertyRequest_ViewSource_Value()
}

type GetPropertyRequest_ViewSource_Global struct {
	Global bool `protobuf:"varint,1,opt,name=global,proto3,oneof"`
}

type GetPropertyRequest_ViewSource_WardId struct {
	WardId string `protobuf:"bytes,2,opt,name=ward_id,json=wardId,proto3,oneof" validate:"omitempty,omitnil,uuid4"` // @gotags: validate:"omitempty,omitnil,uuid4"
}

func (*GetPropertyRequest_ViewSource_Global) isGetPropertyRequest_ViewSource_Value() {}

func (*GetPropertyRequest_ViewSource_WardId) isGetPropertyRequest_ViewSource_Value() {}

type GetPropertyResponse_SelectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowFreetext *bool                                          `protobuf:"varint,1,opt,name=allow_freetext,json=allowFreetext,proto3,oneof" json:"allow_freetext,omitempty"`
	Options       []*GetPropertyResponse_SelectData_SelectOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *GetPropertyResponse_SelectData) Reset() {
	*x = GetPropertyResponse_SelectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyResponse_SelectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyResponse_SelectData) ProtoMessage() {}

func (x *GetPropertyResponse_SelectData) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyResponse_SelectData.ProtoReflect.Descriptor instead.
func (*GetPropertyResponse_SelectData) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetPropertyResponse_SelectData) GetAllowFreetext() bool {
	if x != nil && x.AllowFreetext != nil {
		return *x.AllowFreetext
	}
	return false
}

func (x *GetPropertyResponse_SelectData) GetOptions() []*GetPropertyResponse_SelectData_SelectOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetPropertyResponse_SelectData_SelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsCustom    bool    `protobuf:"varint,4,opt,name=is_custom,json=isCustom,proto3" json:"is_custom,omitempty"`
	Consistency string  `protobuf:"bytes,5,opt,name=consistency,proto3" json:"consistency,omitempty"`
}

func (x *GetPropertyResponse_SelectData_SelectOption) Reset() {
	*x = GetPropertyResponse_SelectData_SelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyResponse_SelectData_SelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyResponse_SelectData_SelectOption) ProtoMessage() {}

func (x *GetPropertyResponse_SelectData_SelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyResponse_SelectData_SelectOption.ProtoReflect.Descriptor instead.
func (*GetPropertyResponse_SelectData_SelectOption) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *GetPropertyResponse_SelectData_SelectOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPropertyResponse_SelectData_SelectOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPropertyResponse_SelectData_SelectOption) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GetPropertyResponse_SelectData_SelectOption) GetIsCustom() bool {
	if x != nil {
		return x.IsCustom
	}
	return false
}

func (x *GetPropertyResponse_SelectData_SelectOption) GetConsistency() string {
	if x != nil {
		return x.Consistency
	}
	return ""
}

type UpdatePropertyRequest_SelectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowFreetext *bool                                            `protobuf:"varint,1,opt,name=allow_freetext,json=allowFreetext,proto3,oneof" json:"allow_freetext,omitempty"`
	RemoveOptions []string                                         `protobuf:"bytes,2,rep,name=remove_options,json=removeOptions,proto3" json:"remove_options,omitempty" validate:"dive,uuid4"` // @gotags: validate:"dive,uuid4"
	UpsertOptions []*UpdatePropertyRequest_SelectData_SelectOption `protobuf:"bytes,3,rep,name=upsert_options,json=upsertOptions,proto3" json:"upsert_options,omitempty" validate:"dive"`       // @gotags: validate:"dive"
}

func (x *UpdatePropertyRequest_SelectData) Reset() {
	*x = UpdatePropertyRequest_SelectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertyRequest_SelectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertyRequest_SelectData) ProtoMessage() {}

func (x *UpdatePropertyRequest_SelectData) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertyRequest_SelectData.ProtoReflect.Descriptor instead.
func (*UpdatePropertyRequest_SelectData) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{4, 0}
}

func (x *UpdatePropertyRequest_SelectData) GetAllowFreetext() bool {
	if x != nil && x.AllowFreetext != nil {
		return *x.AllowFreetext
	}
	return false
}

func (x *UpdatePropertyRequest_SelectData) GetRemoveOptions() []string {
	if x != nil {
		return x.RemoveOptions
	}
	return nil
}

func (x *UpdatePropertyRequest_SelectData) GetUpsertOptions() []*UpdatePropertyRequest_SelectData_SelectOption {
	if x != nil {
		return x.UpsertOptions
	}
	return nil
}

type UpdatePropertyRequest_SelectData_SelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"omitempty,uuid4"` // @gotags: validate:"omitempty,uuid4"
	Name        *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsCustom    *bool   `protobuf:"varint,4,opt,name=is_custom,json=isCustom,proto3,oneof" json:"is_custom,omitempty"`
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) Reset() {
	*x = UpdatePropertyRequest_SelectData_SelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertyRequest_SelectData_SelectOption) ProtoMessage() {}

func (x *UpdatePropertyRequest_SelectData_SelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertyRequest_SelectData_SelectOption.ProtoReflect.Descriptor instead.
func (*UpdatePropertyRequest_SelectData_SelectOption) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdatePropertyRequest_SelectData_SelectOption) GetIsCustom() bool {
	if x != nil && x.IsCustom != nil {
		return *x.IsCustom
	}
	return false
}

type GetPropertiesResponse_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubjectType SubjectType `protobuf:"varint,2,opt,name=subject_type,json=subjectType,proto3,enum=services.property_svc.v1.SubjectType" json:"subject_type,omitempty"`
	FieldType   FieldType   `protobuf:"varint,3,opt,name=field_type,json=fieldType,proto3,enum=services.property_svc.v1.FieldType" json:"field_type,omitempty"`
	Name        string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description *string     `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsArchived  bool        `protobuf:"varint,6,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
	// id of set this Property should belong to
	SetId *string `protobuf:"bytes,8,opt,name=set_id,json=setId,proto3,oneof" json:"set_id,omitempty"`
	// Types that are assignable to FieldTypeData:
	//
	//	*GetPropertiesResponse_Property_SelectData_
	FieldTypeData isGetPropertiesResponse_Property_FieldTypeData `protobuf_oneof:"field_type_data"`
	Consistency   string                                         `protobuf:"bytes,9,opt,name=consistency,proto3" json:"consistency,omitempty"`
}

func (x *GetPropertiesResponse_Property) Reset() {
	*x = GetPropertiesResponse_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertiesResponse_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertiesResponse_Property) ProtoMessage() {}

func (x *GetPropertiesResponse_Property) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertiesResponse_Property.ProtoReflect.Descriptor instead.
func (*GetPropertiesResponse_Property) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetPropertiesResponse_Property) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPropertiesResponse_Property) GetSubjectType() SubjectType {
	if x != nil {
		return x.SubjectType
	}
	return SubjectType_SUBJECT_TYPE_UNSPECIFIED
}

func (x *GetPropertiesResponse_Property) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FIELD_TYPE_UNSPECIFIED
}

func (x *GetPropertiesResponse_Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPropertiesResponse_Property) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GetPropertiesResponse_Property) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *GetPropertiesResponse_Property) GetSetId() string {
	if x != nil && x.SetId != nil {
		return *x.SetId
	}
	return ""
}

func (m *GetPropertiesResponse_Property) GetFieldTypeData() isGetPropertiesResponse_Property_FieldTypeData {
	if m != nil {
		return m.FieldTypeData
	}
	return nil
}

func (x *GetPropertiesResponse_Property) GetSelectData() *GetPropertiesResponse_Property_SelectData {
	if x, ok := x.GetFieldTypeData().(*GetPropertiesResponse_Property_SelectData_); ok {
		return x.SelectData
	}
	return nil
}

func (x *GetPropertiesResponse_Property) GetConsistency() string {
	if x != nil {
		return x.Consistency
	}
	return ""
}

type isGetPropertiesResponse_Property_FieldTypeData interface {
	isGetPropertiesResponse_Property_FieldTypeData()
}

type GetPropertiesResponse_Property_SelectData_ struct {
	SelectData *GetPropertiesResponse_Property_SelectData `protobuf:"bytes,10,opt,name=select_data,json=selectData,proto3,oneof"`
}

func (*GetPropertiesResponse_Property_SelectData_) isGetPropertiesResponse_Property_FieldTypeData() {}

type GetPropertiesResponse_Property_SelectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowFreetext *bool                                                     `protobuf:"varint,1,opt,name=allow_freetext,json=allowFreetext,proto3,oneof" json:"allow_freetext,omitempty"`
	Options       []*GetPropertiesResponse_Property_SelectData_SelectOption `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *GetPropertiesResponse_Property_SelectData) Reset() {
	*x = GetPropertiesResponse_Property_SelectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertiesResponse_Property_SelectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertiesResponse_Property_SelectData) ProtoMessage() {}

func (x *GetPropertiesResponse_Property_SelectData) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertiesResponse_Property_SelectData.ProtoReflect.Descriptor instead.
func (*GetPropertiesResponse_Property_SelectData) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (x *GetPropertiesResponse_Property_SelectData) GetAllowFreetext() bool {
	if x != nil && x.AllowFreetext != nil {
		return *x.AllowFreetext
	}
	return false
}

func (x *GetPropertiesResponse_Property_SelectData) GetOptions() []*GetPropertiesResponse_Property_SelectData_SelectOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetPropertiesResponse_Property_SelectData_SelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsCustom    bool    `protobuf:"varint,4,opt,name=is_custom,json=isCustom,proto3" json:"is_custom,omitempty"`
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) Reset() {
	*x = GetPropertiesResponse_Property_SelectData_SelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertiesResponse_Property_SelectData_SelectOption) ProtoMessage() {}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_services_property_svc_v1_property_svc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertiesResponse_Property_SelectData_SelectOption.ProtoReflect.Descriptor instead.
func (*GetPropertiesResponse_Property_SelectData_SelectOption) Descriptor() ([]byte, []int) {
	return file_services_property_svc_v1_property_svc_proto_rawDescGZIP(), []int{7, 0, 0, 0}
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GetPropertiesResponse_Property_SelectData_SelectOption) GetIsCustom() bool {
	if x != nil {
		return x.IsCustom
	}
	return false
}

var File_services_property_svc_v1_property_svc_proto protoreflect.FileDescriptor

var file_services_property_svc_v1_property_svc_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6c,
	0x69, 0x62, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x05, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x42, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x89, 0x02, 0x0a, 0x0a, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x65, 0x74, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x59, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0xdf, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x4a, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12,
	0x19, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x9e, 0x07, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47,
	0x0a, 0x1e, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x1a, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0xd7, 0x02, 0x0a, 0x0a, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74,
	0x65, 0x78, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xf5, 0x06, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x5d, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x1a, 0x8c, 0x03, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a, 0x0e, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x08, 0x69,
	0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x74, 0x65, 0x78, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x82, 0x01, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x62, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x22, 0x76, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x07, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x9b, 0x06,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x66, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0xc0, 0x02, 0x0a, 0x0a, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x65, 0x74, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x86, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x74, 0x65, 0x78, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x32, 0xe1, 0x03, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x75, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0xcc, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x42, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x76, 0x63, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x73, 0x76, 0x63, 0x2f,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x50, 0x58, 0xaa, 0x02, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x76, 0x63, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x76, 0x63, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x23, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x53, 0x76, 0x63, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x76, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_property_svc_v1_property_svc_proto_rawDescOnce sync.Once
	file_services_property_svc_v1_property_svc_proto_rawDescData = file_services_property_svc_v1_property_svc_proto_rawDesc
)

func file_services_property_svc_v1_property_svc_proto_rawDescGZIP() []byte {
	file_services_property_svc_v1_property_svc_proto_rawDescOnce.Do(func() {
		file_services_property_svc_v1_property_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_property_svc_v1_property_svc_proto_rawDescData)
	})
	return file_services_property_svc_v1_property_svc_proto_rawDescData
}

var file_services_property_svc_v1_property_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_services_property_svc_v1_property_svc_proto_goTypes = []interface{}{
	(*CreatePropertyRequest)(nil),                                  // 0: services.property_svc.v1.CreatePropertyRequest
	(*CreatePropertyResponse)(nil),                                 // 1: services.property_svc.v1.CreatePropertyResponse
	(*GetPropertyRequest)(nil),                                     // 2: services.property_svc.v1.GetPropertyRequest
	(*GetPropertyResponse)(nil),                                    // 3: services.property_svc.v1.GetPropertyResponse
	(*UpdatePropertyRequest)(nil),                                  // 4: services.property_svc.v1.UpdatePropertyRequest
	(*UpdatePropertyResponse)(nil),                                 // 5: services.property_svc.v1.UpdatePropertyResponse
	(*GetPropertiesRequest)(nil),                                   // 6: services.property_svc.v1.GetPropertiesRequest
	(*GetPropertiesResponse)(nil),                                  // 7: services.property_svc.v1.GetPropertiesResponse
	(*CreatePropertyRequest_SelectData)(nil),                       // 8: services.property_svc.v1.CreatePropertyRequest.SelectData
	(*CreatePropertyRequest_SelectData_SelectOption)(nil),          // 9: services.property_svc.v1.CreatePropertyRequest.SelectData.SelectOption
	(*GetPropertyRequest_ViewSource)(nil),                          // 10: services.property_svc.v1.GetPropertyRequest.ViewSource
	(*GetPropertyResponse_SelectData)(nil),                         // 11: services.property_svc.v1.GetPropertyResponse.SelectData
	(*GetPropertyResponse_SelectData_SelectOption)(nil),            // 12: services.property_svc.v1.GetPropertyResponse.SelectData.SelectOption
	(*UpdatePropertyRequest_SelectData)(nil),                       // 13: services.property_svc.v1.UpdatePropertyRequest.SelectData
	(*UpdatePropertyRequest_SelectData_SelectOption)(nil),          // 14: services.property_svc.v1.UpdatePropertyRequest.SelectData.SelectOption
	(*GetPropertiesResponse_Property)(nil),                         // 15: services.property_svc.v1.GetPropertiesResponse.Property
	(*GetPropertiesResponse_Property_SelectData)(nil),              // 16: services.property_svc.v1.GetPropertiesResponse.Property.SelectData
	(*GetPropertiesResponse_Property_SelectData_SelectOption)(nil), // 17: services.property_svc.v1.GetPropertiesResponse.Property.SelectData.SelectOption
	(SubjectType)(0),                                               // 18: services.property_svc.v1.SubjectType
	(FieldType)(0),                                                 // 19: services.property_svc.v1.FieldType
	(*v1.Conflict)(nil),                                            // 20: libs.common.v1.Conflict
}
var file_services_property_svc_v1_property_svc_proto_depIdxs = []int32{
	18, // 0: services.property_svc.v1.CreatePropertyRequest.subject_type:type_name -> services.property_svc.v1.SubjectType
	19, // 1: services.property_svc.v1.CreatePropertyRequest.field_type:type_name -> services.property_svc.v1.FieldType
	8,  // 2: services.property_svc.v1.CreatePropertyRequest.select_data:type_name -> services.property_svc.v1.CreatePropertyRequest.SelectData
	10, // 3: services.property_svc.v1.GetPropertyRequest.view_source:type_name -> services.property_svc.v1.GetPropertyRequest.ViewSource
	18, // 4: services.property_svc.v1.GetPropertyResponse.subject_type:type_name -> services.property_svc.v1.SubjectType
	19, // 5: services.property_svc.v1.GetPropertyResponse.field_type:type_name -> services.property_svc.v1.FieldType
	11, // 6: services.property_svc.v1.GetPropertyResponse.select_data:type_name -> services.property_svc.v1.GetPropertyResponse.SelectData
	18, // 7: services.property_svc.v1.UpdatePropertyRequest.subject_type:type_name -> services.property_svc.v1.SubjectType
	13, // 8: services.property_svc.v1.UpdatePropertyRequest.select_data:type_name -> services.property_svc.v1.UpdatePropertyRequest.SelectData
	20, // 9: services.property_svc.v1.UpdatePropertyResponse.conflict:type_name -> libs.common.v1.Conflict
	18, // 10: services.property_svc.v1.GetPropertiesRequest.subject_type:type_name -> services.property_svc.v1.SubjectType
	15, // 11: services.property_svc.v1.GetPropertiesResponse.properties:type_name -> services.property_svc.v1.GetPropertiesResponse.Property
	9,  // 12: services.property_svc.v1.CreatePropertyRequest.SelectData.options:type_name -> services.property_svc.v1.CreatePropertyRequest.SelectData.SelectOption
	12, // 13: services.property_svc.v1.GetPropertyResponse.SelectData.options:type_name -> services.property_svc.v1.GetPropertyResponse.SelectData.SelectOption
	14, // 14: services.property_svc.v1.UpdatePropertyRequest.SelectData.upsert_options:type_name -> services.property_svc.v1.UpdatePropertyRequest.SelectData.SelectOption
	18, // 15: services.property_svc.v1.GetPropertiesResponse.Property.subject_type:type_name -> services.property_svc.v1.SubjectType
	19, // 16: services.property_svc.v1.GetPropertiesResponse.Property.field_type:type_name -> services.property_svc.v1.FieldType
	16, // 17: services.property_svc.v1.GetPropertiesResponse.Property.select_data:type_name -> services.property_svc.v1.GetPropertiesResponse.Property.SelectData
	17, // 18: services.property_svc.v1.GetPropertiesResponse.Property.SelectData.options:type_name -> services.property_svc.v1.GetPropertiesResponse.Property.SelectData.SelectOption
	0,  // 19: services.property_svc.v1.PropertyService.CreateProperty:input_type -> services.property_svc.v1.CreatePropertyRequest
	2,  // 20: services.property_svc.v1.PropertyService.GetProperty:input_type -> services.property_svc.v1.GetPropertyRequest
	4,  // 21: services.property_svc.v1.PropertyService.UpdateProperty:input_type -> services.property_svc.v1.UpdatePropertyRequest
	6,  // 22: services.property_svc.v1.PropertyService.GetProperties:input_type -> services.property_svc.v1.GetPropertiesRequest
	1,  // 23: services.property_svc.v1.PropertyService.CreateProperty:output_type -> services.property_svc.v1.CreatePropertyResponse
	3,  // 24: services.property_svc.v1.PropertyService.GetProperty:output_type -> services.property_svc.v1.GetPropertyResponse
	5,  // 25: services.property_svc.v1.PropertyService.UpdateProperty:output_type -> services.property_svc.v1.UpdatePropertyResponse
	7,  // 26: services.property_svc.v1.PropertyService.GetProperties:output_type -> services.property_svc.v1.GetPropertiesResponse
	23, // [23:27] is the sub-list for method output_type
	19, // [19:23] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_services_property_svc_v1_property_svc_proto_init() }
func file_services_property_svc_v1_property_svc_proto_init() {
	if File_services_property_svc_v1_property_svc_proto != nil {
		return
	}
	file_services_property_svc_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_services_property_svc_v1_property_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertyRequest_SelectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertyRequest_SelectData_SelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyRequest_ViewSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyResponse_SelectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertyResponse_SelectData_SelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertyRequest_SelectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePropertyRequest_SelectData_SelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertiesResponse_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertiesResponse_Property_SelectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_property_svc_v1_property_svc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPropertiesResponse_Property_SelectData_SelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_services_property_svc_v1_property_svc_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreatePropertyRequest_SelectData_)(nil),
	}
	file_services_property_svc_v1_property_svc_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_services_property_svc_v1_property_svc_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetPropertyResponse_SelectData_)(nil),
	}
	file_services_property_svc_v1_property_svc_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*UpdatePropertyRequest_SelectData_)(nil),
	}
	file_services_property_svc_v1_property_svc_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_services_property_svc_v1_property_svc_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_services_property_svc_v1_property_svc_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_services_property_svc_v1_property_svc_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_services_property_svc_v1_property_svc_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*GetPropertyRequest_ViewSource_Global)(nil),
		(*GetPropertyRequest_ViewSource_WardId)(nil),
	}
	file_services_property_svc_v1_property_svc_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_services_property_svc_v1_property_svc_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_services_property_svc_v1_property_svc_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_services_property_svc_v1_property_svc_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_services_property_svc_v1_property_svc_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*GetPropertiesResponse_Property_SelectData_)(nil),
	}
	file_services_property_svc_v1_property_svc_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_services_property_svc_v1_property_svc_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_property_svc_v1_property_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_property_svc_v1_property_svc_proto_goTypes,
		DependencyIndexes: file_services_property_svc_v1_property_svc_proto_depIdxs,
		MessageInfos:      file_services_property_svc_v1_property_svc_proto_msgTypes,
	}.Build()
	File_services_property_svc_v1_property_svc_proto = out.File
	file_services_property_svc_v1_property_svc_proto_rawDesc = nil
	file_services_property_svc_v1_property_svc_proto_goTypes = nil
	file_services_property_svc_v1_property_svc_proto_depIdxs = nil
}
