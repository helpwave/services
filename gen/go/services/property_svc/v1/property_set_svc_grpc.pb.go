// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/property_svc/v1/property_set_svc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PropertySetService_CreatePropertySet_FullMethodName = "/services.property_svc.v1.PropertySetService/CreatePropertySet"
	PropertySetService_GetPropertySet_FullMethodName    = "/services.property_svc.v1.PropertySetService/GetPropertySet"
)

// PropertySetServiceClient is the client API for PropertySetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertySetServiceClient interface {
	CreatePropertySet(ctx context.Context, in *CreatePropertySetRequest, opts ...grpc.CallOption) (*CreatePropertySetResponse, error)
	GetPropertySet(ctx context.Context, in *GetPropertySetRequest, opts ...grpc.CallOption) (*GetPropertySetResponse, error)
}

type propertySetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertySetServiceClient(cc grpc.ClientConnInterface) PropertySetServiceClient {
	return &propertySetServiceClient{cc}
}

func (c *propertySetServiceClient) CreatePropertySet(ctx context.Context, in *CreatePropertySetRequest, opts ...grpc.CallOption) (*CreatePropertySetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePropertySetResponse)
	err := c.cc.Invoke(ctx, PropertySetService_CreatePropertySet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertySetServiceClient) GetPropertySet(ctx context.Context, in *GetPropertySetRequest, opts ...grpc.CallOption) (*GetPropertySetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPropertySetResponse)
	err := c.cc.Invoke(ctx, PropertySetService_GetPropertySet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertySetServiceServer is the server API for PropertySetService service.
// All implementations must embed UnimplementedPropertySetServiceServer
// for forward compatibility
type PropertySetServiceServer interface {
	CreatePropertySet(context.Context, *CreatePropertySetRequest) (*CreatePropertySetResponse, error)
	GetPropertySet(context.Context, *GetPropertySetRequest) (*GetPropertySetResponse, error)
	mustEmbedUnimplementedPropertySetServiceServer()
}

// UnimplementedPropertySetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPropertySetServiceServer struct {
}

func (UnimplementedPropertySetServiceServer) CreatePropertySet(context.Context, *CreatePropertySetRequest) (*CreatePropertySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePropertySet not implemented")
}
func (UnimplementedPropertySetServiceServer) GetPropertySet(context.Context, *GetPropertySetRequest) (*GetPropertySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertySet not implemented")
}
func (UnimplementedPropertySetServiceServer) mustEmbedUnimplementedPropertySetServiceServer() {}

// UnsafePropertySetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertySetServiceServer will
// result in compilation errors.
type UnsafePropertySetServiceServer interface {
	mustEmbedUnimplementedPropertySetServiceServer()
}

func RegisterPropertySetServiceServer(s grpc.ServiceRegistrar, srv PropertySetServiceServer) {
	s.RegisterService(&PropertySetService_ServiceDesc, srv)
}

func _PropertySetService_CreatePropertySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropertySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertySetServiceServer).CreatePropertySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertySetService_CreatePropertySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertySetServiceServer).CreatePropertySet(ctx, req.(*CreatePropertySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertySetService_GetPropertySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertySetServiceServer).GetPropertySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PropertySetService_GetPropertySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertySetServiceServer).GetPropertySet(ctx, req.(*GetPropertySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertySetService_ServiceDesc is the grpc.ServiceDesc for PropertySetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertySetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.property_svc.v1.PropertySetService",
	HandlerType: (*PropertySetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePropertySet",
			Handler:    _PropertySetService_CreatePropertySet_Handler,
		},
		{
			MethodName: "GetPropertySet",
			Handler:    _PropertySetService_GetPropertySet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/property_svc/v1/property_set_svc.proto",
}
