/**
 * @fileoverview gRPC-Web generated client stub for proto.services.task_svc.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: proto/services/task_svc/v1/task_svc.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.proto = {};
proto.proto.services = {};
proto.proto.services.task_svc = {};
proto.proto.services.task_svc.v1 = require('./task_svc_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.services.task_svc.v1.TaskServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.services.task_svc.v1.TaskServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.task_svc.v1.CreateTaskRequest,
 *   !proto.proto.services.task_svc.v1.CreateTaskResponse>}
 */
const methodDescriptor_TaskService_CreateTask = new grpc.web.MethodDescriptor(
  '/proto.services.task_svc.v1.TaskService/CreateTask',
  grpc.web.MethodType.UNARY,
  proto.proto.services.task_svc.v1.CreateTaskRequest,
  proto.proto.services.task_svc.v1.CreateTaskResponse,
  /**
   * @param {!proto.proto.services.task_svc.v1.CreateTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.task_svc.v1.CreateTaskResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.task_svc.v1.CreateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.task_svc.v1.CreateTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.task_svc.v1.CreateTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.task_svc.v1.TaskServiceClient.prototype.createTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/CreateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_CreateTask,
      callback);
};


/**
 * @param {!proto.proto.services.task_svc.v1.CreateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.task_svc.v1.CreateTaskResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.task_svc.v1.TaskServicePromiseClient.prototype.createTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/CreateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_CreateTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.task_svc.v1.GetTaskRequest,
 *   !proto.proto.services.task_svc.v1.GetTaskResponse>}
 */
const methodDescriptor_TaskService_GetTask = new grpc.web.MethodDescriptor(
  '/proto.services.task_svc.v1.TaskService/GetTask',
  grpc.web.MethodType.UNARY,
  proto.proto.services.task_svc.v1.GetTaskRequest,
  proto.proto.services.task_svc.v1.GetTaskResponse,
  /**
   * @param {!proto.proto.services.task_svc.v1.GetTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.task_svc.v1.GetTaskResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.task_svc.v1.GetTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.task_svc.v1.GetTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.task_svc.v1.GetTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.task_svc.v1.TaskServiceClient.prototype.getTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/GetTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTask,
      callback);
};


/**
 * @param {!proto.proto.services.task_svc.v1.GetTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.task_svc.v1.GetTaskResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.task_svc.v1.TaskServicePromiseClient.prototype.getTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/GetTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.task_svc.v1.UpdateTaskRequest,
 *   !proto.proto.services.task_svc.v1.UpdateTaskResponse>}
 */
const methodDescriptor_TaskService_UpdateTask = new grpc.web.MethodDescriptor(
  '/proto.services.task_svc.v1.TaskService/UpdateTask',
  grpc.web.MethodType.UNARY,
  proto.proto.services.task_svc.v1.UpdateTaskRequest,
  proto.proto.services.task_svc.v1.UpdateTaskResponse,
  /**
   * @param {!proto.proto.services.task_svc.v1.UpdateTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.task_svc.v1.UpdateTaskResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.task_svc.v1.UpdateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.task_svc.v1.UpdateTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.task_svc.v1.UpdateTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.task_svc.v1.TaskServiceClient.prototype.updateTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/UpdateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateTask,
      callback);
};


/**
 * @param {!proto.proto.services.task_svc.v1.UpdateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.task_svc.v1.UpdateTaskResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.task_svc.v1.TaskServicePromiseClient.prototype.updateTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/UpdateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.task_svc.v1.TaskToInProgressRequest,
 *   !proto.proto.services.task_svc.v1.TaskToInProgressResponse>}
 */
const methodDescriptor_TaskService_TaskToInProgress = new grpc.web.MethodDescriptor(
  '/proto.services.task_svc.v1.TaskService/TaskToInProgress',
  grpc.web.MethodType.UNARY,
  proto.proto.services.task_svc.v1.TaskToInProgressRequest,
  proto.proto.services.task_svc.v1.TaskToInProgressResponse,
  /**
   * @param {!proto.proto.services.task_svc.v1.TaskToInProgressRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.task_svc.v1.TaskToInProgressResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.task_svc.v1.TaskToInProgressRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.task_svc.v1.TaskToInProgressResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.task_svc.v1.TaskToInProgressResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.task_svc.v1.TaskServiceClient.prototype.taskToInProgress =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/TaskToInProgress',
      request,
      metadata || {},
      methodDescriptor_TaskService_TaskToInProgress,
      callback);
};


/**
 * @param {!proto.proto.services.task_svc.v1.TaskToInProgressRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.task_svc.v1.TaskToInProgressResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.task_svc.v1.TaskServicePromiseClient.prototype.taskToInProgress =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/TaskToInProgress',
      request,
      metadata || {},
      methodDescriptor_TaskService_TaskToInProgress);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.task_svc.v1.TaskToDoneRequest,
 *   !proto.proto.services.task_svc.v1.TaskToDoneResponse>}
 */
const methodDescriptor_TaskService_TaskToDone = new grpc.web.MethodDescriptor(
  '/proto.services.task_svc.v1.TaskService/TaskToDone',
  grpc.web.MethodType.UNARY,
  proto.proto.services.task_svc.v1.TaskToDoneRequest,
  proto.proto.services.task_svc.v1.TaskToDoneResponse,
  /**
   * @param {!proto.proto.services.task_svc.v1.TaskToDoneRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.task_svc.v1.TaskToDoneResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.task_svc.v1.TaskToDoneRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.task_svc.v1.TaskToDoneResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.task_svc.v1.TaskToDoneResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.task_svc.v1.TaskServiceClient.prototype.taskToDone =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/TaskToDone',
      request,
      metadata || {},
      methodDescriptor_TaskService_TaskToDone,
      callback);
};


/**
 * @param {!proto.proto.services.task_svc.v1.TaskToDoneRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.task_svc.v1.TaskToDoneResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.task_svc.v1.TaskServicePromiseClient.prototype.taskToDone =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/TaskToDone',
      request,
      metadata || {},
      methodDescriptor_TaskService_TaskToDone);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.task_svc.v1.AssignTaskToUserRequest,
 *   !proto.proto.services.task_svc.v1.AssignTaskToUserResponse>}
 */
const methodDescriptor_TaskService_AssignTaskToUser = new grpc.web.MethodDescriptor(
  '/proto.services.task_svc.v1.TaskService/AssignTaskToUser',
  grpc.web.MethodType.UNARY,
  proto.proto.services.task_svc.v1.AssignTaskToUserRequest,
  proto.proto.services.task_svc.v1.AssignTaskToUserResponse,
  /**
   * @param {!proto.proto.services.task_svc.v1.AssignTaskToUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.task_svc.v1.AssignTaskToUserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.task_svc.v1.AssignTaskToUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.task_svc.v1.AssignTaskToUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.task_svc.v1.AssignTaskToUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.task_svc.v1.TaskServiceClient.prototype.assignTaskToUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/AssignTaskToUser',
      request,
      metadata || {},
      methodDescriptor_TaskService_AssignTaskToUser,
      callback);
};


/**
 * @param {!proto.proto.services.task_svc.v1.AssignTaskToUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.task_svc.v1.AssignTaskToUserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.task_svc.v1.TaskServicePromiseClient.prototype.assignTaskToUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/AssignTaskToUser',
      request,
      metadata || {},
      methodDescriptor_TaskService_AssignTaskToUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.task_svc.v1.UnassignTaskFromUserRequest,
 *   !proto.proto.services.task_svc.v1.UnassignTaskFromUserResponse>}
 */
const methodDescriptor_TaskService_UnassignTaskFromUser = new grpc.web.MethodDescriptor(
  '/proto.services.task_svc.v1.TaskService/UnassignTaskFromUser',
  grpc.web.MethodType.UNARY,
  proto.proto.services.task_svc.v1.UnassignTaskFromUserRequest,
  proto.proto.services.task_svc.v1.UnassignTaskFromUserResponse,
  /**
   * @param {!proto.proto.services.task_svc.v1.UnassignTaskFromUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.task_svc.v1.UnassignTaskFromUserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.task_svc.v1.UnassignTaskFromUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.task_svc.v1.UnassignTaskFromUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.task_svc.v1.UnassignTaskFromUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.task_svc.v1.TaskServiceClient.prototype.unassignTaskFromUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/UnassignTaskFromUser',
      request,
      metadata || {},
      methodDescriptor_TaskService_UnassignTaskFromUser,
      callback);
};


/**
 * @param {!proto.proto.services.task_svc.v1.UnassignTaskFromUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.task_svc.v1.UnassignTaskFromUserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.task_svc.v1.TaskServicePromiseClient.prototype.unassignTaskFromUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.task_svc.v1.TaskService/UnassignTaskFromUser',
      request,
      metadata || {},
      methodDescriptor_TaskService_UnassignTaskFromUser);
};


module.exports = proto.proto.services.task_svc.v1;

