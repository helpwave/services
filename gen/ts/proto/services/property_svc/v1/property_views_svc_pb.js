// source: proto/services/property_svc/v1/property_views_svc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var proto_services_property_svc_v1_property_value_svc_pb = require('../../../../proto/services/property_svc/v1/property_value_svc_pb.js');
goog.object.extend(proto, proto_services_property_svc_v1_property_value_svc_pb);
goog.exportSymbol('proto.proto.services.property_svc.v1.FilterUpdate', null, global);
goog.exportSymbol('proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest', null, global);
goog.exportSymbol('proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.MatcherCase', null, global);
goog.exportSymbol('proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.services.property_svc.v1.FilterUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.services.property_svc.v1.FilterUpdate.repeatedFields_, null);
};
goog.inherits(proto.proto.services.property_svc.v1.FilterUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.services.property_svc.v1.FilterUpdate.displayName = 'proto.proto.services.property_svc.v1.FilterUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.oneofGroups_);
};
goog.inherits(proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.displayName = 'proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse.displayName = 'proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.services.property_svc.v1.FilterUpdate.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.services.property_svc.v1.FilterUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.services.property_svc.v1.FilterUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.property_svc.v1.FilterUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    appendToAlwaysIncludeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    removeFromAlwaysIncludeList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    appendToDontAlwaysIncludeList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    removeFromDontAlwaysIncludeList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate}
 */
proto.proto.services.property_svc.v1.FilterUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.services.property_svc.v1.FilterUpdate;
  return proto.proto.services.property_svc.v1.FilterUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.services.property_svc.v1.FilterUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate}
 */
proto.proto.services.property_svc.v1.FilterUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAppendToAlwaysInclude(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRemoveFromAlwaysInclude(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAppendToDontAlwaysInclude(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addRemoveFromDontAlwaysInclude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.services.property_svc.v1.FilterUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.services.property_svc.v1.FilterUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.property_svc.v1.FilterUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppendToAlwaysIncludeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getRemoveFromAlwaysIncludeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAppendToDontAlwaysIncludeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getRemoveFromDontAlwaysIncludeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * repeated string append_to_always_include = 1;
 * @return {!Array<string>}
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.getAppendToAlwaysIncludeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.setAppendToAlwaysIncludeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.addAppendToAlwaysInclude = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.clearAppendToAlwaysIncludeList = function() {
  return this.setAppendToAlwaysIncludeList([]);
};


/**
 * repeated string remove_from_always_include = 2;
 * @return {!Array<string>}
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.getRemoveFromAlwaysIncludeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.setRemoveFromAlwaysIncludeList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.addRemoveFromAlwaysInclude = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.clearRemoveFromAlwaysIncludeList = function() {
  return this.setRemoveFromAlwaysIncludeList([]);
};


/**
 * repeated string append_to_dont_always_include = 3;
 * @return {!Array<string>}
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.getAppendToDontAlwaysIncludeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.setAppendToDontAlwaysIncludeList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.addAppendToDontAlwaysInclude = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.clearAppendToDontAlwaysIncludeList = function() {
  return this.setAppendToDontAlwaysIncludeList([]);
};


/**
 * repeated string remove_from_dont_always_include = 4;
 * @return {!Array<string>}
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.getRemoveFromDontAlwaysIncludeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.setRemoveFromDontAlwaysIncludeList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.addRemoveFromDontAlwaysInclude = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.services.property_svc.v1.FilterUpdate} returns this
 */
proto.proto.services.property_svc.v1.FilterUpdate.prototype.clearRemoveFromDontAlwaysIncludeList = function() {
  return this.setRemoveFromDontAlwaysIncludeList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.MatcherCase = {
  MATCHER_NOT_SET: 0,
  TASK_MATCHER: 2
};

/**
 * @return {proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.MatcherCase}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.getMatcherCase = function() {
  return /** @type {proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.MatcherCase} */(jspb.Message.computeOneofCase(this, proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filterUpdate: (f = msg.getFilterUpdate()) && proto.proto.services.property_svc.v1.FilterUpdate.toObject(includeInstance, f),
    taskMatcher: (f = msg.getTaskMatcher()) && proto_services_property_svc_v1_property_value_svc_pb.TaskPropertyMatcher.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest;
  return proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.services.property_svc.v1.FilterUpdate;
      reader.readMessage(value,proto.proto.services.property_svc.v1.FilterUpdate.deserializeBinaryFromReader);
      msg.setFilterUpdate(value);
      break;
    case 2:
      var value = new proto_services_property_svc_v1_property_value_svc_pb.TaskPropertyMatcher;
      reader.readMessage(value,proto_services_property_svc_v1_property_value_svc_pb.TaskPropertyMatcher.deserializeBinaryFromReader);
      msg.setTaskMatcher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.services.property_svc.v1.FilterUpdate.serializeBinaryToWriter
    );
  }
  f = message.getTaskMatcher();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_services_property_svc_v1_property_value_svc_pb.TaskPropertyMatcher.serializeBinaryToWriter
    );
  }
};


/**
 * optional FilterUpdate filter_update = 1;
 * @return {?proto.proto.services.property_svc.v1.FilterUpdate}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.getFilterUpdate = function() {
  return /** @type{?proto.proto.services.property_svc.v1.FilterUpdate} */ (
    jspb.Message.getWrapperField(this, proto.proto.services.property_svc.v1.FilterUpdate, 1));
};


/**
 * @param {?proto.proto.services.property_svc.v1.FilterUpdate|undefined} value
 * @return {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest} returns this
*/
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.setFilterUpdate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest} returns this
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.clearFilterUpdate = function() {
  return this.setFilterUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.hasFilterUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TaskPropertyMatcher task_matcher = 2;
 * @return {?proto.proto.services.property_svc.v1.TaskPropertyMatcher}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.getTaskMatcher = function() {
  return /** @type{?proto.proto.services.property_svc.v1.TaskPropertyMatcher} */ (
    jspb.Message.getWrapperField(this, proto_services_property_svc_v1_property_value_svc_pb.TaskPropertyMatcher, 2));
};


/**
 * @param {?proto.proto.services.property_svc.v1.TaskPropertyMatcher|undefined} value
 * @return {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest} returns this
*/
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.setTaskMatcher = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest} returns this
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.clearTaskMatcher = function() {
  return this.setTaskMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleRequest.prototype.hasTaskMatcher = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse;
  return proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.property_svc.v1.UpdatePropertyViewRuleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.proto.services.property_svc.v1);
