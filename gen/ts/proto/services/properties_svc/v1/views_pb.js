// source: proto/services/properties_svc/v1/views.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.proto.services.properties_svc.v1.UpdateOrderRequest', null, global);
goog.exportSymbol('proto.proto.services.properties_svc.v1.UpdateOrderResponse', null, global);
goog.exportSymbol('proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest', null, global);
goog.exportSymbol('proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.SoftRequiredCase', null, global);
goog.exportSymbol('proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.oneofGroups_);
};
goog.inherits(proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.displayName = 'proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse.displayName = 'proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.services.properties_svc.v1.UpdateOrderRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.services.properties_svc.v1.UpdateOrderRequest.displayName = 'proto.proto.services.properties_svc.v1.UpdateOrderRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.services.properties_svc.v1.UpdateOrderResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.services.properties_svc.v1.UpdateOrderResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.services.properties_svc.v1.UpdateOrderResponse.displayName = 'proto.proto.services.properties_svc.v1.UpdateOrderResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.SoftRequiredCase = {
  SOFT_REQUIRED_NOT_SET: 0,
  RESET_SOFT_REQUIRED: 3,
  SET_SOFT_REQUIRED: 4
};

/**
 * @return {proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.SoftRequiredCase}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.getSoftRequiredCase = function() {
  return /** @type {proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.SoftRequiredCase} */(jspb.Message.computeOneofCase(this, proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    wardId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    patientId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resetSoftRequired: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    setSoftRequired: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    appendToAlwaysInclude: jspb.Message.getFieldWithDefault(msg, 5, ""),
    removeFromAlwaysInclude: jspb.Message.getFieldWithDefault(msg, 6, ""),
    appendToDontAlwaysInclude: jspb.Message.getFieldWithDefault(msg, 7, ""),
    removeFromDontAlwaysInclude: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest;
  return proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWardId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPatientId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResetSoftRequired(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSetSoftRequired(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppendToAlwaysInclude(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoveFromAlwaysInclude(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppendToDontAlwaysInclude(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoveFromDontAlwaysInclude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string ward_id = 1;
 * @return {string}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.getWardId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.setWardId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.clearWardId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.hasWardId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string patient_id = 2;
 * @return {string}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.getPatientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.setPatientId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.clearPatientId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.hasPatientId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool reset_soft_required = 3;
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.getResetSoftRequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.setResetSoftRequired = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.clearResetSoftRequired = function() {
  return jspb.Message.setOneofField(this, 3, proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.hasResetSoftRequired = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool set_soft_required = 4;
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.getSetSoftRequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.setSetSoftRequired = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.clearSetSoftRequired = function() {
  return jspb.Message.setOneofField(this, 4, proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.hasSetSoftRequired = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string append_to_always_include = 5;
 * @return {string}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.getAppendToAlwaysInclude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.setAppendToAlwaysInclude = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.clearAppendToAlwaysInclude = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.hasAppendToAlwaysInclude = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string remove_from_always_include = 6;
 * @return {string}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.getRemoveFromAlwaysInclude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.setRemoveFromAlwaysInclude = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.clearRemoveFromAlwaysInclude = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.hasRemoveFromAlwaysInclude = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string append_to_dont_always_include = 7;
 * @return {string}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.getAppendToDontAlwaysInclude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.setAppendToDontAlwaysInclude = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.clearAppendToDontAlwaysInclude = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.hasAppendToDontAlwaysInclude = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string remove_from_dont_always_include = 8;
 * @return {string}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.getRemoveFromDontAlwaysInclude = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.setRemoveFromDontAlwaysInclude = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.clearRemoveFromDontAlwaysInclude = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleRequest.prototype.hasRemoveFromDontAlwaysInclude = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse;
  return proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.properties_svc.v1.UpdatePatientPropertyViewRuleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.services.properties_svc.v1.UpdateOrderRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.services.properties_svc.v1.UpdateOrderRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertyId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prevNeighbor: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.services.properties_svc.v1.UpdateOrderRequest}
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.services.properties_svc.v1.UpdateOrderRequest;
  return proto.proto.services.properties_svc.v1.UpdateOrderRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.services.properties_svc.v1.UpdateOrderRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.services.properties_svc.v1.UpdateOrderRequest}
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrevNeighbor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.services.properties_svc.v1.UpdateOrderRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.services.properties_svc.v1.UpdateOrderRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string property_id = 1;
 * @return {string}
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.prototype.getPropertyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.services.properties_svc.v1.UpdateOrderRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.prototype.setPropertyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string prev_neighbor = 2;
 * @return {string}
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.prototype.getPrevNeighbor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.services.properties_svc.v1.UpdateOrderRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.prototype.setPrevNeighbor = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.services.properties_svc.v1.UpdateOrderRequest} returns this
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.prototype.clearPrevNeighbor = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.services.properties_svc.v1.UpdateOrderRequest.prototype.hasPrevNeighbor = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.services.properties_svc.v1.UpdateOrderResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.services.properties_svc.v1.UpdateOrderResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.services.properties_svc.v1.UpdateOrderResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.properties_svc.v1.UpdateOrderResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.services.properties_svc.v1.UpdateOrderResponse}
 */
proto.proto.services.properties_svc.v1.UpdateOrderResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.services.properties_svc.v1.UpdateOrderResponse;
  return proto.proto.services.properties_svc.v1.UpdateOrderResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.services.properties_svc.v1.UpdateOrderResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.services.properties_svc.v1.UpdateOrderResponse}
 */
proto.proto.services.properties_svc.v1.UpdateOrderResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.services.properties_svc.v1.UpdateOrderResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.services.properties_svc.v1.UpdateOrderResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.services.properties_svc.v1.UpdateOrderResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.services.properties_svc.v1.UpdateOrderResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.proto.services.properties_svc.v1);
