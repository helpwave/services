/**
 * @fileoverview gRPC-Web generated client stub for proto.services.impulse_svc.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: proto/services/impulse_svc/v1/impulse_svc.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.proto = {};
proto.proto.services = {};
proto.proto.services.impulse_svc = {};
proto.proto.services.impulse_svc.v1 = require('./impulse_svc_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.CreateUserRequest,
 *   !proto.proto.services.impulse_svc.v1.CreateUserResponse>}
 */
const methodDescriptor_ImpulseService_CreateUser = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.CreateUserRequest,
  proto.proto.services.impulse_svc.v1.CreateUserResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.CreateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.CreateUserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.CreateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.CreateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_CreateUser,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.CreateUserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.UpdateUserRequest,
 *   !proto.proto.services.impulse_svc.v1.UpdateUserResponse>}
 */
const methodDescriptor_ImpulseService_UpdateUser = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/UpdateUser',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.UpdateUserRequest,
  proto.proto.services.impulse_svc.v1.UpdateUserResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.UpdateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.UpdateUserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.UpdateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.UpdateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.UpdateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.updateUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_UpdateUser,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.UpdateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.UpdateUserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.updateUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_UpdateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.TrackChallengeRequest,
 *   !proto.proto.services.impulse_svc.v1.TrackChallengeResponse>}
 */
const methodDescriptor_ImpulseService_TrackChallenge = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/TrackChallenge',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.TrackChallengeRequest,
  proto.proto.services.impulse_svc.v1.TrackChallengeResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.TrackChallengeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.TrackChallengeResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.TrackChallengeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.TrackChallengeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.TrackChallengeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.trackChallenge =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/TrackChallenge',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_TrackChallenge,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.TrackChallengeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.TrackChallengeResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.trackChallenge =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/TrackChallenge',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_TrackChallenge);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.CreateDailyChallengeRequest,
 *   !proto.proto.services.impulse_svc.v1.CreateDailyChallengeResponse>}
 */
const methodDescriptor_ImpulseService_CreateDailyChallenge = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/CreateDailyChallenge',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.CreateDailyChallengeRequest,
  proto.proto.services.impulse_svc.v1.CreateDailyChallengeResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.CreateDailyChallengeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.CreateDailyChallengeResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.CreateDailyChallengeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.CreateDailyChallengeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.CreateDailyChallengeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.createDailyChallenge =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/CreateDailyChallenge',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_CreateDailyChallenge,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.CreateDailyChallengeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.CreateDailyChallengeResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.createDailyChallenge =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/CreateDailyChallenge',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_CreateDailyChallenge);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.CreateQuestChallengeRequest,
 *   !proto.proto.services.impulse_svc.v1.CreateQuestChallengeResponse>}
 */
const methodDescriptor_ImpulseService_CreateQuestChallenge = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/CreateQuestChallenge',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.CreateQuestChallengeRequest,
  proto.proto.services.impulse_svc.v1.CreateQuestChallengeResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.CreateQuestChallengeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.CreateQuestChallengeResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.CreateQuestChallengeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.CreateQuestChallengeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.CreateQuestChallengeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.createQuestChallenge =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/CreateQuestChallenge',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_CreateQuestChallenge,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.CreateQuestChallengeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.CreateQuestChallengeResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.createQuestChallenge =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/CreateQuestChallenge',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_CreateQuestChallenge);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.UpdateChallengeRequest,
 *   !proto.proto.services.impulse_svc.v1.UpdateChallengeResponse>}
 */
const methodDescriptor_ImpulseService_UpdateChallenge = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/UpdateChallenge',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.UpdateChallengeRequest,
  proto.proto.services.impulse_svc.v1.UpdateChallengeResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.UpdateChallengeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.UpdateChallengeResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.UpdateChallengeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.UpdateChallengeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.UpdateChallengeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.updateChallenge =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/UpdateChallenge',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_UpdateChallenge,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.UpdateChallengeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.UpdateChallengeResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.updateChallenge =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/UpdateChallenge',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_UpdateChallenge);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.GetChallengesRequest,
 *   !proto.proto.services.impulse_svc.v1.GetChallengesResponse>}
 */
const methodDescriptor_ImpulseService_GetChallenges = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/GetChallenges',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.GetChallengesRequest,
  proto.proto.services.impulse_svc.v1.GetChallengesResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.GetChallengesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.GetChallengesResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetChallengesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.GetChallengesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.GetChallengesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.getChallenges =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetChallenges',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetChallenges,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetChallengesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.GetChallengesResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.getChallenges =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetChallenges',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetChallenges);
};


module.exports = proto.proto.services.impulse_svc.v1;

