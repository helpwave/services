/**
 * @fileoverview gRPC-Web generated client stub for proto.services.impulse_svc.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc              v0.0.0
// source: proto/services/impulse_svc/v1/impulse_svc.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.proto = {};
proto.proto.services = {};
proto.proto.services.impulse_svc = {};
proto.proto.services.impulse_svc.v1 = require('./impulse_svc_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.CreateUserRequest,
 *   !proto.proto.services.impulse_svc.v1.CreateUserResponse>}
 */
const methodDescriptor_ImpulseService_CreateUser = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.CreateUserRequest,
  proto.proto.services.impulse_svc.v1.CreateUserResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.CreateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.CreateUserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.CreateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.CreateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_CreateUser,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.CreateUserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.UpdateUserRequest,
 *   !proto.proto.services.impulse_svc.v1.UpdateUserResponse>}
 */
const methodDescriptor_ImpulseService_UpdateUser = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/UpdateUser',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.UpdateUserRequest,
  proto.proto.services.impulse_svc.v1.UpdateUserResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.UpdateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.UpdateUserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.UpdateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.UpdateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.UpdateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.updateUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_UpdateUser,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.UpdateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.UpdateUserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.updateUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_UpdateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.TrackChallengeRequest,
 *   !proto.proto.services.impulse_svc.v1.TrackChallengeResponse>}
 */
const methodDescriptor_ImpulseService_TrackChallenge = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/TrackChallenge',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.TrackChallengeRequest,
  proto.proto.services.impulse_svc.v1.TrackChallengeResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.TrackChallengeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.TrackChallengeResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.TrackChallengeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.TrackChallengeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.TrackChallengeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.trackChallenge =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/TrackChallenge',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_TrackChallenge,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.TrackChallengeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.TrackChallengeResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.trackChallenge =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/TrackChallenge',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_TrackChallenge);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.GetActiveChallengesRequest,
 *   !proto.proto.services.impulse_svc.v1.GetActiveChallengesResponse>}
 */
const methodDescriptor_ImpulseService_GetActiveChallenges = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/GetActiveChallenges',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.GetActiveChallengesRequest,
  proto.proto.services.impulse_svc.v1.GetActiveChallengesResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.GetActiveChallengesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.GetActiveChallengesResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetActiveChallengesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.GetActiveChallengesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.GetActiveChallengesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.getActiveChallenges =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetActiveChallenges',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetActiveChallenges,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetActiveChallengesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.GetActiveChallengesResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.getActiveChallenges =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetActiveChallenges',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetActiveChallenges);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.GetScoreRequest,
 *   !proto.proto.services.impulse_svc.v1.GetScoreResponse>}
 */
const methodDescriptor_ImpulseService_GetScore = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/GetScore',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.GetScoreRequest,
  proto.proto.services.impulse_svc.v1.GetScoreResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.GetScoreRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.GetScoreResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetScoreRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.GetScoreResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.GetScoreResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.getScore =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetScore',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetScore,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetScoreRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.GetScoreResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.getScore =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetScore',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetScore);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.GetRewardsRequest,
 *   !proto.proto.services.impulse_svc.v1.GetRewardsResponse>}
 */
const methodDescriptor_ImpulseService_GetRewards = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/GetRewards',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.GetRewardsRequest,
  proto.proto.services.impulse_svc.v1.GetRewardsResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.GetRewardsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.GetRewardsResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetRewardsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.GetRewardsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.GetRewardsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.getRewards =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetRewards',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetRewards,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetRewardsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.GetRewardsResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.getRewards =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetRewards',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetRewards);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.GetAllRewardsRequest,
 *   !proto.proto.services.impulse_svc.v1.GetAllRewardsResponse>}
 */
const methodDescriptor_ImpulseService_GetAllRewards = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/GetAllRewards',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.GetAllRewardsRequest,
  proto.proto.services.impulse_svc.v1.GetAllRewardsResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.GetAllRewardsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.GetAllRewardsResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetAllRewardsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.GetAllRewardsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.GetAllRewardsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.getAllRewards =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetAllRewards',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetAllRewards,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetAllRewardsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.GetAllRewardsResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.getAllRewards =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetAllRewards',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetAllRewards);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.GetAllTeamsRequest,
 *   !proto.proto.services.impulse_svc.v1.GetAllTeamsResponse>}
 */
const methodDescriptor_ImpulseService_GetAllTeams = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/GetAllTeams',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.GetAllTeamsRequest,
  proto.proto.services.impulse_svc.v1.GetAllTeamsResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.GetAllTeamsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.GetAllTeamsResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetAllTeamsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.GetAllTeamsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.GetAllTeamsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.getAllTeams =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetAllTeams',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetAllTeams,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.GetAllTeamsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.GetAllTeamsResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.getAllTeams =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/GetAllTeams',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_GetAllTeams);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.StatsForTeamByUserRequest,
 *   !proto.proto.services.impulse_svc.v1.StatsForTeamByUserResponse>}
 */
const methodDescriptor_ImpulseService_StatsForTeamByUser = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/StatsForTeamByUser',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.StatsForTeamByUserRequest,
  proto.proto.services.impulse_svc.v1.StatsForTeamByUserResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.StatsForTeamByUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.StatsForTeamByUserResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.StatsForTeamByUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.StatsForTeamByUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.StatsForTeamByUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.statsForTeamByUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/StatsForTeamByUser',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_StatsForTeamByUser,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.StatsForTeamByUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.StatsForTeamByUserResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.statsForTeamByUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/StatsForTeamByUser',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_StatsForTeamByUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.services.impulse_svc.v1.VerificationRequest,
 *   !proto.proto.services.impulse_svc.v1.VerificationResponse>}
 */
const methodDescriptor_ImpulseService_Verification = new grpc.web.MethodDescriptor(
  '/proto.services.impulse_svc.v1.ImpulseService/Verification',
  grpc.web.MethodType.UNARY,
  proto.proto.services.impulse_svc.v1.VerificationRequest,
  proto.proto.services.impulse_svc.v1.VerificationResponse,
  /**
   * @param {!proto.proto.services.impulse_svc.v1.VerificationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.services.impulse_svc.v1.VerificationResponse.deserializeBinary
);


/**
 * @param {!proto.proto.services.impulse_svc.v1.VerificationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.services.impulse_svc.v1.VerificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.services.impulse_svc.v1.VerificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.services.impulse_svc.v1.ImpulseServiceClient.prototype.verification =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/Verification',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_Verification,
      callback);
};


/**
 * @param {!proto.proto.services.impulse_svc.v1.VerificationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.services.impulse_svc.v1.VerificationResponse>}
 *     Promise that resolves to the response
 */
proto.proto.services.impulse_svc.v1.ImpulseServicePromiseClient.prototype.verification =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.services.impulse_svc.v1.ImpulseService/Verification',
      request,
      metadata || {},
      methodDescriptor_ImpulseService_Verification);
};


module.exports = proto.proto.services.impulse_svc.v1;

