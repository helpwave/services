/**
 * @fileoverview gRPC-Web generated client stub for services.tasks_svc.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: services/tasks_svc/v1/task_svc.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var services_tasks_svc_v1_types_pb = require('../../../services/tasks_svc/v1/types_pb.js')

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var libs_common_v1_conflict_pb = require('../../../libs/common/v1/conflict_pb.js')
const proto = {};
proto.services = {};
proto.services.tasks_svc = {};
proto.services.tasks_svc.v1 = require('./task_svc_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.tasks_svc.v1.TaskServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.CreateTaskRequest,
 *   !proto.services.tasks_svc.v1.CreateTaskResponse>}
 */
const methodDescriptor_TaskService_CreateTask = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/CreateTask',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.CreateTaskRequest,
  proto.services.tasks_svc.v1.CreateTaskResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.CreateTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.CreateTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.CreateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.CreateTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.CreateTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.createTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/CreateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_CreateTask,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.CreateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.CreateTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.createTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/CreateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_CreateTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.UpdateTaskRequest,
 *   !proto.services.tasks_svc.v1.UpdateTaskResponse>}
 */
const methodDescriptor_TaskService_UpdateTask = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/UpdateTask',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.UpdateTaskRequest,
  proto.services.tasks_svc.v1.UpdateTaskResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.UpdateTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.UpdateTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.UpdateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.UpdateTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.UpdateTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.updateTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/UpdateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateTask,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.UpdateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.UpdateTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.updateTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/UpdateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.GetTaskRequest,
 *   !proto.services.tasks_svc.v1.GetTaskResponse>}
 */
const methodDescriptor_TaskService_GetTask = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/GetTask',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.GetTaskRequest,
  proto.services.tasks_svc.v1.GetTaskResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.GetTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.GetTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.GetTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.GetTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.GetTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.getTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/GetTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTask,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.GetTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.GetTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.getTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/GetTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.GetTasksByPatientRequest,
 *   !proto.services.tasks_svc.v1.GetTasksByPatientResponse>}
 */
const methodDescriptor_TaskService_GetTasksByPatient = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/GetTasksByPatient',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.GetTasksByPatientRequest,
  proto.services.tasks_svc.v1.GetTasksByPatientResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.GetTasksByPatientRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.GetTasksByPatientResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.GetTasksByPatientRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.GetTasksByPatientResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.GetTasksByPatientResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.getTasksByPatient =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/GetTasksByPatient',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTasksByPatient,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.GetTasksByPatientRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.GetTasksByPatientResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.getTasksByPatient =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/GetTasksByPatient',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTasksByPatient);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusRequest,
 *   !proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusResponse>}
 */
const methodDescriptor_TaskService_GetTasksByPatientSortedByStatus = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/GetTasksByPatientSortedByStatus',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusRequest,
  proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.getTasksByPatientSortedByStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/GetTasksByPatientSortedByStatus',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTasksByPatientSortedByStatus,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.GetTasksByPatientSortedByStatusResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.getTasksByPatientSortedByStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/GetTasksByPatientSortedByStatus',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTasksByPatientSortedByStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.GetAssignedTasksRequest,
 *   !proto.services.tasks_svc.v1.GetAssignedTasksResponse>}
 */
const methodDescriptor_TaskService_GetAssignedTasks = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/GetAssignedTasks',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.GetAssignedTasksRequest,
  proto.services.tasks_svc.v1.GetAssignedTasksResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.GetAssignedTasksRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.GetAssignedTasksResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.GetAssignedTasksRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.GetAssignedTasksResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.GetAssignedTasksResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.getAssignedTasks =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/GetAssignedTasks',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetAssignedTasks,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.GetAssignedTasksRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.GetAssignedTasksResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.getAssignedTasks =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/GetAssignedTasks',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetAssignedTasks);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.AssignTaskRequest,
 *   !proto.services.tasks_svc.v1.AssignTaskResponse>}
 */
const methodDescriptor_TaskService_AssignTask = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/AssignTask',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.AssignTaskRequest,
  proto.services.tasks_svc.v1.AssignTaskResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.AssignTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.AssignTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.AssignTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.AssignTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.AssignTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.assignTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/AssignTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_AssignTask,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.AssignTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.AssignTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.assignTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/AssignTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_AssignTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.UnassignTaskRequest,
 *   !proto.services.tasks_svc.v1.UnassignTaskResponse>}
 */
const methodDescriptor_TaskService_UnassignTask = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/UnassignTask',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.UnassignTaskRequest,
  proto.services.tasks_svc.v1.UnassignTaskResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.UnassignTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.UnassignTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.UnassignTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.UnassignTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.UnassignTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.unassignTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/UnassignTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UnassignTask,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.UnassignTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.UnassignTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.unassignTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/UnassignTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UnassignTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.CreateSubtaskRequest,
 *   !proto.services.tasks_svc.v1.CreateSubtaskResponse>}
 */
const methodDescriptor_TaskService_CreateSubtask = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/CreateSubtask',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.CreateSubtaskRequest,
  proto.services.tasks_svc.v1.CreateSubtaskResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.CreateSubtaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.CreateSubtaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.CreateSubtaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.CreateSubtaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.CreateSubtaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.createSubtask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/CreateSubtask',
      request,
      metadata || {},
      methodDescriptor_TaskService_CreateSubtask,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.CreateSubtaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.CreateSubtaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.createSubtask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/CreateSubtask',
      request,
      metadata || {},
      methodDescriptor_TaskService_CreateSubtask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.UpdateSubtaskRequest,
 *   !proto.services.tasks_svc.v1.UpdateSubtaskResponse>}
 */
const methodDescriptor_TaskService_UpdateSubtask = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/UpdateSubtask',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.UpdateSubtaskRequest,
  proto.services.tasks_svc.v1.UpdateSubtaskResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.UpdateSubtaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.UpdateSubtaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.UpdateSubtaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.UpdateSubtaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.UpdateSubtaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.updateSubtask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/UpdateSubtask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateSubtask,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.UpdateSubtaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.UpdateSubtaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.updateSubtask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/UpdateSubtask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateSubtask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.DeleteSubtaskRequest,
 *   !proto.services.tasks_svc.v1.DeleteSubtaskResponse>}
 */
const methodDescriptor_TaskService_DeleteSubtask = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/DeleteSubtask',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.DeleteSubtaskRequest,
  proto.services.tasks_svc.v1.DeleteSubtaskResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.DeleteSubtaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.DeleteSubtaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.DeleteSubtaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.DeleteSubtaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.DeleteSubtaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.deleteSubtask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/DeleteSubtask',
      request,
      metadata || {},
      methodDescriptor_TaskService_DeleteSubtask,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.DeleteSubtaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.DeleteSubtaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.deleteSubtask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/DeleteSubtask',
      request,
      metadata || {},
      methodDescriptor_TaskService_DeleteSubtask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.RemoveTaskDueDateRequest,
 *   !proto.services.tasks_svc.v1.RemoveTaskDueDateResponse>}
 */
const methodDescriptor_TaskService_RemoveTaskDueDate = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/RemoveTaskDueDate',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.RemoveTaskDueDateRequest,
  proto.services.tasks_svc.v1.RemoveTaskDueDateResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.RemoveTaskDueDateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.RemoveTaskDueDateResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.RemoveTaskDueDateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.RemoveTaskDueDateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.RemoveTaskDueDateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.removeTaskDueDate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/RemoveTaskDueDate',
      request,
      metadata || {},
      methodDescriptor_TaskService_RemoveTaskDueDate,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.RemoveTaskDueDateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.RemoveTaskDueDateResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.removeTaskDueDate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/RemoveTaskDueDate',
      request,
      metadata || {},
      methodDescriptor_TaskService_RemoveTaskDueDate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.tasks_svc.v1.DeleteTaskRequest,
 *   !proto.services.tasks_svc.v1.DeleteTaskResponse>}
 */
const methodDescriptor_TaskService_DeleteTask = new grpc.web.MethodDescriptor(
  '/services.tasks_svc.v1.TaskService/DeleteTask',
  grpc.web.MethodType.UNARY,
  proto.services.tasks_svc.v1.DeleteTaskRequest,
  proto.services.tasks_svc.v1.DeleteTaskResponse,
  /**
   * @param {!proto.services.tasks_svc.v1.DeleteTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.tasks_svc.v1.DeleteTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.tasks_svc.v1.DeleteTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.tasks_svc.v1.DeleteTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.tasks_svc.v1.DeleteTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.tasks_svc.v1.TaskServiceClient.prototype.deleteTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/DeleteTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_DeleteTask,
      callback);
};


/**
 * @param {!proto.services.tasks_svc.v1.DeleteTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.tasks_svc.v1.DeleteTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.tasks_svc.v1.TaskServicePromiseClient.prototype.deleteTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.tasks_svc.v1.TaskService/DeleteTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_DeleteTask);
};


module.exports = proto.services.tasks_svc.v1;

