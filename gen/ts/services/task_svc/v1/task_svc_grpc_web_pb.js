/**
 * @fileoverview gRPC-Web generated client stub for services.task_svc.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: services/task_svc/v1/task_svc.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.services = {};
proto.services.task_svc = {};
proto.services.task_svc.v1 = require('./task_svc_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.task_svc.v1.TaskServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.services.task_svc.v1.TaskServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.CreateTaskRequest,
 *   !proto.services.task_svc.v1.CreateTaskResponse>}
 */
const methodDescriptor_TaskService_CreateTask = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/CreateTask',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.CreateTaskRequest,
  proto.services.task_svc.v1.CreateTaskResponse,
  /**
   * @param {!proto.services.task_svc.v1.CreateTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.CreateTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.CreateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.CreateTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.CreateTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.createTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/CreateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_CreateTask,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.CreateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.CreateTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.createTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/CreateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_CreateTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.GetTaskRequest,
 *   !proto.services.task_svc.v1.GetTaskResponse>}
 */
const methodDescriptor_TaskService_GetTask = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/GetTask',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.GetTaskRequest,
  proto.services.task_svc.v1.GetTaskResponse,
  /**
   * @param {!proto.services.task_svc.v1.GetTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.GetTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.GetTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.GetTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.GetTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.getTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/GetTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTask,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.GetTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.GetTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.getTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/GetTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.GetTasksByPatientRequest,
 *   !proto.services.task_svc.v1.GetTasksByPatientResponse>}
 */
const methodDescriptor_TaskService_GetTasksByPatient = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/GetTasksByPatient',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.GetTasksByPatientRequest,
  proto.services.task_svc.v1.GetTasksByPatientResponse,
  /**
   * @param {!proto.services.task_svc.v1.GetTasksByPatientRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.GetTasksByPatientResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.GetTasksByPatientRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.GetTasksByPatientResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.GetTasksByPatientResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.getTasksByPatient =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/GetTasksByPatient',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTasksByPatient,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.GetTasksByPatientRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.GetTasksByPatientResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.getTasksByPatient =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/GetTasksByPatient',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTasksByPatient);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.GetTasksByPatientSortedByStatusRequest,
 *   !proto.services.task_svc.v1.GetTasksByPatientSortedByStatusResponse>}
 */
const methodDescriptor_TaskService_GetTasksByPatientSortedByStatus = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/GetTasksByPatientSortedByStatus',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.GetTasksByPatientSortedByStatusRequest,
  proto.services.task_svc.v1.GetTasksByPatientSortedByStatusResponse,
  /**
   * @param {!proto.services.task_svc.v1.GetTasksByPatientSortedByStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.GetTasksByPatientSortedByStatusResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.GetTasksByPatientSortedByStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.GetTasksByPatientSortedByStatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.GetTasksByPatientSortedByStatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.getTasksByPatientSortedByStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/GetTasksByPatientSortedByStatus',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTasksByPatientSortedByStatus,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.GetTasksByPatientSortedByStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.GetTasksByPatientSortedByStatusResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.getTasksByPatientSortedByStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/GetTasksByPatientSortedByStatus',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetTasksByPatientSortedByStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.GetAssignedTasksRequest,
 *   !proto.services.task_svc.v1.GetAssignedTasksResponse>}
 */
const methodDescriptor_TaskService_GetAssignedTasks = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/GetAssignedTasks',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.GetAssignedTasksRequest,
  proto.services.task_svc.v1.GetAssignedTasksResponse,
  /**
   * @param {!proto.services.task_svc.v1.GetAssignedTasksRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.GetAssignedTasksResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.GetAssignedTasksRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.GetAssignedTasksResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.GetAssignedTasksResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.getAssignedTasks =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/GetAssignedTasks',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetAssignedTasks,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.GetAssignedTasksRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.GetAssignedTasksResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.getAssignedTasks =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/GetAssignedTasks',
      request,
      metadata || {},
      methodDescriptor_TaskService_GetAssignedTasks);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.UpdateTaskRequest,
 *   !proto.services.task_svc.v1.UpdateTaskResponse>}
 */
const methodDescriptor_TaskService_UpdateTask = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/UpdateTask',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.UpdateTaskRequest,
  proto.services.task_svc.v1.UpdateTaskResponse,
  /**
   * @param {!proto.services.task_svc.v1.UpdateTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.UpdateTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.UpdateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.UpdateTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.UpdateTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.updateTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/UpdateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateTask,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.UpdateTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.UpdateTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.updateTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/UpdateTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.AddSubTaskRequest,
 *   !proto.services.task_svc.v1.AddSubTaskResponse>}
 */
const methodDescriptor_TaskService_AddSubTask = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/AddSubTask',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.AddSubTaskRequest,
  proto.services.task_svc.v1.AddSubTaskResponse,
  /**
   * @param {!proto.services.task_svc.v1.AddSubTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.AddSubTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.AddSubTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.AddSubTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.AddSubTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.addSubTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/AddSubTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_AddSubTask,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.AddSubTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.AddSubTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.addSubTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/AddSubTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_AddSubTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.RemoveSubTaskRequest,
 *   !proto.services.task_svc.v1.RemoveSubTaskResponse>}
 */
const methodDescriptor_TaskService_RemoveSubTask = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/RemoveSubTask',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.RemoveSubTaskRequest,
  proto.services.task_svc.v1.RemoveSubTaskResponse,
  /**
   * @param {!proto.services.task_svc.v1.RemoveSubTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.RemoveSubTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.RemoveSubTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.RemoveSubTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.RemoveSubTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.removeSubTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/RemoveSubTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_RemoveSubTask,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.RemoveSubTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.RemoveSubTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.removeSubTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/RemoveSubTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_RemoveSubTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.UpdateSubTaskRequest,
 *   !proto.services.task_svc.v1.UpdateSubTaskResponse>}
 */
const methodDescriptor_TaskService_UpdateSubTask = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/UpdateSubTask',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.UpdateSubTaskRequest,
  proto.services.task_svc.v1.UpdateSubTaskResponse,
  /**
   * @param {!proto.services.task_svc.v1.UpdateSubTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.UpdateSubTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.UpdateSubTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.UpdateSubTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.UpdateSubTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.updateSubTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/UpdateSubTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateSubTask,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.UpdateSubTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.UpdateSubTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.updateSubTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/UpdateSubTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UpdateSubTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.SubTaskToToDoRequest,
 *   !proto.services.task_svc.v1.SubTaskToToDoResponse>}
 */
const methodDescriptor_TaskService_SubTaskToToDo = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/SubTaskToToDo',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.SubTaskToToDoRequest,
  proto.services.task_svc.v1.SubTaskToToDoResponse,
  /**
   * @param {!proto.services.task_svc.v1.SubTaskToToDoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.SubTaskToToDoResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.SubTaskToToDoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.SubTaskToToDoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.SubTaskToToDoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.subTaskToToDo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/SubTaskToToDo',
      request,
      metadata || {},
      methodDescriptor_TaskService_SubTaskToToDo,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.SubTaskToToDoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.SubTaskToToDoResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.subTaskToToDo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/SubTaskToToDo',
      request,
      metadata || {},
      methodDescriptor_TaskService_SubTaskToToDo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.SubTaskToDoneRequest,
 *   !proto.services.task_svc.v1.SubTaskToDoneResponse>}
 */
const methodDescriptor_TaskService_SubTaskToDone = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/SubTaskToDone',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.SubTaskToDoneRequest,
  proto.services.task_svc.v1.SubTaskToDoneResponse,
  /**
   * @param {!proto.services.task_svc.v1.SubTaskToDoneRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.SubTaskToDoneResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.SubTaskToDoneRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.SubTaskToDoneResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.SubTaskToDoneResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.subTaskToDone =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/SubTaskToDone',
      request,
      metadata || {},
      methodDescriptor_TaskService_SubTaskToDone,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.SubTaskToDoneRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.SubTaskToDoneResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.subTaskToDone =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/SubTaskToDone',
      request,
      metadata || {},
      methodDescriptor_TaskService_SubTaskToDone);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.TaskToToDoRequest,
 *   !proto.services.task_svc.v1.TaskToToDoResponse>}
 */
const methodDescriptor_TaskService_TaskToToDo = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/TaskToToDo',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.TaskToToDoRequest,
  proto.services.task_svc.v1.TaskToToDoResponse,
  /**
   * @param {!proto.services.task_svc.v1.TaskToToDoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.TaskToToDoResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.TaskToToDoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.TaskToToDoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.TaskToToDoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.taskToToDo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/TaskToToDo',
      request,
      metadata || {},
      methodDescriptor_TaskService_TaskToToDo,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.TaskToToDoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.TaskToToDoResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.taskToToDo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/TaskToToDo',
      request,
      metadata || {},
      methodDescriptor_TaskService_TaskToToDo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.TaskToInProgressRequest,
 *   !proto.services.task_svc.v1.TaskToInProgressResponse>}
 */
const methodDescriptor_TaskService_TaskToInProgress = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/TaskToInProgress',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.TaskToInProgressRequest,
  proto.services.task_svc.v1.TaskToInProgressResponse,
  /**
   * @param {!proto.services.task_svc.v1.TaskToInProgressRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.TaskToInProgressResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.TaskToInProgressRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.TaskToInProgressResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.TaskToInProgressResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.taskToInProgress =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/TaskToInProgress',
      request,
      metadata || {},
      methodDescriptor_TaskService_TaskToInProgress,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.TaskToInProgressRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.TaskToInProgressResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.taskToInProgress =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/TaskToInProgress',
      request,
      metadata || {},
      methodDescriptor_TaskService_TaskToInProgress);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.TaskToDoneRequest,
 *   !proto.services.task_svc.v1.TaskToDoneResponse>}
 */
const methodDescriptor_TaskService_TaskToDone = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/TaskToDone',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.TaskToDoneRequest,
  proto.services.task_svc.v1.TaskToDoneResponse,
  /**
   * @param {!proto.services.task_svc.v1.TaskToDoneRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.TaskToDoneResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.TaskToDoneRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.TaskToDoneResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.TaskToDoneResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.taskToDone =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/TaskToDone',
      request,
      metadata || {},
      methodDescriptor_TaskService_TaskToDone,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.TaskToDoneRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.TaskToDoneResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.taskToDone =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/TaskToDone',
      request,
      metadata || {},
      methodDescriptor_TaskService_TaskToDone);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.AssignTaskToUserRequest,
 *   !proto.services.task_svc.v1.AssignTaskToUserResponse>}
 */
const methodDescriptor_TaskService_AssignTaskToUser = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/AssignTaskToUser',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.AssignTaskToUserRequest,
  proto.services.task_svc.v1.AssignTaskToUserResponse,
  /**
   * @param {!proto.services.task_svc.v1.AssignTaskToUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.AssignTaskToUserResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.AssignTaskToUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.AssignTaskToUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.AssignTaskToUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.assignTaskToUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/AssignTaskToUser',
      request,
      metadata || {},
      methodDescriptor_TaskService_AssignTaskToUser,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.AssignTaskToUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.AssignTaskToUserResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.assignTaskToUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/AssignTaskToUser',
      request,
      metadata || {},
      methodDescriptor_TaskService_AssignTaskToUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.UnassignTaskFromUserRequest,
 *   !proto.services.task_svc.v1.UnassignTaskFromUserResponse>}
 */
const methodDescriptor_TaskService_UnassignTaskFromUser = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/UnassignTaskFromUser',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.UnassignTaskFromUserRequest,
  proto.services.task_svc.v1.UnassignTaskFromUserResponse,
  /**
   * @param {!proto.services.task_svc.v1.UnassignTaskFromUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.UnassignTaskFromUserResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.UnassignTaskFromUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.UnassignTaskFromUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.UnassignTaskFromUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.unassignTaskFromUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/UnassignTaskFromUser',
      request,
      metadata || {},
      methodDescriptor_TaskService_UnassignTaskFromUser,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.UnassignTaskFromUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.UnassignTaskFromUserResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.unassignTaskFromUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/UnassignTaskFromUser',
      request,
      metadata || {},
      methodDescriptor_TaskService_UnassignTaskFromUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.PublishTaskRequest,
 *   !proto.services.task_svc.v1.PublishTaskResponse>}
 */
const methodDescriptor_TaskService_PublishTask = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/PublishTask',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.PublishTaskRequest,
  proto.services.task_svc.v1.PublishTaskResponse,
  /**
   * @param {!proto.services.task_svc.v1.PublishTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.PublishTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.PublishTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.PublishTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.PublishTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.publishTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/PublishTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_PublishTask,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.PublishTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.PublishTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.publishTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/PublishTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_PublishTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.UnpublishTaskRequest,
 *   !proto.services.task_svc.v1.UnpublishTaskResponse>}
 */
const methodDescriptor_TaskService_UnpublishTask = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/UnpublishTask',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.UnpublishTaskRequest,
  proto.services.task_svc.v1.UnpublishTaskResponse,
  /**
   * @param {!proto.services.task_svc.v1.UnpublishTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.UnpublishTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.UnpublishTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.UnpublishTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.UnpublishTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.unpublishTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/UnpublishTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UnpublishTask,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.UnpublishTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.UnpublishTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.unpublishTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/UnpublishTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_UnpublishTask);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.services.task_svc.v1.DeleteTaskRequest,
 *   !proto.services.task_svc.v1.DeleteTaskResponse>}
 */
const methodDescriptor_TaskService_DeleteTask = new grpc.web.MethodDescriptor(
  '/services.task_svc.v1.TaskService/DeleteTask',
  grpc.web.MethodType.UNARY,
  proto.services.task_svc.v1.DeleteTaskRequest,
  proto.services.task_svc.v1.DeleteTaskResponse,
  /**
   * @param {!proto.services.task_svc.v1.DeleteTaskRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.services.task_svc.v1.DeleteTaskResponse.deserializeBinary
);


/**
 * @param {!proto.services.task_svc.v1.DeleteTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.services.task_svc.v1.DeleteTaskResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.services.task_svc.v1.DeleteTaskResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.services.task_svc.v1.TaskServiceClient.prototype.deleteTask =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/DeleteTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_DeleteTask,
      callback);
};


/**
 * @param {!proto.services.task_svc.v1.DeleteTaskRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.services.task_svc.v1.DeleteTaskResponse>}
 *     Promise that resolves to the response
 */
proto.services.task_svc.v1.TaskServicePromiseClient.prototype.deleteTask =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/services.task_svc.v1.TaskService/DeleteTask',
      request,
      metadata || {},
      methodDescriptor_TaskService_DeleteTask);
};


module.exports = proto.services.task_svc.v1;

