// source: libs/events/v1/task_template_events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var libs_events_v1_options_pb = require('../../../libs/events/v1/options_pb.js');
goog.object.extend(proto, libs_events_v1_options_pb);
goog.exportSymbol('proto.libs.events.v1.TaskTemplateCreatedEvent', null, global);
goog.exportSymbol('proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask', null, global);
goog.exportSymbol('proto.libs.events.v1.TaskTemplateDeletedEvent', null, global);
goog.exportSymbol('proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent', null, global);
goog.exportSymbol('proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent', null, global);
goog.exportSymbol('proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent', null, global);
goog.exportSymbol('proto.libs.events.v1.TaskTemplateUpdatedEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libs.events.v1.TaskTemplateCreatedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.libs.events.v1.TaskTemplateCreatedEvent.repeatedFields_, null);
};
goog.inherits(proto.libs.events.v1.TaskTemplateCreatedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libs.events.v1.TaskTemplateCreatedEvent.displayName = 'proto.libs.events.v1.TaskTemplateCreatedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.displayName = 'proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libs.events.v1.TaskTemplateUpdatedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libs.events.v1.TaskTemplateUpdatedEvent.displayName = 'proto.libs.events.v1.TaskTemplateUpdatedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libs.events.v1.TaskTemplateDeletedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libs.events.v1.TaskTemplateDeletedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libs.events.v1.TaskTemplateDeletedEvent.displayName = 'proto.libs.events.v1.TaskTemplateDeletedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.displayName = 'proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.displayName = 'proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.displayName = 'proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.libs.events.v1.TaskTemplateCreatedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libs.events.v1.TaskTemplateCreatedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subtasksList: jspb.Message.toObjectList(msg.getSubtasksList(),
    proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libs.events.v1.TaskTemplateCreatedEvent;
  return proto.libs.events.v1.TaskTemplateCreatedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libs.events.v1.TaskTemplateCreatedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask;
      reader.readMessage(value,proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.deserializeBinaryFromReader);
      msg.addSubtasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libs.events.v1.TaskTemplateCreatedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libs.events.v1.TaskTemplateCreatedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubtasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.prototype.toObject = function(opt_includeInstance) {
  return proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask;
  return proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask} returns this
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated SubTask subtasks = 4;
 * @return {!Array<!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask>}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.getSubtasksList = function() {
  return /** @type{!Array<!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask, 4));
};


/**
 * @param {!Array<!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask>} value
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent} returns this
*/
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.setSubtasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask}
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.addSubtasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.libs.events.v1.TaskTemplateCreatedEvent.SubTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.libs.events.v1.TaskTemplateCreatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateCreatedEvent.prototype.clearSubtasksList = function() {
  return this.setSubtasksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.libs.events.v1.TaskTemplateUpdatedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libs.events.v1.TaskTemplateUpdatedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libs.events.v1.TaskTemplateUpdatedEvent}
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libs.events.v1.TaskTemplateUpdatedEvent;
  return proto.libs.events.v1.TaskTemplateUpdatedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libs.events.v1.TaskTemplateUpdatedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libs.events.v1.TaskTemplateUpdatedEvent}
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libs.events.v1.TaskTemplateUpdatedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libs.events.v1.TaskTemplateUpdatedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateUpdatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateUpdatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateUpdatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateUpdatedEvent.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libs.events.v1.TaskTemplateDeletedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.libs.events.v1.TaskTemplateDeletedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libs.events.v1.TaskTemplateDeletedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateDeletedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libs.events.v1.TaskTemplateDeletedEvent}
 */
proto.libs.events.v1.TaskTemplateDeletedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libs.events.v1.TaskTemplateDeletedEvent;
  return proto.libs.events.v1.TaskTemplateDeletedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libs.events.v1.TaskTemplateDeletedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libs.events.v1.TaskTemplateDeletedEvent}
 */
proto.libs.events.v1.TaskTemplateDeletedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libs.events.v1.TaskTemplateDeletedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libs.events.v1.TaskTemplateDeletedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libs.events.v1.TaskTemplateDeletedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateDeletedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateDeletedEvent.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateDeletedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateDeletedEvent.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskTemplateId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subTaskId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent}
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent;
  return proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent}
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskTemplateId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubTaskId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskTemplateId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubTaskId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string task_template_id = 1;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.prototype.getTaskTemplateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.prototype.setTaskTemplateId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sub_task_id = 2;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.prototype.getSubTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.prototype.setSubTaskId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateSubTaskCreatedEvent.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskTemplateId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subTaskId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent}
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent;
  return proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent}
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskTemplateId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubTaskId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskTemplateId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubTaskId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string task_template_id = 1;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.prototype.getTaskTemplateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.prototype.setTaskTemplateId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sub_task_id = 2;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.prototype.getSubTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.prototype.setSubTaskId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateSubTaskUpdatedEvent.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskTemplateId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subTaskId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent}
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent;
  return proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent}
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskTemplateId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubTaskId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskTemplateId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubTaskId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string task_template_id = 1;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.prototype.getTaskTemplateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.prototype.setTaskTemplateId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sub_task_id = 2;
 * @return {string}
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.prototype.getSubTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent} returns this
 */
proto.libs.events.v1.TaskTemplateSubTaskDeletedEvent.prototype.setSubTaskId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.libs.events.v1);
