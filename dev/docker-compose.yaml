services:

  postgres:
    image: postgres:15.6
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tasks-svc -q"]
      interval: 10s
      timeout: 2s
      retries: 5

  eventstore:
    image: eventstore/eventstore:23.10.2-jammy
    restart: unless-stopped
    environment:
      EVENTSTORE_TELEMETRY_OPTOUT: "true"
      EVENTSTORE_LOG_LEVEL: "Warning"
      EVENTSTORE_INSECURE: "true"
      EVENTSTORE_RUN_PROJECTIONS: "All"
      EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP: "true"
    ports:
      - "2113:2113"

  redis:
    image: redis:6
    restart: unless-stopped
    ports:
      - "6379:6379"

  jaeger:
    image: jaegertracing/all-in-one:1.60
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686" # api and UI
      - "4317:4317" # OTLP (grpc)

  # dapr by default uses mDNS for service discovery,
  # unfortunately multicast IP and docker networks don't play nice together,
  # so we use consul for service discovery
  consul:
    image: consul:1.15.4
    restart: unless-stopped
    command: "agent -dev -client 0.0.0.0 -log-level error"

  apisix:
    build:
      context: ..
      dockerfile: Dockerfile.apisix
    restart: unless-stopped
    depends_on:
      - services
    volumes:
      - ./apisix_config.yaml:/usr/local/apisix/conf/config.yaml:ro
      - ../apisix/apisix.yaml:/usr/local/apisix/conf/apisix.yaml:ro
    environment:
      NO_DAPR: true
    ports:
      - "9080:9080"

  # dapr sidecar for apisix
  apisix-dapr:
    image: "daprio/daprd:1.14.1"
    restart: unless-stopped
    depends_on:
      - apisix
    volumes:
      - ./dapr.yaml:/dapr.yaml:ro
    command: [
      "./daprd",
      "--app-id", "gateway",
      "--dapr-http-read-buffer-size", "8",
      "--config", "/dapr.yaml",
      "--log-level", "debug",
      "--app-port", "9080",
      "--metrics-port", "9099",
      "--dapr-internal-grpc-port", "35001"
    ]
    network_mode: "service:apisix"

  # services compiles and runs all services using dapr_run.yaml
  # also runs initial migrations for all services
  services:
    build:
      context: ../images/dev-go-custom
      args:
        # renovate: dev-tag
        TAG: '15'
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    volumes:
      # we currently don't mount (i.e. persist) the go module cache
      # this increases consistency in builds and dependencies, in trade for increased initial startup time

      # mounts the whole repo
      - ../:/helpwave

      # shared go cache with devcontainer
      - gomodcache:/go/pkg # $GOMODCACHE
      - gocache:/home/helpwave/.cache/go-build # $GOCACHE

    working_dir: /helpwave
    user: "helpwave"
    depends_on:
      postgres:
        condition: service_healthy
      consul:
        condition: service_started
    environment:
      SECRETSTORE_REDIS_HOST: "redis:6379"
      ZED_TOKEN: helpwave
      ZED_INSECURE: true
    command:
      - /usr/bin/bash
      - -c
      - |
        bash migrate.sh
        dapr run --run-file dev/dapr_run.yaml --config dev/dapr.yaml
    restart: unless-stopped
    network_mode: "service:devcontainer" # share ports with devcontainer

  # devcontainer is where the developer should do their development in
  devcontainer:
    build:
      context: ../images/dev-go-custom
      args:
        # renovate: dev-tag
        TAG: '15'
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    volumes:
      # mounts the whole repo
      - ../:/helpwave

      # shared go cache with services
      - gomodcache:/go/pkg # $GOMODCACHE
      - gocache:/home/helpwave/.cache/go-build # $GOCACHE

      # mounts the docker socket (allows DooD)
      - ${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock

    working_dir: /helpwave
    user: "helpwave"
    environment:
      # psql variables, allows easy management / debugging of postgres using `psql -d <database>`
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: postgres

      COMPOSE_FILE: "/helpwave/dev/docker-compose.yaml" # allows us to use `docker compose` in any directory
    restart: unless-stopped
    command: sleep infinity
    ports:
      # all of these ports are bound to in services
      - "3004:3004" # tasks-svc

volumes:
  gocache: {}
  gomodcache: {}
